                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stream_buffer
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _xTaskCheckForTimeOut
                                     12 	.globl _vTaskSetTimeOutState
                                     13 	.globl _xTaskGetCurrentTaskHandle
                                     14 	.globl _xTaskNotifyStateClear
                                     15 	.globl _xTaskNotifyWait
                                     16 	.globl _xTaskGenericNotifyFromISR
                                     17 	.globl _xTaskGenericNotify
                                     18 	.globl _xTaskResumeAll
                                     19 	.globl _vTaskSuspendAll
                                     20 	.globl _vPortFree
                                     21 	.globl _pvPortMalloc
                                     22 	.globl _memset
                                     23 	.globl _memcpy
                                     24 	.globl _P3_7
                                     25 	.globl _P3_6
                                     26 	.globl _P3_5
                                     27 	.globl _P3_4
                                     28 	.globl _P3_3
                                     29 	.globl _P3_2
                                     30 	.globl _P3_1
                                     31 	.globl _P3_0
                                     32 	.globl _P2_7
                                     33 	.globl _P2_6
                                     34 	.globl _P2_5
                                     35 	.globl _P2_4
                                     36 	.globl _P2_3
                                     37 	.globl _P2_2
                                     38 	.globl _P2_1
                                     39 	.globl _P2_0
                                     40 	.globl _P1_7
                                     41 	.globl _P1_6
                                     42 	.globl _P1_5
                                     43 	.globl _P1_4
                                     44 	.globl _P1_3
                                     45 	.globl _P1_2
                                     46 	.globl _P1_1
                                     47 	.globl _P1_0
                                     48 	.globl _P0_7
                                     49 	.globl _P0_6
                                     50 	.globl _P0_5
                                     51 	.globl _P0_4
                                     52 	.globl _P0_3
                                     53 	.globl _P0_2
                                     54 	.globl _P0_1
                                     55 	.globl _P0_0
                                     56 	.globl _EIRQ7
                                     57 	.globl _EIRQ6
                                     58 	.globl _EIRQ5
                                     59 	.globl _EIRQ4
                                     60 	.globl _EIRQ3
                                     61 	.globl _EIRQ2
                                     62 	.globl _EIRQ1
                                     63 	.globl _EIRQ0
                                     64 	.globl _T0CEN
                                     65 	.globl _T0ARL
                                     66 	.globl _T0IRQ
                                     67 	.globl _RXRDY
                                     68 	.globl _TXRDY
                                     69 	.globl _RXIRQ
                                     70 	.globl _TXIRQ
                                     71 	.globl _EEX
                                     72 	.globl _ET0
                                     73 	.globl _ES
                                     74 	.globl _EA
                                     75 	.globl _P3
                                     76 	.globl _P2
                                     77 	.globl _P1
                                     78 	.globl _P0
                                     79 	.globl _EXTINT
                                     80 	.globl _T0CH
                                     81 	.globl _T0CL
                                     82 	.globl _T0H
                                     83 	.globl _T0L
                                     84 	.globl _TCON
                                     85 	.globl _SBPH
                                     86 	.globl _SBPL
                                     87 	.globl _SBUF
                                     88 	.globl _SCON
                                     89 	.globl _IE
                                     90 	.globl _DPL
                                     91 	.globl _DPH
                                     92 	.globl _SP
                                     93 	.globl _PSW
                                     94 	.globl _B
                                     95 	.globl _ACC
                                     96 	.globl _xStreamBufferGenericCreate
                                     97 	.globl _vStreamBufferDelete
                                     98 	.globl _xStreamBufferReset
                                     99 	.globl _xStreamBufferSetTriggerLevel
                                    100 	.globl _xStreamBufferSpacesAvailable
                                    101 	.globl _xStreamBufferBytesAvailable
                                    102 	.globl _xStreamBufferSend
                                    103 	.globl _xStreamBufferSendFromISR
                                    104 	.globl _xStreamBufferReceive
                                    105 	.globl _xStreamBufferNextMessageLengthBytes
                                    106 	.globl _xStreamBufferReceiveFromISR
                                    107 	.globl _xStreamBufferIsEmpty
                                    108 	.globl _xStreamBufferIsFull
                                    109 	.globl _xStreamBufferSendCompletedFromISR
                                    110 	.globl _xStreamBufferReceiveCompletedFromISR
                                    111 ;--------------------------------------------------------
                                    112 ; special function registers
                                    113 ;--------------------------------------------------------
                                    114 	.area RSEG    (ABS,DATA)
      000000                        115 	.org 0x0000
                           0000E0   116 G$ACC$0_0$0 == 0x00e0
                           0000E0   117 _ACC	=	0x00e0
                           0000F0   118 G$B$0_0$0 == 0x00f0
                           0000F0   119 _B	=	0x00f0
                           0000D0   120 G$PSW$0_0$0 == 0x00d0
                           0000D0   121 _PSW	=	0x00d0
                           000081   122 G$SP$0_0$0 == 0x0081
                           000081   123 _SP	=	0x0081
                           000083   124 G$DPH$0_0$0 == 0x0083
                           000083   125 _DPH	=	0x0083
                           000082   126 G$DPL$0_0$0 == 0x0082
                           000082   127 _DPL	=	0x0082
                           0000A8   128 G$IE$0_0$0 == 0x00a8
                           0000A8   129 _IE	=	0x00a8
                           000098   130 G$SCON$0_0$0 == 0x0098
                           000098   131 _SCON	=	0x0098
                           000099   132 G$SBUF$0_0$0 == 0x0099
                           000099   133 _SBUF	=	0x0099
                           00009A   134 G$SBPL$0_0$0 == 0x009a
                           00009A   135 _SBPL	=	0x009a
                           00009B   136 G$SBPH$0_0$0 == 0x009b
                           00009B   137 _SBPH	=	0x009b
                           000088   138 G$TCON$0_0$0 == 0x0088
                           000088   139 _TCON	=	0x0088
                           00008C   140 G$T0L$0_0$0 == 0x008c
                           00008C   141 _T0L	=	0x008c
                           00008D   142 G$T0H$0_0$0 == 0x008d
                           00008D   143 _T0H	=	0x008d
                           00008E   144 G$T0CL$0_0$0 == 0x008e
                           00008E   145 _T0CL	=	0x008e
                           00008F   146 G$T0CH$0_0$0 == 0x008f
                           00008F   147 _T0CH	=	0x008f
                           0000C0   148 G$EXTINT$0_0$0 == 0x00c0
                           0000C0   149 _EXTINT	=	0x00c0
                           000080   150 G$P0$0_0$0 == 0x0080
                           000080   151 _P0	=	0x0080
                           000090   152 G$P1$0_0$0 == 0x0090
                           000090   153 _P1	=	0x0090
                           0000A0   154 G$P2$0_0$0 == 0x00a0
                           0000A0   155 _P2	=	0x00a0
                           0000B0   156 G$P3$0_0$0 == 0x00b0
                           0000B0   157 _P3	=	0x00b0
                                    158 ;--------------------------------------------------------
                                    159 ; special function bits
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           0000AF   163 G$EA$0_0$0 == 0x00af
                           0000AF   164 _EA	=	0x00af
                           0000AC   165 G$ES$0_0$0 == 0x00ac
                           0000AC   166 _ES	=	0x00ac
                           0000A9   167 G$ET0$0_0$0 == 0x00a9
                           0000A9   168 _ET0	=	0x00a9
                           0000A8   169 G$EEX$0_0$0 == 0x00a8
                           0000A8   170 _EEX	=	0x00a8
                           00009C   171 G$TXIRQ$0_0$0 == 0x009c
                           00009C   172 _TXIRQ	=	0x009c
                           00009D   173 G$RXIRQ$0_0$0 == 0x009d
                           00009D   174 _RXIRQ	=	0x009d
                           00009C   175 G$TXRDY$0_0$0 == 0x009c
                           00009C   176 _TXRDY	=	0x009c
                           00009D   177 G$RXRDY$0_0$0 == 0x009d
                           00009D   178 _RXRDY	=	0x009d
                           000088   179 G$T0IRQ$0_0$0 == 0x0088
                           000088   180 _T0IRQ	=	0x0088
                           00008C   181 G$T0ARL$0_0$0 == 0x008c
                           00008C   182 _T0ARL	=	0x008c
                           00008D   183 G$T0CEN$0_0$0 == 0x008d
                           00008D   184 _T0CEN	=	0x008d
                           0000C0   185 G$EIRQ0$0_0$0 == 0x00c0
                           0000C0   186 _EIRQ0	=	0x00c0
                           0000C1   187 G$EIRQ1$0_0$0 == 0x00c1
                           0000C1   188 _EIRQ1	=	0x00c1
                           0000C2   189 G$EIRQ2$0_0$0 == 0x00c2
                           0000C2   190 _EIRQ2	=	0x00c2
                           0000C3   191 G$EIRQ3$0_0$0 == 0x00c3
                           0000C3   192 _EIRQ3	=	0x00c3
                           0000C4   193 G$EIRQ4$0_0$0 == 0x00c4
                           0000C4   194 _EIRQ4	=	0x00c4
                           0000C5   195 G$EIRQ5$0_0$0 == 0x00c5
                           0000C5   196 _EIRQ5	=	0x00c5
                           0000C6   197 G$EIRQ6$0_0$0 == 0x00c6
                           0000C6   198 _EIRQ6	=	0x00c6
                           0000C7   199 G$EIRQ7$0_0$0 == 0x00c7
                           0000C7   200 _EIRQ7	=	0x00c7
                           000080   201 G$P0_0$0_0$0 == 0x0080
                           000080   202 _P0_0	=	0x0080
                           000081   203 G$P0_1$0_0$0 == 0x0081
                           000081   204 _P0_1	=	0x0081
                           000082   205 G$P0_2$0_0$0 == 0x0082
                           000082   206 _P0_2	=	0x0082
                           000083   207 G$P0_3$0_0$0 == 0x0083
                           000083   208 _P0_3	=	0x0083
                           000084   209 G$P0_4$0_0$0 == 0x0084
                           000084   210 _P0_4	=	0x0084
                           000085   211 G$P0_5$0_0$0 == 0x0085
                           000085   212 _P0_5	=	0x0085
                           000086   213 G$P0_6$0_0$0 == 0x0086
                           000086   214 _P0_6	=	0x0086
                           000087   215 G$P0_7$0_0$0 == 0x0087
                           000087   216 _P0_7	=	0x0087
                           000090   217 G$P1_0$0_0$0 == 0x0090
                           000090   218 _P1_0	=	0x0090
                           000091   219 G$P1_1$0_0$0 == 0x0091
                           000091   220 _P1_1	=	0x0091
                           000092   221 G$P1_2$0_0$0 == 0x0092
                           000092   222 _P1_2	=	0x0092
                           000093   223 G$P1_3$0_0$0 == 0x0093
                           000093   224 _P1_3	=	0x0093
                           000094   225 G$P1_4$0_0$0 == 0x0094
                           000094   226 _P1_4	=	0x0094
                           000095   227 G$P1_5$0_0$0 == 0x0095
                           000095   228 _P1_5	=	0x0095
                           000096   229 G$P1_6$0_0$0 == 0x0096
                           000096   230 _P1_6	=	0x0096
                           000097   231 G$P1_7$0_0$0 == 0x0097
                           000097   232 _P1_7	=	0x0097
                           0000A0   233 G$P2_0$0_0$0 == 0x00a0
                           0000A0   234 _P2_0	=	0x00a0
                           0000A1   235 G$P2_1$0_0$0 == 0x00a1
                           0000A1   236 _P2_1	=	0x00a1
                           0000A2   237 G$P2_2$0_0$0 == 0x00a2
                           0000A2   238 _P2_2	=	0x00a2
                           0000A3   239 G$P2_3$0_0$0 == 0x00a3
                           0000A3   240 _P2_3	=	0x00a3
                           0000A4   241 G$P2_4$0_0$0 == 0x00a4
                           0000A4   242 _P2_4	=	0x00a4
                           0000A5   243 G$P2_5$0_0$0 == 0x00a5
                           0000A5   244 _P2_5	=	0x00a5
                           0000A6   245 G$P2_6$0_0$0 == 0x00a6
                           0000A6   246 _P2_6	=	0x00a6
                           0000A7   247 G$P2_7$0_0$0 == 0x00a7
                           0000A7   248 _P2_7	=	0x00a7
                           0000B0   249 G$P3_0$0_0$0 == 0x00b0
                           0000B0   250 _P3_0	=	0x00b0
                           0000B1   251 G$P3_1$0_0$0 == 0x00b1
                           0000B1   252 _P3_1	=	0x00b1
                           0000B2   253 G$P3_2$0_0$0 == 0x00b2
                           0000B2   254 _P3_2	=	0x00b2
                           0000B3   255 G$P3_3$0_0$0 == 0x00b3
                           0000B3   256 _P3_3	=	0x00b3
                           0000B4   257 G$P3_4$0_0$0 == 0x00b4
                           0000B4   258 _P3_4	=	0x00b4
                           0000B5   259 G$P3_5$0_0$0 == 0x00b5
                           0000B5   260 _P3_5	=	0x00b5
                           0000B6   261 G$P3_6$0_0$0 == 0x00b6
                           0000B6   262 _P3_6	=	0x00b6
                           0000B7   263 G$P3_7$0_0$0 == 0x00b7
                           0000B7   264 _P3_7	=	0x00b7
                                    265 ;--------------------------------------------------------
                                    266 ; overlayable register banks
                                    267 ;--------------------------------------------------------
                                    268 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        269 	.ds 8
                                    270 ;--------------------------------------------------------
                                    271 ; overlayable bit register bank
                                    272 ;--------------------------------------------------------
                                    273 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        274 bits:
      000000                        275 	.ds 1
                           008000   276 	b0 = bits[0]
                           008100   277 	b1 = bits[1]
                           008200   278 	b2 = bits[2]
                           008300   279 	b3 = bits[3]
                           008400   280 	b4 = bits[4]
                           008500   281 	b5 = bits[5]
                           008600   282 	b6 = bits[6]
                           008700   283 	b7 = bits[7]
                                    284 ;--------------------------------------------------------
                                    285 ; internal ram data
                                    286 ;--------------------------------------------------------
                                    287 	.area DSEG    (DATA)
                                    288 ;--------------------------------------------------------
                                    289 ; overlayable items in internal ram 
                                    290 ;--------------------------------------------------------
                                    291 ;--------------------------------------------------------
                                    292 ; indirectly addressable internal ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area ISEG    (DATA)
                                    295 ;--------------------------------------------------------
                                    296 ; absolute internal ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area IABS    (ABS,DATA)
                                    299 	.area IABS    (ABS,DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; bit data
                                    302 ;--------------------------------------------------------
                                    303 	.area BSEG    (BIT)
                                    304 ;--------------------------------------------------------
                                    305 ; paged external ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area PSEG    (PAG,XDATA)
                                    308 ;--------------------------------------------------------
                                    309 ; external ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area XSEG    (XDATA)
                                    312 ;--------------------------------------------------------
                                    313 ; absolute external ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area XABS    (ABS,XDATA)
                                    316 ;--------------------------------------------------------
                                    317 ; external initialized ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area HOME    (CODE)
                                    320 	.area GSINIT0 (CODE)
                                    321 	.area GSINIT1 (CODE)
                                    322 	.area GSINIT2 (CODE)
                                    323 	.area GSINIT3 (CODE)
                                    324 	.area GSINIT4 (CODE)
                                    325 	.area GSINIT5 (CODE)
                                    326 	.area GSINIT  (CODE)
                                    327 	.area GSFINAL (CODE)
                                    328 	.area CSEG    (CODE)
                                    329 ;--------------------------------------------------------
                                    330 ; global & static initialisations
                                    331 ;--------------------------------------------------------
                                    332 	.area HOME    (CODE)
                                    333 	.area GSINIT  (CODE)
                                    334 	.area GSFINAL (CODE)
                                    335 	.area GSINIT  (CODE)
                                    336 ;--------------------------------------------------------
                                    337 ; Home
                                    338 ;--------------------------------------------------------
                                    339 	.area HOME    (CODE)
                                    340 	.area HOME    (CODE)
                                    341 ;--------------------------------------------------------
                                    342 ; code
                                    343 ;--------------------------------------------------------
                                    344 	.area CSEG    (CODE)
                                    345 ;------------------------------------------------------------
                                    346 ;Allocation info for local variables in function 'xStreamBufferGenericCreate'
                                    347 ;------------------------------------------------------------
                                    348 ;xTriggerLevelBytes        Allocated to stack - _bp -4
                                    349 ;xIsMessageBuffer          Allocated to stack - _bp -5
                                    350 ;xBufferSizeBytes          Allocated to stack - _bp +1
                                    351 ;pucAllocatedMemory        Allocated to stack - _bp +3
                                    352 ;ucFlags                   Allocated to stack - _bp +6
                                    353 ;------------------------------------------------------------
                           000000   354 	G$xStreamBufferGenericCreate$0$0 ==.
                           000000   355 	C$stream_buffer.c$219$0_0$119 ==.
                                    356 ;	src/FreeRTOS/stream_buffer.c:219: StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
                                    357 ;	-----------------------------------------
                                    358 ;	 function xStreamBufferGenericCreate
                                    359 ;	-----------------------------------------
      000000                        360 _xStreamBufferGenericCreate:
                           000007   361 	ar7 = 0x07
                           000006   362 	ar6 = 0x06
                           000005   363 	ar5 = 0x05
                           000004   364 	ar4 = 0x04
                           000003   365 	ar3 = 0x03
                           000002   366 	ar2 = 0x02
                           000001   367 	ar1 = 0x01
                           000000   368 	ar0 = 0x00
      000000 C0*00            [24]  369 	push	_bp
      000002 E5 81            [12]  370 	mov	a,sp
      000004 F5*00            [12]  371 	mov	_bp,a
      000006 24 06            [12]  372 	add	a,#0x06
      000008 F5 81            [12]  373 	mov	sp,a
      00000A AE 82            [24]  374 	mov	r6,dpl
      00000C AF 83            [24]  375 	mov	r7,dph
                           00000E   376 	C$stream_buffer.c$228$1_0$119 ==.
                                    377 ;	src/FreeRTOS/stream_buffer.c:228: if( xIsMessageBuffer == pdTRUE )
      00000E E5*00            [12]  378 	mov	a,_bp
      000010 24 FB            [12]  379 	add	a,#0xfb
      000012 F8               [12]  380 	mov	r0,a
      000013 B6 01 09         [24]  381 	cjne	@r0,#0x01,00102$
                           000016   382 	C$stream_buffer.c$231$2_0$120 ==.
                                    383 ;	src/FreeRTOS/stream_buffer.c:231: ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
      000016 E5*00            [12]  384 	mov	a,_bp
      000018 24 06            [12]  385 	add	a,#0x06
      00001A F8               [12]  386 	mov	r0,a
      00001B 76 01            [12]  387 	mov	@r0,#0x01
      00001D 80 07            [24]  388 	sjmp	00103$
      00001F                        389 00102$:
                           00001F   390 	C$stream_buffer.c$237$2_0$121 ==.
                                    391 ;	src/FreeRTOS/stream_buffer.c:237: ucFlags = 0;
      00001F E5*00            [12]  392 	mov	a,_bp
      000021 24 06            [12]  393 	add	a,#0x06
      000023 F8               [12]  394 	mov	r0,a
      000024 76 00            [12]  395 	mov	@r0,#0x00
      000026                        396 00103$:
                           000026   397 	C$stream_buffer.c$244$1_0$119 ==.
                                    398 ;	src/FreeRTOS/stream_buffer.c:244: if( xTriggerLevelBytes == ( size_t ) 0 )
      000026 E5*00            [12]  399 	mov	a,_bp
      000028 24 FC            [12]  400 	add	a,#0xfc
      00002A F8               [12]  401 	mov	r0,a
      00002B E6               [12]  402 	mov	a,@r0
      00002C 08               [12]  403 	inc	r0
      00002D 46               [12]  404 	orl	a,@r0
      00002E 70 0A            [24]  405 	jnz	00105$
                           000030   406 	C$stream_buffer.c$246$2_0$122 ==.
                                    407 ;	src/FreeRTOS/stream_buffer.c:246: xTriggerLevelBytes = ( size_t ) 1;
      000030 E5*00            [12]  408 	mov	a,_bp
      000032 24 FC            [12]  409 	add	a,#0xfc
      000034 F8               [12]  410 	mov	r0,a
      000035 76 01            [12]  411 	mov	@r0,#0x01
      000037 08               [12]  412 	inc	r0
      000038 76 00            [12]  413 	mov	@r0,#0x00
      00003A                        414 00105$:
                           00003A   415 	C$stream_buffer.c$257$1_0$119 ==.
                                    416 ;	src/FreeRTOS/stream_buffer.c:257: xBufferSizeBytes++;
      00003A A8*00            [24]  417 	mov	r0,_bp
      00003C 08               [12]  418 	inc	r0
      00003D 74 01            [12]  419 	mov	a,#0x01
      00003F 2E               [12]  420 	add	a,r6
      000040 F6               [12]  421 	mov	@r0,a
      000041 E4               [12]  422 	clr	a
      000042 3F               [12]  423 	addc	a,r7
      000043 08               [12]  424 	inc	r0
      000044 F6               [12]  425 	mov	@r0,a
                           000045   426 	C$stream_buffer.c$258$1_0$119 ==.
                                    427 ;	src/FreeRTOS/stream_buffer.c:258: pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
      000045 A8*00            [24]  428 	mov	r0,_bp
      000047 08               [12]  429 	inc	r0
      000048 74 12            [12]  430 	mov	a,#0x12
      00004A 26               [12]  431 	add	a,@r0
      00004B FB               [12]  432 	mov	r3,a
      00004C E4               [12]  433 	clr	a
      00004D 08               [12]  434 	inc	r0
      00004E 36               [12]  435 	addc	a,@r0
      00004F FC               [12]  436 	mov	r4,a
      000050 8B 82            [24]  437 	mov	dpl,r3
      000052 8C 83            [24]  438 	mov	dph,r4
      000054 12r00r00         [24]  439 	lcall	_pvPortMalloc
      000057 AA 82            [24]  440 	mov	r2,dpl
      000059 AB 83            [24]  441 	mov	r3,dph
      00005B AC F0            [24]  442 	mov	r4,b
      00005D E5*00            [12]  443 	mov	a,_bp
      00005F 24 03            [12]  444 	add	a,#0x03
      000061 F8               [12]  445 	mov	r0,a
      000062 A6 02            [24]  446 	mov	@r0,ar2
      000064 08               [12]  447 	inc	r0
      000065 A6 03            [24]  448 	mov	@r0,ar3
      000067 08               [12]  449 	inc	r0
      000068 A6 04            [24]  450 	mov	@r0,ar4
                           00006A   451 	C$stream_buffer.c$260$1_0$119 ==.
                                    452 ;	src/FreeRTOS/stream_buffer.c:260: if( pucAllocatedMemory != NULL )
      00006A E5*00            [12]  453 	mov	a,_bp
      00006C 24 03            [12]  454 	add	a,#0x03
      00006E F8               [12]  455 	mov	r0,a
      00006F E6               [12]  456 	mov	a,@r0
      000070 08               [12]  457 	inc	r0
      000071 46               [12]  458 	orl	a,@r0
      000072 60 50            [24]  459 	jz	00107$
                           000074   460 	C$stream_buffer.c$263$2_0$123 ==.
                                    461 ;	src/FreeRTOS/stream_buffer.c:263: pucAllocatedMemory + sizeof( StreamBuffer_t ),  /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
      000074 E5*00            [12]  462 	mov	a,_bp
      000076 24 03            [12]  463 	add	a,#0x03
      000078 F8               [12]  464 	mov	r0,a
      000079 74 12            [12]  465 	mov	a,#0x12
      00007B 26               [12]  466 	add	a,@r0
      00007C FD               [12]  467 	mov	r5,a
      00007D E4               [12]  468 	clr	a
      00007E 08               [12]  469 	inc	r0
      00007F 36               [12]  470 	addc	a,@r0
      000080 FE               [12]  471 	mov	r6,a
      000081 08               [12]  472 	inc	r0
      000082 86 07            [24]  473 	mov	ar7,@r0
                           000084   474 	C$stream_buffer.c$262$2_0$123 ==.
                                    475 ;	src/FreeRTOS/stream_buffer.c:262: prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
      000084 E5*00            [12]  476 	mov	a,_bp
      000086 24 03            [12]  477 	add	a,#0x03
      000088 F8               [12]  478 	mov	r0,a
      000089 86 02            [24]  479 	mov	ar2,@r0
      00008B 08               [12]  480 	inc	r0
      00008C 86 03            [24]  481 	mov	ar3,@r0
      00008E 08               [12]  482 	inc	r0
      00008F 86 04            [24]  483 	mov	ar4,@r0
      000091 E5*00            [12]  484 	mov	a,_bp
      000093 24 06            [12]  485 	add	a,#0x06
      000095 F8               [12]  486 	mov	r0,a
      000096 E6               [12]  487 	mov	a,@r0
      000097 C0 E0            [24]  488 	push	acc
      000099 E5*00            [12]  489 	mov	a,_bp
      00009B 24 FC            [12]  490 	add	a,#0xfc
      00009D F8               [12]  491 	mov	r0,a
      00009E E6               [12]  492 	mov	a,@r0
      00009F C0 E0            [24]  493 	push	acc
      0000A1 08               [12]  494 	inc	r0
      0000A2 E6               [12]  495 	mov	a,@r0
      0000A3 C0 E0            [24]  496 	push	acc
      0000A5 A8*00            [24]  497 	mov	r0,_bp
      0000A7 08               [12]  498 	inc	r0
      0000A8 E6               [12]  499 	mov	a,@r0
      0000A9 C0 E0            [24]  500 	push	acc
      0000AB 08               [12]  501 	inc	r0
      0000AC E6               [12]  502 	mov	a,@r0
      0000AD C0 E0            [24]  503 	push	acc
      0000AF C0 05            [24]  504 	push	ar5
      0000B1 C0 06            [24]  505 	push	ar6
      0000B3 C0 07            [24]  506 	push	ar7
      0000B5 8A 82            [24]  507 	mov	dpl,r2
      0000B7 8B 83            [24]  508 	mov	dph,r3
      0000B9 8C F0            [24]  509 	mov	b,r4
      0000BB 12r15r38         [24]  510 	lcall	_prvInitialiseNewStreamBuffer
      0000BE E5 81            [12]  511 	mov	a,sp
      0000C0 24 F8            [12]  512 	add	a,#0xf8
      0000C2 F5 81            [12]  513 	mov	sp,a
      0000C4                        514 00107$:
                           0000C4   515 	C$stream_buffer.c$275$1_0$119 ==.
                                    516 ;	src/FreeRTOS/stream_buffer.c:275: return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
      0000C4 E5*00            [12]  517 	mov	a,_bp
      0000C6 24 03            [12]  518 	add	a,#0x03
      0000C8 F8               [12]  519 	mov	r0,a
      0000C9 86 02            [24]  520 	mov	ar2,@r0
      0000CB 08               [12]  521 	inc	r0
      0000CC 86 03            [24]  522 	mov	ar3,@r0
      0000CE 08               [12]  523 	inc	r0
      0000CF 86 04            [24]  524 	mov	ar4,@r0
      0000D1 8A 82            [24]  525 	mov	dpl,r2
      0000D3 8B 83            [24]  526 	mov	dph,r3
      0000D5 8C F0            [24]  527 	mov	b,r4
                           0000D7   528 	C$stream_buffer.c$276$1_0$119 ==.
                                    529 ;	src/FreeRTOS/stream_buffer.c:276: }
      0000D7 85*00 81         [24]  530 	mov	sp,_bp
      0000DA D0*00            [24]  531 	pop	_bp
                           0000DC   532 	C$stream_buffer.c$276$1_0$119 ==.
                           0000DC   533 	XG$xStreamBufferGenericCreate$0$0 ==.
      0000DC 22               [24]  534 	ret
                                    535 ;------------------------------------------------------------
                                    536 ;Allocation info for local variables in function 'vStreamBufferDelete'
                                    537 ;------------------------------------------------------------
                                    538 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                    539 ;pxStreamBuffer            Allocated to registers r2 r3 r4 
                                    540 ;------------------------------------------------------------
                           0000DD   541 	G$vStreamBufferDelete$0$0 ==.
                           0000DD   542 	C$stream_buffer.c$359$1_0$126 ==.
                                    543 ;	src/FreeRTOS/stream_buffer.c:359: void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
                                    544 ;	-----------------------------------------
                                    545 ;	 function vStreamBufferDelete
                                    546 ;	-----------------------------------------
      0000DD                        547 _vStreamBufferDelete:
      0000DD AD 82            [24]  548 	mov	r5,dpl
      0000DF AE 83            [24]  549 	mov	r6,dph
      0000E1 AF F0            [24]  550 	mov	r7,b
                           0000E3   551 	C$stream_buffer.c$361$2_0$126 ==.
                                    552 ;	src/FreeRTOS/stream_buffer.c:361: StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
      0000E3 8D 02            [24]  553 	mov	ar2,r5
      0000E5 8E 03            [24]  554 	mov	ar3,r6
      0000E7 8F 04            [24]  555 	mov	ar4,r7
                           0000E9   556 	C$stream_buffer.c$367$1_0$126 ==.
                                    557 ;	src/FreeRTOS/stream_buffer.c:367: if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
      0000E9 74 11            [12]  558 	mov	a,#0x11
      0000EB 2D               [12]  559 	add	a,r5
      0000EC FD               [12]  560 	mov	r5,a
      0000ED E4               [12]  561 	clr	a
      0000EE 3E               [12]  562 	addc	a,r6
      0000EF FE               [12]  563 	mov	r6,a
      0000F0 8D 82            [24]  564 	mov	dpl,r5
      0000F2 8E 83            [24]  565 	mov	dph,r6
      0000F4 8F F0            [24]  566 	mov	b,r7
      0000F6 12r00r00         [24]  567 	lcall	__gptrget
      0000F9 20 E1 11         [24]  568 	jb	acc.1,00102$
                           0000FC   569 	C$stream_buffer.c$373$3_0$128 ==.
                                    570 ;	src/FreeRTOS/stream_buffer.c:373: vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
      0000FC 8A 05            [24]  571 	mov	ar5,r2
      0000FE 8B 06            [24]  572 	mov	ar6,r3
      000100 8C 07            [24]  573 	mov	ar7,r4
      000102 8D 82            [24]  574 	mov	dpl,r5
      000104 8E 83            [24]  575 	mov	dph,r6
      000106 8F F0            [24]  576 	mov	b,r7
      000108 12r00r00         [24]  577 	lcall	_vPortFree
      00010B 80 18            [24]  578 	sjmp	00104$
      00010D                        579 00102$:
                           00010D   580 	C$stream_buffer.c$387$2_0$129 ==.
                                    581 ;	src/FreeRTOS/stream_buffer.c:387: ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
      00010D 74 12            [12]  582 	mov	a,#0x12
      00010F C0 E0            [24]  583 	push	acc
      000111 E4               [12]  584 	clr	a
      000112 C0 E0            [24]  585 	push	acc
      000114 C0 E0            [24]  586 	push	acc
      000116 8A 82            [24]  587 	mov	dpl,r2
      000118 8B 83            [24]  588 	mov	dph,r3
      00011A 8C F0            [24]  589 	mov	b,r4
      00011C 12r00r00         [24]  590 	lcall	_memset
      00011F 15 81            [12]  591 	dec	sp
      000121 15 81            [12]  592 	dec	sp
      000123 15 81            [12]  593 	dec	sp
      000125                        594 00104$:
                           000125   595 	C$stream_buffer.c$389$1_0$126 ==.
                                    596 ;	src/FreeRTOS/stream_buffer.c:389: }
                           000125   597 	C$stream_buffer.c$389$1_0$126 ==.
                           000125   598 	XG$vStreamBufferDelete$0$0 ==.
      000125 22               [24]  599 	ret
                                    600 ;------------------------------------------------------------
                                    601 ;Allocation info for local variables in function 'xStreamBufferReset'
                                    602 ;------------------------------------------------------------
                                    603 ;xStreamBuffer             Allocated to stack - _bp +1
                                    604 ;pxStreamBuffer            Allocated to registers 
                                    605 ;xReturn                   Allocated to registers r7 
                                    606 ;sloc0                     Allocated to stack - _bp +4
                                    607 ;sloc1                     Allocated to stack - _bp +5
                                    608 ;------------------------------------------------------------
                           000126   609 	G$xStreamBufferReset$0$0 ==.
                           000126   610 	C$stream_buffer.c$392$1_0$131 ==.
                                    611 ;	src/FreeRTOS/stream_buffer.c:392: BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
                                    612 ;	-----------------------------------------
                                    613 ;	 function xStreamBufferReset
                                    614 ;	-----------------------------------------
      000126                        615 _xStreamBufferReset:
      000126 C0*00            [24]  616 	push	_bp
      000128 85 81*00         [24]  617 	mov	_bp,sp
      00012B C0 82            [24]  618 	push	dpl
      00012D C0 83            [24]  619 	push	dph
      00012F C0 F0            [24]  620 	push	b
      000131 05 81            [12]  621 	inc	sp
      000133 05 81            [12]  622 	inc	sp
      000135 05 81            [12]  623 	inc	sp
                           000137   624 	C$stream_buffer.c$395$2_0$131 ==.
                                    625 ;	src/FreeRTOS/stream_buffer.c:395: BaseType_t xReturn = pdFAIL;
      000137 7F 00            [12]  626 	mov	r7,#0x00
                           000139   627 	C$stream_buffer.c$412$1_0$131 ==.
                                    628 ;	src/FreeRTOS/stream_buffer.c:412: taskENTER_CRITICAL();
      000139 C0 E0            [24]  629 	push ACC 
      00013B C0 A8            [24]  630 	push IE 
                                    631 ;	assignBit
      00013D C2 AF            [12]  632 	clr	_EA
                           00013F   633 	C$stream_buffer.c$414$2_0$132 ==.
                                    634 ;	src/FreeRTOS/stream_buffer.c:414: if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
      00013F A8*00            [24]  635 	mov	r0,_bp
      000141 08               [12]  636 	inc	r0
      000142 74 08            [12]  637 	mov	a,#0x08
      000144 26               [12]  638 	add	a,@r0
      000145 FA               [12]  639 	mov	r2,a
      000146 E4               [12]  640 	clr	a
      000147 08               [12]  641 	inc	r0
      000148 36               [12]  642 	addc	a,@r0
      000149 FB               [12]  643 	mov	r3,a
      00014A 08               [12]  644 	inc	r0
      00014B 86 04            [24]  645 	mov	ar4,@r0
      00014D 8A 82            [24]  646 	mov	dpl,r2
      00014F 8B 83            [24]  647 	mov	dph,r3
      000151 8C F0            [24]  648 	mov	b,r4
      000153 12r00r00         [24]  649 	lcall	__gptrget
      000156 FA               [12]  650 	mov	r2,a
      000157 A3               [24]  651 	inc	dptr
      000158 12r00r00         [24]  652 	lcall	__gptrget
      00015B FB               [12]  653 	mov	r3,a
      00015C A3               [24]  654 	inc	dptr
      00015D 12r00r00         [24]  655 	lcall	__gptrget
      000160 FC               [12]  656 	mov	r4,a
      000161 EA               [12]  657 	mov	a,r2
      000162 4B               [12]  658 	orl	a,r3
      000163 60 03            [24]  659 	jz	00115$
      000165 02r02r44         [24]  660 	ljmp	00104$
      000168                        661 00115$:
                           000168   662 	C$stream_buffer.c$416$3_0$133 ==.
                                    663 ;	src/FreeRTOS/stream_buffer.c:416: if( pxStreamBuffer->xTaskWaitingToSend == NULL )
      000168 A8*00            [24]  664 	mov	r0,_bp
      00016A 08               [12]  665 	inc	r0
      00016B 74 0B            [12]  666 	mov	a,#0x0b
      00016D 26               [12]  667 	add	a,@r0
      00016E FA               [12]  668 	mov	r2,a
      00016F E4               [12]  669 	clr	a
      000170 08               [12]  670 	inc	r0
      000171 36               [12]  671 	addc	a,@r0
      000172 FB               [12]  672 	mov	r3,a
      000173 08               [12]  673 	inc	r0
      000174 86 04            [24]  674 	mov	ar4,@r0
      000176 8A 82            [24]  675 	mov	dpl,r2
      000178 8B 83            [24]  676 	mov	dph,r3
      00017A 8C F0            [24]  677 	mov	b,r4
      00017C 12r00r00         [24]  678 	lcall	__gptrget
      00017F FA               [12]  679 	mov	r2,a
      000180 A3               [24]  680 	inc	dptr
      000181 12r00r00         [24]  681 	lcall	__gptrget
      000184 FB               [12]  682 	mov	r3,a
      000185 A3               [24]  683 	inc	dptr
      000186 12r00r00         [24]  684 	lcall	__gptrget
      000189 FC               [12]  685 	mov	r4,a
      00018A EA               [12]  686 	mov	a,r2
      00018B 4B               [12]  687 	orl	a,r3
      00018C 60 03            [24]  688 	jz	00116$
      00018E 02r02r44         [24]  689 	ljmp	00104$
      000191                        690 00116$:
                           000191   691 	C$stream_buffer.c$422$4_0$134 ==.
                                    692 ;	src/FreeRTOS/stream_buffer.c:422: pxStreamBuffer->ucFlags );
      000191 A8*00            [24]  693 	mov	r0,_bp
      000193 08               [12]  694 	inc	r0
      000194 74 11            [12]  695 	mov	a,#0x11
      000196 26               [12]  696 	add	a,@r0
      000197 FA               [12]  697 	mov	r2,a
      000198 E4               [12]  698 	clr	a
      000199 08               [12]  699 	inc	r0
      00019A 36               [12]  700 	addc	a,@r0
      00019B FB               [12]  701 	mov	r3,a
      00019C 08               [12]  702 	inc	r0
      00019D 86 04            [24]  703 	mov	ar4,@r0
      00019F 8A 82            [24]  704 	mov	dpl,r2
      0001A1 8B 83            [24]  705 	mov	dph,r3
      0001A3 8C F0            [24]  706 	mov	b,r4
      0001A5 E5*00            [12]  707 	mov	a,_bp
      0001A7 24 04            [12]  708 	add	a,#0x04
      0001A9 F8               [12]  709 	mov	r0,a
      0001AA 12r00r00         [24]  710 	lcall	__gptrget
      0001AD F6               [12]  711 	mov	@r0,a
                           0001AE   712 	C$stream_buffer.c$421$4_0$134 ==.
                                    713 ;	src/FreeRTOS/stream_buffer.c:421: pxStreamBuffer->xTriggerLevelBytes,
      0001AE A8*00            [24]  714 	mov	r0,_bp
      0001B0 08               [12]  715 	inc	r0
      0001B1 74 06            [12]  716 	mov	a,#0x06
      0001B3 26               [12]  717 	add	a,@r0
      0001B4 FB               [12]  718 	mov	r3,a
      0001B5 E4               [12]  719 	clr	a
      0001B6 08               [12]  720 	inc	r0
      0001B7 36               [12]  721 	addc	a,@r0
      0001B8 FC               [12]  722 	mov	r4,a
      0001B9 08               [12]  723 	inc	r0
      0001BA 86 07            [24]  724 	mov	ar7,@r0
      0001BC 8B 82            [24]  725 	mov	dpl,r3
      0001BE 8C 83            [24]  726 	mov	dph,r4
      0001C0 8F F0            [24]  727 	mov	b,r7
      0001C2 12r00r00         [24]  728 	lcall	__gptrget
      0001C5 FB               [12]  729 	mov	r3,a
      0001C6 A3               [24]  730 	inc	dptr
      0001C7 12r00r00         [24]  731 	lcall	__gptrget
      0001CA FC               [12]  732 	mov	r4,a
                           0001CB   733 	C$stream_buffer.c$420$4_0$134 ==.
                                    734 ;	src/FreeRTOS/stream_buffer.c:420: pxStreamBuffer->xLength,
      0001CB A8*00            [24]  735 	mov	r0,_bp
      0001CD 08               [12]  736 	inc	r0
      0001CE 74 04            [12]  737 	mov	a,#0x04
      0001D0 26               [12]  738 	add	a,@r0
      0001D1 FD               [12]  739 	mov	r5,a
      0001D2 E4               [12]  740 	clr	a
      0001D3 08               [12]  741 	inc	r0
      0001D4 36               [12]  742 	addc	a,@r0
      0001D5 FE               [12]  743 	mov	r6,a
      0001D6 08               [12]  744 	inc	r0
      0001D7 86 07            [24]  745 	mov	ar7,@r0
      0001D9 8D 82            [24]  746 	mov	dpl,r5
      0001DB 8E 83            [24]  747 	mov	dph,r6
      0001DD 8F F0            [24]  748 	mov	b,r7
      0001DF E5*00            [12]  749 	mov	a,_bp
      0001E1 24 05            [12]  750 	add	a,#0x05
      0001E3 F8               [12]  751 	mov	r0,a
      0001E4 12r00r00         [24]  752 	lcall	__gptrget
      0001E7 F6               [12]  753 	mov	@r0,a
      0001E8 A3               [24]  754 	inc	dptr
      0001E9 12r00r00         [24]  755 	lcall	__gptrget
      0001EC 08               [12]  756 	inc	r0
      0001ED F6               [12]  757 	mov	@r0,a
                           0001EE   758 	C$stream_buffer.c$419$4_0$134 ==.
                                    759 ;	src/FreeRTOS/stream_buffer.c:419: pxStreamBuffer->pucBuffer,
      0001EE A8*00            [24]  760 	mov	r0,_bp
      0001F0 08               [12]  761 	inc	r0
      0001F1 74 0E            [12]  762 	mov	a,#0x0e
      0001F3 26               [12]  763 	add	a,@r0
      0001F4 FA               [12]  764 	mov	r2,a
      0001F5 E4               [12]  765 	clr	a
      0001F6 08               [12]  766 	inc	r0
      0001F7 36               [12]  767 	addc	a,@r0
      0001F8 FE               [12]  768 	mov	r6,a
      0001F9 08               [12]  769 	inc	r0
      0001FA 86 07            [24]  770 	mov	ar7,@r0
      0001FC 8A 82            [24]  771 	mov	dpl,r2
      0001FE 8E 83            [24]  772 	mov	dph,r6
      000200 8F F0            [24]  773 	mov	b,r7
      000202 12r00r00         [24]  774 	lcall	__gptrget
      000205 FA               [12]  775 	mov	r2,a
      000206 A3               [24]  776 	inc	dptr
      000207 12r00r00         [24]  777 	lcall	__gptrget
      00020A FE               [12]  778 	mov	r6,a
      00020B A3               [24]  779 	inc	dptr
      00020C 12r00r00         [24]  780 	lcall	__gptrget
      00020F FF               [12]  781 	mov	r7,a
                           000210   782 	C$stream_buffer.c$418$4_0$134 ==.
                                    783 ;	src/FreeRTOS/stream_buffer.c:418: prvInitialiseNewStreamBuffer( pxStreamBuffer,
      000210 E5*00            [12]  784 	mov	a,_bp
      000212 24 04            [12]  785 	add	a,#0x04
      000214 F8               [12]  786 	mov	r0,a
      000215 E6               [12]  787 	mov	a,@r0
      000216 C0 E0            [24]  788 	push	acc
      000218 C0 03            [24]  789 	push	ar3
      00021A C0 04            [24]  790 	push	ar4
      00021C E5*00            [12]  791 	mov	a,_bp
      00021E 24 05            [12]  792 	add	a,#0x05
      000220 F8               [12]  793 	mov	r0,a
      000221 E6               [12]  794 	mov	a,@r0
      000222 C0 E0            [24]  795 	push	acc
      000224 08               [12]  796 	inc	r0
      000225 E6               [12]  797 	mov	a,@r0
      000226 C0 E0            [24]  798 	push	acc
      000228 C0 02            [24]  799 	push	ar2
      00022A C0 06            [24]  800 	push	ar6
      00022C C0 07            [24]  801 	push	ar7
      00022E A8*00            [24]  802 	mov	r0,_bp
      000230 08               [12]  803 	inc	r0
      000231 86 82            [24]  804 	mov	dpl,@r0
      000233 08               [12]  805 	inc	r0
      000234 86 83            [24]  806 	mov	dph,@r0
      000236 08               [12]  807 	inc	r0
      000237 86 F0            [24]  808 	mov	b,@r0
      000239 12r15r38         [24]  809 	lcall	_prvInitialiseNewStreamBuffer
      00023C E5 81            [12]  810 	mov	a,sp
      00023E 24 F8            [12]  811 	add	a,#0xf8
      000240 F5 81            [12]  812 	mov	sp,a
                           000242   813 	C$stream_buffer.c$423$4_0$134 ==.
                                    814 ;	src/FreeRTOS/stream_buffer.c:423: xReturn = pdPASS;
      000242 7F 01            [12]  815 	mov	r7,#0x01
      000244                        816 00104$:
                           000244   817 	C$stream_buffer.c$435$1_0$131 ==.
                                    818 ;	src/FreeRTOS/stream_buffer.c:435: taskEXIT_CRITICAL();
      000244 D0 E0            [24]  819 	pop ACC 
      000246 53 E0 80         [24]  820 	anl	_ACC,#0x80
      000249 E5 E0            [12]  821 	mov	a,_ACC
      00024B 42 A8            [12]  822 	orl	_IE,a
      00024D D0 E0            [24]  823 	pop ACC 
                           00024F   824 	C$stream_buffer.c$437$1_0$131 ==.
                                    825 ;	src/FreeRTOS/stream_buffer.c:437: return xReturn;
      00024F 8F 82            [24]  826 	mov	dpl,r7
                           000251   827 	C$stream_buffer.c$438$1_0$131 ==.
                                    828 ;	src/FreeRTOS/stream_buffer.c:438: }
      000251 85*00 81         [24]  829 	mov	sp,_bp
      000254 D0*00            [24]  830 	pop	_bp
                           000256   831 	C$stream_buffer.c$438$1_0$131 ==.
                           000256   832 	XG$xStreamBufferReset$0$0 ==.
      000256 22               [24]  833 	ret
                                    834 ;------------------------------------------------------------
                                    835 ;Allocation info for local variables in function 'xStreamBufferSetTriggerLevel'
                                    836 ;------------------------------------------------------------
                                    837 ;xTriggerLevel             Allocated to stack - _bp -4
                                    838 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                    839 ;pxStreamBuffer            Allocated to registers r5 r6 r7 
                                    840 ;xReturn                   Allocated to registers r7 
                                    841 ;------------------------------------------------------------
                           000257   842 	G$xStreamBufferSetTriggerLevel$0$0 ==.
                           000257   843 	C$stream_buffer.c$441$1_0$136 ==.
                                    844 ;	src/FreeRTOS/stream_buffer.c:441: BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
                                    845 ;	-----------------------------------------
                                    846 ;	 function xStreamBufferSetTriggerLevel
                                    847 ;	-----------------------------------------
      000257                        848 _xStreamBufferSetTriggerLevel:
      000257 C0*00            [24]  849 	push	_bp
      000259 85 81*00         [24]  850 	mov	_bp,sp
      00025C AD 82            [24]  851 	mov	r5,dpl
      00025E AE 83            [24]  852 	mov	r6,dph
      000260 AF F0            [24]  853 	mov	r7,b
                           000262   854 	C$stream_buffer.c$443$2_0$136 ==.
                                    855 ;	src/FreeRTOS/stream_buffer.c:443: StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
                           000262   856 	C$stream_buffer.c$449$1_0$136 ==.
                                    857 ;	src/FreeRTOS/stream_buffer.c:449: if( xTriggerLevel == ( size_t ) 0 )
      000262 E5*00            [12]  858 	mov	a,_bp
      000264 24 FC            [12]  859 	add	a,#0xfc
      000266 F8               [12]  860 	mov	r0,a
      000267 E6               [12]  861 	mov	a,@r0
      000268 08               [12]  862 	inc	r0
      000269 46               [12]  863 	orl	a,@r0
      00026A 70 0A            [24]  864 	jnz	00102$
                           00026C   865 	C$stream_buffer.c$451$2_0$137 ==.
                                    866 ;	src/FreeRTOS/stream_buffer.c:451: xTriggerLevel = ( size_t ) 1;
      00026C E5*00            [12]  867 	mov	a,_bp
      00026E 24 FC            [12]  868 	add	a,#0xfc
      000270 F8               [12]  869 	mov	r0,a
      000271 76 01            [12]  870 	mov	@r0,#0x01
      000273 08               [12]  871 	inc	r0
      000274 76 00            [12]  872 	mov	@r0,#0x00
      000276                        873 00102$:
                           000276   874 	C$stream_buffer.c$456$1_0$136 ==.
                                    875 ;	src/FreeRTOS/stream_buffer.c:456: if( xTriggerLevel <= pxStreamBuffer->xLength )
      000276 74 04            [12]  876 	mov	a,#0x04
      000278 2D               [12]  877 	add	a,r5
      000279 FA               [12]  878 	mov	r2,a
      00027A E4               [12]  879 	clr	a
      00027B 3E               [12]  880 	addc	a,r6
      00027C FB               [12]  881 	mov	r3,a
      00027D 8F 04            [24]  882 	mov	ar4,r7
      00027F 8A 82            [24]  883 	mov	dpl,r2
      000281 8B 83            [24]  884 	mov	dph,r3
      000283 8C F0            [24]  885 	mov	b,r4
      000285 12r00r00         [24]  886 	lcall	__gptrget
      000288 FA               [12]  887 	mov	r2,a
      000289 A3               [24]  888 	inc	dptr
      00028A 12r00r00         [24]  889 	lcall	__gptrget
      00028D FB               [12]  890 	mov	r3,a
      00028E E5*00            [12]  891 	mov	a,_bp
      000290 24 FC            [12]  892 	add	a,#0xfc
      000292 F8               [12]  893 	mov	r0,a
      000293 C3               [12]  894 	clr	c
      000294 EA               [12]  895 	mov	a,r2
      000295 96               [12]  896 	subb	a,@r0
      000296 EB               [12]  897 	mov	a,r3
      000297 08               [12]  898 	inc	r0
      000298 96               [12]  899 	subb	a,@r0
      000299 40 20            [24]  900 	jc	00104$
                           00029B   901 	C$stream_buffer.c$458$2_0$138 ==.
                                    902 ;	src/FreeRTOS/stream_buffer.c:458: pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
      00029B 74 06            [12]  903 	mov	a,#0x06
      00029D 2D               [12]  904 	add	a,r5
      00029E FD               [12]  905 	mov	r5,a
      00029F E4               [12]  906 	clr	a
      0002A0 3E               [12]  907 	addc	a,r6
      0002A1 FE               [12]  908 	mov	r6,a
      0002A2 8D 82            [24]  909 	mov	dpl,r5
      0002A4 8E 83            [24]  910 	mov	dph,r6
      0002A6 8F F0            [24]  911 	mov	b,r7
      0002A8 E5*00            [12]  912 	mov	a,_bp
      0002AA 24 FC            [12]  913 	add	a,#0xfc
      0002AC F8               [12]  914 	mov	r0,a
      0002AD E6               [12]  915 	mov	a,@r0
      0002AE 12r00r00         [24]  916 	lcall	__gptrput
      0002B1 A3               [24]  917 	inc	dptr
      0002B2 08               [12]  918 	inc	r0
      0002B3 E6               [12]  919 	mov	a,@r0
      0002B4 12r00r00         [24]  920 	lcall	__gptrput
                           0002B7   921 	C$stream_buffer.c$459$2_0$138 ==.
                                    922 ;	src/FreeRTOS/stream_buffer.c:459: xReturn = pdPASS;
      0002B7 7F 01            [12]  923 	mov	r7,#0x01
      0002B9 80 02            [24]  924 	sjmp	00105$
      0002BB                        925 00104$:
                           0002BB   926 	C$stream_buffer.c$463$2_0$139 ==.
                                    927 ;	src/FreeRTOS/stream_buffer.c:463: xReturn = pdFALSE;
      0002BB 7F 00            [12]  928 	mov	r7,#0x00
      0002BD                        929 00105$:
                           0002BD   930 	C$stream_buffer.c$466$1_0$136 ==.
                                    931 ;	src/FreeRTOS/stream_buffer.c:466: return xReturn;
      0002BD 8F 82            [24]  932 	mov	dpl,r7
                           0002BF   933 	C$stream_buffer.c$467$1_0$136 ==.
                                    934 ;	src/FreeRTOS/stream_buffer.c:467: }
      0002BF D0*00            [24]  935 	pop	_bp
                           0002C1   936 	C$stream_buffer.c$467$1_0$136 ==.
                           0002C1   937 	XG$xStreamBufferSetTriggerLevel$0$0 ==.
      0002C1 22               [24]  938 	ret
                                    939 ;------------------------------------------------------------
                                    940 ;Allocation info for local variables in function 'xStreamBufferSpacesAvailable'
                                    941 ;------------------------------------------------------------
                                    942 ;xStreamBuffer             Allocated to stack - _bp +1
                                    943 ;pxStreamBuffer            Allocated to registers 
                                    944 ;xSpace                    Allocated to registers r5 r6 
                                    945 ;sloc0                     Allocated to stack - _bp +4
                                    946 ;------------------------------------------------------------
                           0002C2   947 	G$xStreamBufferSpacesAvailable$0$0 ==.
                           0002C2   948 	C$stream_buffer.c$470$1_0$141 ==.
                                    949 ;	src/FreeRTOS/stream_buffer.c:470: size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
                                    950 ;	-----------------------------------------
                                    951 ;	 function xStreamBufferSpacesAvailable
                                    952 ;	-----------------------------------------
      0002C2                        953 _xStreamBufferSpacesAvailable:
      0002C2 C0*00            [24]  954 	push	_bp
      0002C4 85 81*00         [24]  955 	mov	_bp,sp
      0002C7 C0 82            [24]  956 	push	dpl
      0002C9 C0 83            [24]  957 	push	dph
      0002CB C0 F0            [24]  958 	push	b
      0002CD 05 81            [12]  959 	inc	sp
      0002CF 05 81            [12]  960 	inc	sp
                           0002D1   961 	C$stream_buffer.c$477$1_0$141 ==.
                                    962 ;	src/FreeRTOS/stream_buffer.c:477: xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
      0002D1 A8*00            [24]  963 	mov	r0,_bp
      0002D3 08               [12]  964 	inc	r0
      0002D4 74 04            [12]  965 	mov	a,#0x04
      0002D6 26               [12]  966 	add	a,@r0
      0002D7 FB               [12]  967 	mov	r3,a
      0002D8 E4               [12]  968 	clr	a
      0002D9 08               [12]  969 	inc	r0
      0002DA 36               [12]  970 	addc	a,@r0
      0002DB FA               [12]  971 	mov	r2,a
      0002DC 08               [12]  972 	inc	r0
      0002DD 86 04            [24]  973 	mov	ar4,@r0
      0002DF 8B 82            [24]  974 	mov	dpl,r3
      0002E1 8A 83            [24]  975 	mov	dph,r2
      0002E3 8C F0            [24]  976 	mov	b,r4
      0002E5 12r00r00         [24]  977 	lcall	__gptrget
      0002E8 FB               [12]  978 	mov	r3,a
      0002E9 A3               [24]  979 	inc	dptr
      0002EA 12r00r00         [24]  980 	lcall	__gptrget
      0002ED FC               [12]  981 	mov	r4,a
      0002EE A8*00            [24]  982 	mov	r0,_bp
      0002F0 08               [12]  983 	inc	r0
      0002F1 86 82            [24]  984 	mov	dpl,@r0
      0002F3 08               [12]  985 	inc	r0
      0002F4 86 83            [24]  986 	mov	dph,@r0
      0002F6 08               [12]  987 	inc	r0
      0002F7 86 F0            [24]  988 	mov	b,@r0
      0002F9 12r00r00         [24]  989 	lcall	__gptrget
      0002FC FA               [12]  990 	mov	r2,a
      0002FD A3               [24]  991 	inc	dptr
      0002FE 12r00r00         [24]  992 	lcall	__gptrget
      000301 FF               [12]  993 	mov	r7,a
      000302 E5*00            [12]  994 	mov	a,_bp
      000304 24 04            [12]  995 	add	a,#0x04
      000306 F8               [12]  996 	mov	r0,a
      000307 EA               [12]  997 	mov	a,r2
      000308 2B               [12]  998 	add	a,r3
      000309 F6               [12]  999 	mov	@r0,a
      00030A EF               [12] 1000 	mov	a,r7
      00030B 3C               [12] 1001 	addc	a,r4
      00030C 08               [12] 1002 	inc	r0
      00030D F6               [12] 1003 	mov	@r0,a
                           00030E  1004 	C$stream_buffer.c$478$1_0$141 ==.
                                   1005 ;	src/FreeRTOS/stream_buffer.c:478: xSpace -= pxStreamBuffer->xHead;
      00030E A8*00            [24] 1006 	mov	r0,_bp
      000310 08               [12] 1007 	inc	r0
      000311 74 02            [12] 1008 	mov	a,#0x02
      000313 26               [12] 1009 	add	a,@r0
      000314 FD               [12] 1010 	mov	r5,a
      000315 E4               [12] 1011 	clr	a
      000316 08               [12] 1012 	inc	r0
      000317 36               [12] 1013 	addc	a,@r0
      000318 FE               [12] 1014 	mov	r6,a
      000319 08               [12] 1015 	inc	r0
      00031A 86 07            [24] 1016 	mov	ar7,@r0
      00031C 8D 82            [24] 1017 	mov	dpl,r5
      00031E 8E 83            [24] 1018 	mov	dph,r6
      000320 8F F0            [24] 1019 	mov	b,r7
      000322 12r00r00         [24] 1020 	lcall	__gptrget
      000325 FD               [12] 1021 	mov	r5,a
      000326 A3               [24] 1022 	inc	dptr
      000327 12r00r00         [24] 1023 	lcall	__gptrget
      00032A FE               [12] 1024 	mov	r6,a
      00032B E5*00            [12] 1025 	mov	a,_bp
      00032D 24 04            [12] 1026 	add	a,#0x04
      00032F F8               [12] 1027 	mov	r0,a
      000330 E6               [12] 1028 	mov	a,@r0
      000331 C3               [12] 1029 	clr	c
      000332 9D               [12] 1030 	subb	a,r5
      000333 FD               [12] 1031 	mov	r5,a
      000334 08               [12] 1032 	inc	r0
      000335 E6               [12] 1033 	mov	a,@r0
      000336 9E               [12] 1034 	subb	a,r6
      000337 FE               [12] 1035 	mov	r6,a
                           000338  1036 	C$stream_buffer.c$479$1_0$141 ==.
                                   1037 ;	src/FreeRTOS/stream_buffer.c:479: xSpace -= ( size_t ) 1;
      000338 ED               [12] 1038 	mov	a,r5
      000339 24 FF            [12] 1039 	add	a,#0xff
      00033B FF               [12] 1040 	mov	r7,a
      00033C EE               [12] 1041 	mov	a,r6
      00033D 34 FF            [12] 1042 	addc	a,#0xff
      00033F FE               [12] 1043 	mov	r6,a
                           000340  1044 	C$stream_buffer.c$481$1_0$141 ==.
                                   1045 ;	src/FreeRTOS/stream_buffer.c:481: if( xSpace >= pxStreamBuffer->xLength )
      000340 C3               [12] 1046 	clr	c
      000341 EF               [12] 1047 	mov	a,r7
      000342 9B               [12] 1048 	subb	a,r3
      000343 EE               [12] 1049 	mov	a,r6
      000344 9C               [12] 1050 	subb	a,r4
      000345 40 07            [24] 1051 	jc	00102$
                           000347  1052 	C$stream_buffer.c$483$2_0$142 ==.
                                   1053 ;	src/FreeRTOS/stream_buffer.c:483: xSpace -= pxStreamBuffer->xLength;
      000347 EF               [12] 1054 	mov	a,r7
      000348 C3               [12] 1055 	clr	c
      000349 9B               [12] 1056 	subb	a,r3
      00034A FF               [12] 1057 	mov	r7,a
      00034B EE               [12] 1058 	mov	a,r6
      00034C 9C               [12] 1059 	subb	a,r4
      00034D FE               [12] 1060 	mov	r6,a
      00034E                       1061 00102$:
                           00034E  1062 	C$stream_buffer.c$490$1_0$141 ==.
                                   1063 ;	src/FreeRTOS/stream_buffer.c:490: return xSpace;
      00034E 8F 82            [24] 1064 	mov	dpl,r7
      000350 8E 83            [24] 1065 	mov	dph,r6
                           000352  1066 	C$stream_buffer.c$491$1_0$141 ==.
                                   1067 ;	src/FreeRTOS/stream_buffer.c:491: }
      000352 85*00 81         [24] 1068 	mov	sp,_bp
      000355 D0*00            [24] 1069 	pop	_bp
                           000357  1070 	C$stream_buffer.c$491$1_0$141 ==.
                           000357  1071 	XG$xStreamBufferSpacesAvailable$0$0 ==.
      000357 22               [24] 1072 	ret
                                   1073 ;------------------------------------------------------------
                                   1074 ;Allocation info for local variables in function 'xStreamBufferBytesAvailable'
                                   1075 ;------------------------------------------------------------
                                   1076 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   1077 ;pxStreamBuffer            Allocated to registers 
                                   1078 ;xReturn                   Allocated to registers r6 r7 
                                   1079 ;------------------------------------------------------------
                           000358  1080 	G$xStreamBufferBytesAvailable$0$0 ==.
                           000358  1081 	C$stream_buffer.c$494$1_0$145 ==.
                                   1082 ;	src/FreeRTOS/stream_buffer.c:494: size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
                                   1083 ;	-----------------------------------------
                                   1084 ;	 function xStreamBufferBytesAvailable
                                   1085 ;	-----------------------------------------
      000358                       1086 _xStreamBufferBytesAvailable:
                           000358  1087 	C$stream_buffer.c$501$1_0$145 ==.
                                   1088 ;	src/FreeRTOS/stream_buffer.c:501: xReturn = prvBytesInBuffer( pxStreamBuffer );
      000358 12r14rB8         [24] 1089 	lcall	_prvBytesInBuffer
                           00035B  1090 	C$stream_buffer.c$502$1_0$145 ==.
                                   1091 ;	src/FreeRTOS/stream_buffer.c:502: return xReturn;
                           00035B  1092 	C$stream_buffer.c$503$1_0$145 ==.
                                   1093 ;	src/FreeRTOS/stream_buffer.c:503: }
                           00035B  1094 	C$stream_buffer.c$503$1_0$145 ==.
                           00035B  1095 	XG$xStreamBufferBytesAvailable$0$0 ==.
      00035B 22               [24] 1096 	ret
                                   1097 ;------------------------------------------------------------
                                   1098 ;Allocation info for local variables in function 'xStreamBufferSend'
                                   1099 ;------------------------------------------------------------
                                   1100 ;pvTxData                  Allocated to stack - _bp -5
                                   1101 ;xDataLengthBytes          Allocated to stack - _bp -7
                                   1102 ;xTicksToWait              Allocated to stack - _bp -9
                                   1103 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   1104 ;pxStreamBuffer            Allocated to stack - _bp +4
                                   1105 ;xReturn                   Allocated to stack - _bp +2
                                   1106 ;xSpace                    Allocated to stack - _bp +7
                                   1107 ;xRequiredSpace            Allocated to stack - _bp +9
                                   1108 ;xTimeOut                  Allocated to stack - _bp +11
                                   1109 ;sloc0                     Allocated to stack - _bp +1
                                   1110 ;sloc1                     Allocated to stack - _bp +2
                                   1111 ;------------------------------------------------------------
                           00035C  1112 	G$xStreamBufferSend$0$0 ==.
                           00035C  1113 	C$stream_buffer.c$506$1_0$147 ==.
                                   1114 ;	src/FreeRTOS/stream_buffer.c:506: size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                                   1115 ;	-----------------------------------------
                                   1116 ;	 function xStreamBufferSend
                                   1117 ;	-----------------------------------------
      00035C                       1118 _xStreamBufferSend:
      00035C C0*00            [24] 1119 	push	_bp
      00035E E5 81            [12] 1120 	mov	a,sp
      000360 F5*00            [12] 1121 	mov	_bp,a
      000362 24 0D            [12] 1122 	add	a,#0x0d
      000364 F5 81            [12] 1123 	mov	sp,a
      000366 AD 82            [24] 1124 	mov	r5,dpl
      000368 AE 83            [24] 1125 	mov	r6,dph
      00036A AF F0            [24] 1126 	mov	r7,b
                           00036C  1127 	C$stream_buffer.c$511$2_0$147 ==.
                                   1128 ;	src/FreeRTOS/stream_buffer.c:511: StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
      00036C E5*00            [12] 1129 	mov	a,_bp
      00036E 24 04            [12] 1130 	add	a,#0x04
      000370 F8               [12] 1131 	mov	r0,a
      000371 A6 05            [24] 1132 	mov	@r0,ar5
      000373 08               [12] 1133 	inc	r0
      000374 A6 06            [24] 1134 	mov	@r0,ar6
      000376 08               [12] 1135 	inc	r0
      000377 A6 07            [24] 1136 	mov	@r0,ar7
                           000379  1137 	C$stream_buffer.c$512$2_0$147 ==.
                                   1138 ;	src/FreeRTOS/stream_buffer.c:512: size_t xReturn, xSpace = 0;
      000379 E5*00            [12] 1139 	mov	a,_bp
      00037B 24 07            [12] 1140 	add	a,#0x07
      00037D F8               [12] 1141 	mov	r0,a
      00037E E4               [12] 1142 	clr	a
      00037F F6               [12] 1143 	mov	@r0,a
      000380 08               [12] 1144 	inc	r0
      000381 F6               [12] 1145 	mov	@r0,a
                           000382  1146 	C$stream_buffer.c$513$2_0$147 ==.
                                   1147 ;	src/FreeRTOS/stream_buffer.c:513: size_t xRequiredSpace = xDataLengthBytes;
      000382 E5*00            [12] 1148 	mov	a,_bp
      000384 24 F9            [12] 1149 	add	a,#0xf9
      000386 F8               [12] 1150 	mov	r0,a
      000387 E5*00            [12] 1151 	mov	a,_bp
      000389 24 09            [12] 1152 	add	a,#0x09
      00038B F9               [12] 1153 	mov	r1,a
      00038C E6               [12] 1154 	mov	a,@r0
      00038D F7               [12] 1155 	mov	@r1,a
      00038E 08               [12] 1156 	inc	r0
      00038F 09               [12] 1157 	inc	r1
      000390 E6               [12] 1158 	mov	a,@r0
      000391 F7               [12] 1159 	mov	@r1,a
                           000392  1160 	C$stream_buffer.c$523$1_0$147 ==.
                                   1161 ;	src/FreeRTOS/stream_buffer.c:523: if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
      000392 74 11            [12] 1162 	mov	a,#0x11
      000394 2D               [12] 1163 	add	a,r5
      000395 FD               [12] 1164 	mov	r5,a
      000396 E4               [12] 1165 	clr	a
      000397 3E               [12] 1166 	addc	a,r6
      000398 FE               [12] 1167 	mov	r6,a
      000399 8D 82            [24] 1168 	mov	dpl,r5
      00039B 8E 83            [24] 1169 	mov	dph,r6
      00039D 8F F0            [24] 1170 	mov	b,r7
      00039F 12r00r00         [24] 1171 	lcall	__gptrget
      0003A2 FD               [12] 1172 	mov	r5,a
      0003A3 30 E0 0D         [24] 1173 	jnb	acc.0,00102$
                           0003A6  1174 	C$stream_buffer.c$525$2_0$148 ==.
                                   1175 ;	src/FreeRTOS/stream_buffer.c:525: xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
      0003A6 E5*00            [12] 1176 	mov	a,_bp
      0003A8 24 09            [12] 1177 	add	a,#0x09
      0003AA F8               [12] 1178 	mov	r0,a
      0003AB 74 02            [12] 1179 	mov	a,#0x02
      0003AD 26               [12] 1180 	add	a,@r0
      0003AE F6               [12] 1181 	mov	@r0,a
      0003AF E4               [12] 1182 	clr	a
      0003B0 08               [12] 1183 	inc	r0
      0003B1 36               [12] 1184 	addc	a,@r0
      0003B2 F6               [12] 1185 	mov	@r0,a
      0003B3                       1186 00102$:
                           0003B3  1187 	C$stream_buffer.c$535$1_0$147 ==.
                                   1188 ;	src/FreeRTOS/stream_buffer.c:535: if( xTicksToWait != ( TickType_t ) 0 )
      0003B3 E5*00            [12] 1189 	mov	a,_bp
      0003B5 24 F7            [12] 1190 	add	a,#0xf7
      0003B7 F8               [12] 1191 	mov	r0,a
      0003B8 E6               [12] 1192 	mov	a,@r0
      0003B9 08               [12] 1193 	inc	r0
      0003BA 46               [12] 1194 	orl	a,@r0
      0003BB 70 03            [24] 1195 	jnz	00155$
      0003BD 02r04rEF         [24] 1196 	ljmp	00110$
      0003C0                       1197 00155$:
                           0003C0  1198 	C$stream_buffer.c$537$1_0$147 ==.
                                   1199 ;	src/FreeRTOS/stream_buffer.c:537: vTaskSetTimeOutState( &xTimeOut );
      0003C0 E5*00            [12] 1200 	mov	a,_bp
      0003C2 24 0B            [12] 1201 	add	a,#0x0b
      0003C4 FF               [12] 1202 	mov	r7,a
      0003C5 FC               [12] 1203 	mov	r4,a
      0003C6 7D 00            [12] 1204 	mov	r5,#0x00
      0003C8 7E 40            [12] 1205 	mov	r6,#0x40
      0003CA 8C 82            [24] 1206 	mov	dpl,r4
      0003CC 8D 83            [24] 1207 	mov	dph,r5
      0003CE 8E F0            [24] 1208 	mov	b,r6
      0003D0 C0 07            [24] 1209 	push	ar7
      0003D2 12r00r00         [24] 1210 	lcall	_vTaskSetTimeOutState
      0003D5 D0 07            [24] 1211 	pop	ar7
                           0003D7  1212 	C$stream_buffer.c$539$2_0$150 ==.
                                   1213 ;	src/FreeRTOS/stream_buffer.c:539: do
      0003D7 A8*00            [24] 1214 	mov	r0,_bp
      0003D9 08               [12] 1215 	inc	r0
      0003DA A6 07            [24] 1216 	mov	@r0,ar7
                           0003DC  1217 	C$stream_buffer.c$606$1_0$147 ==.
                                   1218 ;	src/FreeRTOS/stream_buffer.c:606: return xReturn;
                           0003DC  1219 	C$stream_buffer.c$539$2_0$150 ==.
                                   1220 ;	src/FreeRTOS/stream_buffer.c:539: do
      0003DC                       1221 00106$:
                           0003DC  1222 	C$stream_buffer.c$543$3_0$151 ==.
                                   1223 ;	src/FreeRTOS/stream_buffer.c:543: taskENTER_CRITICAL();
      0003DC C0 E0            [24] 1224 	push ACC 
      0003DE C0 A8            [24] 1225 	push IE 
                                   1226 ;	assignBit
      0003E0 C2 AF            [12] 1227 	clr	_EA
                           0003E2  1228 	C$stream_buffer.c$545$4_0$152 ==.
                                   1229 ;	src/FreeRTOS/stream_buffer.c:545: xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
      0003E2 E5*00            [12] 1230 	mov	a,_bp
      0003E4 24 04            [12] 1231 	add	a,#0x04
      0003E6 F8               [12] 1232 	mov	r0,a
      0003E7 86 82            [24] 1233 	mov	dpl,@r0
      0003E9 08               [12] 1234 	inc	r0
      0003EA 86 83            [24] 1235 	mov	dph,@r0
      0003EC 08               [12] 1236 	inc	r0
      0003ED 86 F0            [24] 1237 	mov	b,@r0
      0003EF 12r02rC2         [24] 1238 	lcall	_xStreamBufferSpacesAvailable
      0003F2 AE 82            [24] 1239 	mov	r6,dpl
      0003F4 AF 83            [24] 1240 	mov	r7,dph
      0003F6 E5*00            [12] 1241 	mov	a,_bp
      0003F8 24 07            [12] 1242 	add	a,#0x07
      0003FA F8               [12] 1243 	mov	r0,a
      0003FB A6 06            [24] 1244 	mov	@r0,ar6
      0003FD 08               [12] 1245 	inc	r0
      0003FE A6 07            [24] 1246 	mov	@r0,ar7
                           000400  1247 	C$stream_buffer.c$547$4_0$152 ==.
                                   1248 ;	src/FreeRTOS/stream_buffer.c:547: if( xSpace < xRequiredSpace )
      000400 E5*00            [12] 1249 	mov	a,_bp
      000402 24 07            [12] 1250 	add	a,#0x07
      000404 F8               [12] 1251 	mov	r0,a
      000405 E5*00            [12] 1252 	mov	a,_bp
      000407 24 09            [12] 1253 	add	a,#0x09
      000409 F9               [12] 1254 	mov	r1,a
      00040A C3               [12] 1255 	clr	c
      00040B E6               [12] 1256 	mov	a,@r0
      00040C 97               [12] 1257 	subb	a,@r1
      00040D 08               [12] 1258 	inc	r0
      00040E E6               [12] 1259 	mov	a,@r0
      00040F 09               [12] 1260 	inc	r1
      000410 97               [12] 1261 	subb	a,@r1
      000411 50 44            [24] 1262 	jnc	00104$
                           000413  1263 	C$stream_buffer.c$550$5_0$153 ==.
                                   1264 ;	src/FreeRTOS/stream_buffer.c:550: ( void ) xTaskNotifyStateClear( NULL );
      000413 90 00 00         [24] 1265 	mov	dptr,#0x0000
      000416 75 F0 00         [24] 1266 	mov	b,#0x00
      000419 12r00r00         [24] 1267 	lcall	_xTaskNotifyStateClear
                           00041C  1268 	C$stream_buffer.c$554$5_0$153 ==.
                                   1269 ;	src/FreeRTOS/stream_buffer.c:554: pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
      00041C E5*00            [12] 1270 	mov	a,_bp
      00041E 24 04            [12] 1271 	add	a,#0x04
      000420 F8               [12] 1272 	mov	r0,a
      000421 74 0B            [12] 1273 	mov	a,#0x0b
      000423 26               [12] 1274 	add	a,@r0
      000424 FD               [12] 1275 	mov	r5,a
      000425 E4               [12] 1276 	clr	a
      000426 08               [12] 1277 	inc	r0
      000427 36               [12] 1278 	addc	a,@r0
      000428 FE               [12] 1279 	mov	r6,a
      000429 08               [12] 1280 	inc	r0
      00042A 86 07            [24] 1281 	mov	ar7,@r0
      00042C C0 07            [24] 1282 	push	ar7
      00042E C0 06            [24] 1283 	push	ar6
      000430 C0 05            [24] 1284 	push	ar5
      000432 12r00r00         [24] 1285 	lcall	_xTaskGetCurrentTaskHandle
      000435 AA 82            [24] 1286 	mov	r2,dpl
      000437 AB 83            [24] 1287 	mov	r3,dph
      000439 AC F0            [24] 1288 	mov	r4,b
      00043B D0 05            [24] 1289 	pop	ar5
      00043D D0 06            [24] 1290 	pop	ar6
      00043F D0 07            [24] 1291 	pop	ar7
      000441 8D 82            [24] 1292 	mov	dpl,r5
      000443 8E 83            [24] 1293 	mov	dph,r6
      000445 8F F0            [24] 1294 	mov	b,r7
      000447 EA               [12] 1295 	mov	a,r2
      000448 12r00r00         [24] 1296 	lcall	__gptrput
      00044B A3               [24] 1297 	inc	dptr
      00044C EB               [12] 1298 	mov	a,r3
      00044D 12r00r00         [24] 1299 	lcall	__gptrput
      000450 A3               [24] 1300 	inc	dptr
      000451 EC               [12] 1301 	mov	a,r4
      000452 12r00r00         [24] 1302 	lcall	__gptrput
      000455 80 0E            [24] 1303 	sjmp	00105$
      000457                       1304 00104$:
                           000457  1305 	C$stream_buffer.c$558$5_0$154 ==.
                                   1306 ;	src/FreeRTOS/stream_buffer.c:558: taskEXIT_CRITICAL();
      000457 D0 E0            [24] 1307 	pop ACC 
      000459 53 E0 80         [24] 1308 	anl	_ACC,#0x80
      00045C E5 E0            [12] 1309 	mov	a,_ACC
      00045E 42 A8            [12] 1310 	orl	_IE,a
      000460 D0 E0            [24] 1311 	pop ACC 
                           000462  1312 	C$stream_buffer.c$559$5_0$154 ==.
                                   1313 ;	src/FreeRTOS/stream_buffer.c:559: break;
      000462 02r04rEF         [24] 1314 	ljmp	00110$
      000465                       1315 00105$:
                           000465  1316 	C$stream_buffer.c$562$1_0$147 ==.
                                   1317 ;	src/FreeRTOS/stream_buffer.c:562: taskEXIT_CRITICAL();
      000465 D0 E0            [24] 1318 	pop ACC 
      000467 53 E0 80         [24] 1319 	anl	_ACC,#0x80
      00046A E5 E0            [12] 1320 	mov	a,_ACC
      00046C 42 A8            [12] 1321 	orl	_IE,a
      00046E D0 E0            [24] 1322 	pop ACC 
                           000470  1323 	C$stream_buffer.c$565$3_0$151 ==.
                                   1324 ;	src/FreeRTOS/stream_buffer.c:565: ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
      000470 C0 07            [24] 1325 	push	ar7
      000472 C0 06            [24] 1326 	push	ar6
      000474 C0 05            [24] 1327 	push	ar5
      000476 E5*00            [12] 1328 	mov	a,_bp
      000478 24 F7            [12] 1329 	add	a,#0xf7
      00047A F8               [12] 1330 	mov	r0,a
      00047B E6               [12] 1331 	mov	a,@r0
      00047C C0 E0            [24] 1332 	push	acc
      00047E 08               [12] 1333 	inc	r0
      00047F E6               [12] 1334 	mov	a,@r0
      000480 C0 E0            [24] 1335 	push	acc
      000482 E4               [12] 1336 	clr	a
      000483 C0 E0            [24] 1337 	push	acc
      000485 C0 E0            [24] 1338 	push	acc
      000487 C0 E0            [24] 1339 	push	acc
      000489 C0 E0            [24] 1340 	push	acc
      00048B C0 E0            [24] 1341 	push	acc
      00048D C0 E0            [24] 1342 	push	acc
      00048F C0 E0            [24] 1343 	push	acc
      000491 90 00 00         [24] 1344 	mov	dptr,#(0x00&0x00ff)
      000494 E4               [12] 1345 	clr	a
      000495 F5 F0            [12] 1346 	mov	b,a
      000497 12r00r00         [24] 1347 	lcall	_xTaskNotifyWait
      00049A E5 81            [12] 1348 	mov	a,sp
      00049C 24 F7            [12] 1349 	add	a,#0xf7
      00049E F5 81            [12] 1350 	mov	sp,a
      0004A0 D0 05            [24] 1351 	pop	ar5
      0004A2 D0 06            [24] 1352 	pop	ar6
      0004A4 D0 07            [24] 1353 	pop	ar7
                           0004A6  1354 	C$stream_buffer.c$566$3_0$151 ==.
                                   1355 ;	src/FreeRTOS/stream_buffer.c:566: pxStreamBuffer->xTaskWaitingToSend = NULL;
      0004A6 7A 00            [12] 1356 	mov	r2,#0x00
      0004A8 7B 00            [12] 1357 	mov	r3,#0x00
      0004AA 7C 00            [12] 1358 	mov	r4,#0x00
      0004AC 8D 82            [24] 1359 	mov	dpl,r5
      0004AE 8E 83            [24] 1360 	mov	dph,r6
      0004B0 8F F0            [24] 1361 	mov	b,r7
      0004B2 EA               [12] 1362 	mov	a,r2
      0004B3 12r00r00         [24] 1363 	lcall	__gptrput
      0004B6 A3               [24] 1364 	inc	dptr
      0004B7 EB               [12] 1365 	mov	a,r3
      0004B8 12r00r00         [24] 1366 	lcall	__gptrput
      0004BB A3               [24] 1367 	inc	dptr
      0004BC EC               [12] 1368 	mov	a,r4
      0004BD 12r00r00         [24] 1369 	lcall	__gptrput
                           0004C0  1370 	C$stream_buffer.c$568$2_0$150 ==.
                                   1371 ;	src/FreeRTOS/stream_buffer.c:568: } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
      0004C0 E5*00            [12] 1372 	mov	a,_bp
      0004C2 24 F7            [12] 1373 	add	a,#0xf7
      0004C4 FF               [12] 1374 	mov	r7,a
      0004C5 7E 00            [12] 1375 	mov	r6,#0x00
      0004C7 7D 40            [12] 1376 	mov	r5,#0x40
      0004C9 A8*00            [24] 1377 	mov	r0,_bp
      0004CB 08               [12] 1378 	inc	r0
      0004CC 86 02            [24] 1379 	mov	ar2,@r0
      0004CE 7B 00            [12] 1380 	mov	r3,#0x00
      0004D0 7C 40            [12] 1381 	mov	r4,#0x40
      0004D2 C0 07            [24] 1382 	push	ar7
      0004D4 C0 06            [24] 1383 	push	ar6
      0004D6 C0 05            [24] 1384 	push	ar5
      0004D8 8A 82            [24] 1385 	mov	dpl,r2
      0004DA 8B 83            [24] 1386 	mov	dph,r3
      0004DC 8C F0            [24] 1387 	mov	b,r4
      0004DE 12r00r00         [24] 1388 	lcall	_xTaskCheckForTimeOut
      0004E1 AF 82            [24] 1389 	mov	r7,dpl
      0004E3 15 81            [12] 1390 	dec	sp
      0004E5 15 81            [12] 1391 	dec	sp
      0004E7 15 81            [12] 1392 	dec	sp
      0004E9 EF               [12] 1393 	mov	a,r7
      0004EA 70 03            [24] 1394 	jnz	00157$
      0004EC 02r03rDC         [24] 1395 	ljmp	00106$
      0004EF                       1396 00157$:
      0004EF                       1397 00110$:
                           0004EF  1398 	C$stream_buffer.c$575$1_0$147 ==.
                                   1399 ;	src/FreeRTOS/stream_buffer.c:575: if( xSpace == ( size_t ) 0 )
      0004EF E5*00            [12] 1400 	mov	a,_bp
      0004F1 24 07            [12] 1401 	add	a,#0x07
      0004F3 F8               [12] 1402 	mov	r0,a
      0004F4 E6               [12] 1403 	mov	a,@r0
      0004F5 08               [12] 1404 	inc	r0
      0004F6 46               [12] 1405 	orl	a,@r0
      0004F7 70 1E            [24] 1406 	jnz	00112$
                           0004F9  1407 	C$stream_buffer.c$577$2_0$156 ==.
                                   1408 ;	src/FreeRTOS/stream_buffer.c:577: xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
      0004F9 E5*00            [12] 1409 	mov	a,_bp
      0004FB 24 04            [12] 1410 	add	a,#0x04
      0004FD F8               [12] 1411 	mov	r0,a
      0004FE 86 82            [24] 1412 	mov	dpl,@r0
      000500 08               [12] 1413 	inc	r0
      000501 86 83            [24] 1414 	mov	dph,@r0
      000503 08               [12] 1415 	inc	r0
      000504 86 F0            [24] 1416 	mov	b,@r0
      000506 12r02rC2         [24] 1417 	lcall	_xStreamBufferSpacesAvailable
      000509 AE 82            [24] 1418 	mov	r6,dpl
      00050B AF 83            [24] 1419 	mov	r7,dph
      00050D E5*00            [12] 1420 	mov	a,_bp
      00050F 24 07            [12] 1421 	add	a,#0x07
      000511 F8               [12] 1422 	mov	r0,a
      000512 A6 06            [24] 1423 	mov	@r0,ar6
      000514 08               [12] 1424 	inc	r0
      000515 A6 07            [24] 1425 	mov	@r0,ar7
      000517                       1426 00112$:
                           000517  1427 	C$stream_buffer.c$584$1_0$147 ==.
                                   1428 ;	src/FreeRTOS/stream_buffer.c:584: xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
      000517 E5*00            [12] 1429 	mov	a,_bp
      000519 24 09            [12] 1430 	add	a,#0x09
      00051B F8               [12] 1431 	mov	r0,a
      00051C E6               [12] 1432 	mov	a,@r0
      00051D C0 E0            [24] 1433 	push	acc
      00051F 08               [12] 1434 	inc	r0
      000520 E6               [12] 1435 	mov	a,@r0
      000521 C0 E0            [24] 1436 	push	acc
      000523 E5*00            [12] 1437 	mov	a,_bp
      000525 24 07            [12] 1438 	add	a,#0x07
      000527 F8               [12] 1439 	mov	r0,a
      000528 E6               [12] 1440 	mov	a,@r0
      000529 C0 E0            [24] 1441 	push	acc
      00052B 08               [12] 1442 	inc	r0
      00052C E6               [12] 1443 	mov	a,@r0
      00052D C0 E0            [24] 1444 	push	acc
      00052F E5*00            [12] 1445 	mov	a,_bp
      000531 24 F9            [12] 1446 	add	a,#0xf9
      000533 F8               [12] 1447 	mov	r0,a
      000534 E6               [12] 1448 	mov	a,@r0
      000535 C0 E0            [24] 1449 	push	acc
      000537 08               [12] 1450 	inc	r0
      000538 E6               [12] 1451 	mov	a,@r0
      000539 C0 E0            [24] 1452 	push	acc
      00053B E5*00            [12] 1453 	mov	a,_bp
      00053D 24 FB            [12] 1454 	add	a,#0xfb
      00053F F8               [12] 1455 	mov	r0,a
      000540 E6               [12] 1456 	mov	a,@r0
      000541 C0 E0            [24] 1457 	push	acc
      000543 08               [12] 1458 	inc	r0
      000544 E6               [12] 1459 	mov	a,@r0
      000545 C0 E0            [24] 1460 	push	acc
      000547 08               [12] 1461 	inc	r0
      000548 E6               [12] 1462 	mov	a,@r0
      000549 C0 E0            [24] 1463 	push	acc
      00054B E5*00            [12] 1464 	mov	a,_bp
      00054D 24 04            [12] 1465 	add	a,#0x04
      00054F F8               [12] 1466 	mov	r0,a
      000550 86 82            [24] 1467 	mov	dpl,@r0
      000552 08               [12] 1468 	inc	r0
      000553 86 83            [24] 1469 	mov	dph,@r0
      000555 08               [12] 1470 	inc	r0
      000556 86 F0            [24] 1471 	mov	b,@r0
      000558 12r07rC7         [24] 1472 	lcall	_prvWriteMessageToBuffer
      00055B AE 82            [24] 1473 	mov	r6,dpl
      00055D AF 83            [24] 1474 	mov	r7,dph
      00055F E5 81            [12] 1475 	mov	a,sp
      000561 24 F7            [12] 1476 	add	a,#0xf7
      000563 F5 81            [12] 1477 	mov	sp,a
      000565 A8*00            [24] 1478 	mov	r0,_bp
      000567 08               [12] 1479 	inc	r0
      000568 08               [12] 1480 	inc	r0
      000569 A6 06            [24] 1481 	mov	@r0,ar6
      00056B 08               [12] 1482 	inc	r0
      00056C A6 07            [24] 1483 	mov	@r0,ar7
                           00056E  1484 	C$stream_buffer.c$586$1_0$147 ==.
                                   1485 ;	src/FreeRTOS/stream_buffer.c:586: if( xReturn > ( size_t ) 0 )
      00056E EE               [12] 1486 	mov	a,r6
      00056F 4F               [12] 1487 	orl	a,r7
      000570 70 03            [24] 1488 	jnz	00159$
      000572 02r06r39         [24] 1489 	ljmp	00119$
      000575                       1490 00159$:
                           000575  1491 	C$stream_buffer.c$591$1_0$147 ==.
                                   1492 ;	src/FreeRTOS/stream_buffer.c:591: if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
      000575 E5*00            [12] 1493 	mov	a,_bp
      000577 24 04            [12] 1494 	add	a,#0x04
      000579 F8               [12] 1495 	mov	r0,a
      00057A 86 82            [24] 1496 	mov	dpl,@r0
      00057C 08               [12] 1497 	inc	r0
      00057D 86 83            [24] 1498 	mov	dph,@r0
      00057F 08               [12] 1499 	inc	r0
      000580 86 F0            [24] 1500 	mov	b,@r0
      000582 12r14rB8         [24] 1501 	lcall	_prvBytesInBuffer
      000585 AE 82            [24] 1502 	mov	r6,dpl
      000587 AF 83            [24] 1503 	mov	r7,dph
      000589 E5*00            [12] 1504 	mov	a,_bp
      00058B 24 04            [12] 1505 	add	a,#0x04
      00058D F8               [12] 1506 	mov	r0,a
      00058E 74 06            [12] 1507 	mov	a,#0x06
      000590 26               [12] 1508 	add	a,@r0
      000591 FB               [12] 1509 	mov	r3,a
      000592 E4               [12] 1510 	clr	a
      000593 08               [12] 1511 	inc	r0
      000594 36               [12] 1512 	addc	a,@r0
      000595 FC               [12] 1513 	mov	r4,a
      000596 08               [12] 1514 	inc	r0
      000597 86 05            [24] 1515 	mov	ar5,@r0
      000599 8B 82            [24] 1516 	mov	dpl,r3
      00059B 8C 83            [24] 1517 	mov	dph,r4
      00059D 8D F0            [24] 1518 	mov	b,r5
      00059F 12r00r00         [24] 1519 	lcall	__gptrget
      0005A2 FB               [12] 1520 	mov	r3,a
      0005A3 A3               [24] 1521 	inc	dptr
      0005A4 12r00r00         [24] 1522 	lcall	__gptrget
      0005A7 FC               [12] 1523 	mov	r4,a
      0005A8 C3               [12] 1524 	clr	c
      0005A9 EE               [12] 1525 	mov	a,r6
      0005AA 9B               [12] 1526 	subb	a,r3
      0005AB EF               [12] 1527 	mov	a,r7
      0005AC 9C               [12] 1528 	subb	a,r4
      0005AD 50 03            [24] 1529 	jnc	00160$
      0005AF 02r06r39         [24] 1530 	ljmp	00119$
      0005B2                       1531 00160$:
                           0005B2  1532 	C$stream_buffer.c$593$3_0$159 ==.
                                   1533 ;	src/FreeRTOS/stream_buffer.c:593: sbSEND_COMPLETED( pxStreamBuffer );
      0005B2 12r00r00         [24] 1534 	lcall	_vTaskSuspendAll
      0005B5 E5*00            [12] 1535 	mov	a,_bp
      0005B7 24 04            [12] 1536 	add	a,#0x04
      0005B9 F8               [12] 1537 	mov	r0,a
      0005BA 74 08            [12] 1538 	mov	a,#0x08
      0005BC 26               [12] 1539 	add	a,@r0
      0005BD FB               [12] 1540 	mov	r3,a
      0005BE E4               [12] 1541 	clr	a
      0005BF 08               [12] 1542 	inc	r0
      0005C0 36               [12] 1543 	addc	a,@r0
      0005C1 FC               [12] 1544 	mov	r4,a
      0005C2 08               [12] 1545 	inc	r0
      0005C3 86 06            [24] 1546 	mov	ar6,@r0
      0005C5 8B 82            [24] 1547 	mov	dpl,r3
      0005C7 8C 83            [24] 1548 	mov	dph,r4
      0005C9 8E F0            [24] 1549 	mov	b,r6
      0005CB 12r00r00         [24] 1550 	lcall	__gptrget
      0005CE FA               [12] 1551 	mov	r2,a
      0005CF A3               [24] 1552 	inc	dptr
      0005D0 12r00r00         [24] 1553 	lcall	__gptrget
      0005D3 FD               [12] 1554 	mov	r5,a
      0005D4 A3               [24] 1555 	inc	dptr
      0005D5 12r00r00         [24] 1556 	lcall	__gptrget
      0005D8 EA               [12] 1557 	mov	a,r2
      0005D9 4D               [12] 1558 	orl	a,r5
      0005DA 60 5A            [24] 1559 	jz	00114$
      0005DC 8B 82            [24] 1560 	mov	dpl,r3
      0005DE 8C 83            [24] 1561 	mov	dph,r4
      0005E0 8E F0            [24] 1562 	mov	b,r6
      0005E2 12r00r00         [24] 1563 	lcall	__gptrget
      0005E5 FA               [12] 1564 	mov	r2,a
      0005E6 A3               [24] 1565 	inc	dptr
      0005E7 12r00r00         [24] 1566 	lcall	__gptrget
      0005EA FD               [12] 1567 	mov	r5,a
      0005EB A3               [24] 1568 	inc	dptr
      0005EC 12r00r00         [24] 1569 	lcall	__gptrget
      0005EF FF               [12] 1570 	mov	r7,a
      0005F0 C0 06            [24] 1571 	push	ar6
      0005F2 C0 04            [24] 1572 	push	ar4
      0005F4 C0 03            [24] 1573 	push	ar3
      0005F6 E4               [12] 1574 	clr	a
      0005F7 C0 E0            [24] 1575 	push	acc
      0005F9 C0 E0            [24] 1576 	push	acc
      0005FB C0 E0            [24] 1577 	push	acc
      0005FD C0 E0            [24] 1578 	push	acc
      0005FF C0 E0            [24] 1579 	push	acc
      000601 C0 E0            [24] 1580 	push	acc
      000603 C0 E0            [24] 1581 	push	acc
      000605 C0 E0            [24] 1582 	push	acc
      000607 8A 82            [24] 1583 	mov	dpl,r2
      000609 8D 83            [24] 1584 	mov	dph,r5
      00060B 8F F0            [24] 1585 	mov	b,r7
      00060D 12r00r00         [24] 1586 	lcall	_xTaskGenericNotify
      000610 E5 81            [12] 1587 	mov	a,sp
      000612 24 F8            [12] 1588 	add	a,#0xf8
      000614 F5 81            [12] 1589 	mov	sp,a
      000616 D0 03            [24] 1590 	pop	ar3
      000618 D0 04            [24] 1591 	pop	ar4
      00061A D0 06            [24] 1592 	pop	ar6
      00061C 7A 00            [12] 1593 	mov	r2,#0x00
      00061E 7D 00            [12] 1594 	mov	r5,#0x00
      000620 7F 00            [12] 1595 	mov	r7,#0x00
      000622 8B 82            [24] 1596 	mov	dpl,r3
      000624 8C 83            [24] 1597 	mov	dph,r4
      000626 8E F0            [24] 1598 	mov	b,r6
      000628 EA               [12] 1599 	mov	a,r2
      000629 12r00r00         [24] 1600 	lcall	__gptrput
      00062C A3               [24] 1601 	inc	dptr
      00062D ED               [12] 1602 	mov	a,r5
      00062E 12r00r00         [24] 1603 	lcall	__gptrput
      000631 A3               [24] 1604 	inc	dptr
      000632 EF               [12] 1605 	mov	a,r7
      000633 12r00r00         [24] 1606 	lcall	__gptrput
      000636                       1607 00114$:
      000636 12r00r00         [24] 1608 	lcall	_xTaskResumeAll
                           000639  1609 	C$stream_buffer.c$603$1_0$147 ==.
                                   1610 ;	src/FreeRTOS/stream_buffer.c:603: traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
      000639                       1611 00119$:
                           000639  1612 	C$stream_buffer.c$606$1_0$147 ==.
                                   1613 ;	src/FreeRTOS/stream_buffer.c:606: return xReturn;
      000639 A8*00            [24] 1614 	mov	r0,_bp
      00063B 08               [12] 1615 	inc	r0
      00063C 08               [12] 1616 	inc	r0
      00063D 86 82            [24] 1617 	mov	dpl,@r0
      00063F 08               [12] 1618 	inc	r0
      000640 86 83            [24] 1619 	mov	dph,@r0
                           000642  1620 	C$stream_buffer.c$607$1_0$147 ==.
                                   1621 ;	src/FreeRTOS/stream_buffer.c:607: }
      000642 85*00 81         [24] 1622 	mov	sp,_bp
      000645 D0*00            [24] 1623 	pop	_bp
                           000647  1624 	C$stream_buffer.c$607$1_0$147 ==.
                           000647  1625 	XG$xStreamBufferSend$0$0 ==.
      000647 22               [24] 1626 	ret
                                   1627 ;------------------------------------------------------------
                                   1628 ;Allocation info for local variables in function 'xStreamBufferSendFromISR'
                                   1629 ;------------------------------------------------------------
                                   1630 ;pvTxData                  Allocated to stack - _bp -5
                                   1631 ;xDataLengthBytes          Allocated to stack - _bp -7
                                   1632 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -10
                                   1633 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   1634 ;pxStreamBuffer            Allocated to stack - _bp +3
                                   1635 ;xReturn                   Allocated to stack - _bp +1
                                   1636 ;xSpace                    Allocated to registers 
                                   1637 ;xRequiredSpace            Allocated to registers r4 r3 
                                   1638 ;uxSavedInterruptStatus    Allocated to registers 
                                   1639 ;sloc0                     Allocated to stack - _bp +1
                                   1640 ;------------------------------------------------------------
                           000648  1641 	G$xStreamBufferSendFromISR$0$0 ==.
                           000648  1642 	C$stream_buffer.c$610$1_0$165 ==.
                                   1643 ;	src/FreeRTOS/stream_buffer.c:610: size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                   1644 ;	-----------------------------------------
                                   1645 ;	 function xStreamBufferSendFromISR
                                   1646 ;	-----------------------------------------
      000648                       1647 _xStreamBufferSendFromISR:
      000648 C0*00            [24] 1648 	push	_bp
      00064A E5 81            [12] 1649 	mov	a,sp
      00064C F5*00            [12] 1650 	mov	_bp,a
      00064E 24 05            [12] 1651 	add	a,#0x05
      000650 F5 81            [12] 1652 	mov	sp,a
      000652 AD 82            [24] 1653 	mov	r5,dpl
      000654 AE 83            [24] 1654 	mov	r6,dph
      000656 AF F0            [24] 1655 	mov	r7,b
                           000658  1656 	C$stream_buffer.c$615$2_0$165 ==.
                                   1657 ;	src/FreeRTOS/stream_buffer.c:615: StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
      000658 E5*00            [12] 1658 	mov	a,_bp
      00065A 24 03            [12] 1659 	add	a,#0x03
      00065C F8               [12] 1660 	mov	r0,a
      00065D A6 05            [24] 1661 	mov	@r0,ar5
      00065F 08               [12] 1662 	inc	r0
      000660 A6 06            [24] 1663 	mov	@r0,ar6
      000662 08               [12] 1664 	inc	r0
      000663 A6 07            [24] 1665 	mov	@r0,ar7
                           000665  1666 	C$stream_buffer.c$617$2_0$165 ==.
                                   1667 ;	src/FreeRTOS/stream_buffer.c:617: size_t xRequiredSpace = xDataLengthBytes;
      000665 E5*00            [12] 1668 	mov	a,_bp
      000667 24 F9            [12] 1669 	add	a,#0xf9
      000669 F8               [12] 1670 	mov	r0,a
      00066A 86 04            [24] 1671 	mov	ar4,@r0
      00066C 08               [12] 1672 	inc	r0
      00066D 86 03            [24] 1673 	mov	ar3,@r0
                           00066F  1674 	C$stream_buffer.c$626$1_0$165 ==.
                                   1675 ;	src/FreeRTOS/stream_buffer.c:626: if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
      00066F 74 11            [12] 1676 	mov	a,#0x11
      000671 2D               [12] 1677 	add	a,r5
      000672 FD               [12] 1678 	mov	r5,a
      000673 E4               [12] 1679 	clr	a
      000674 3E               [12] 1680 	addc	a,r6
      000675 FE               [12] 1681 	mov	r6,a
      000676 8D 82            [24] 1682 	mov	dpl,r5
      000678 8E 83            [24] 1683 	mov	dph,r6
      00067A 8F F0            [24] 1684 	mov	b,r7
      00067C 12r00r00         [24] 1685 	lcall	__gptrget
      00067F 30 E0 07         [24] 1686 	jnb	acc.0,00102$
                           000682  1687 	C$stream_buffer.c$628$2_0$166 ==.
                                   1688 ;	src/FreeRTOS/stream_buffer.c:628: xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
      000682 74 02            [12] 1689 	mov	a,#0x02
      000684 2C               [12] 1690 	add	a,r4
      000685 FC               [12] 1691 	mov	r4,a
      000686 E4               [12] 1692 	clr	a
      000687 3B               [12] 1693 	addc	a,r3
      000688 FB               [12] 1694 	mov	r3,a
      000689                       1695 00102$:
                           000689  1696 	C$stream_buffer.c$635$1_0$165 ==.
                                   1697 ;	src/FreeRTOS/stream_buffer.c:635: xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
      000689 E5*00            [12] 1698 	mov	a,_bp
      00068B 24 03            [12] 1699 	add	a,#0x03
      00068D F8               [12] 1700 	mov	r0,a
      00068E 86 82            [24] 1701 	mov	dpl,@r0
      000690 08               [12] 1702 	inc	r0
      000691 86 83            [24] 1703 	mov	dph,@r0
      000693 08               [12] 1704 	inc	r0
      000694 86 F0            [24] 1705 	mov	b,@r0
      000696 C0 04            [24] 1706 	push	ar4
      000698 C0 03            [24] 1707 	push	ar3
      00069A 12r02rC2         [24] 1708 	lcall	_xStreamBufferSpacesAvailable
      00069D AE 82            [24] 1709 	mov	r6,dpl
      00069F AF 83            [24] 1710 	mov	r7,dph
                           0006A1  1711 	C$stream_buffer.c$636$1_0$165 ==.
                                   1712 ;	src/FreeRTOS/stream_buffer.c:636: xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
      0006A1 C0 06            [24] 1713 	push	ar6
      0006A3 C0 07            [24] 1714 	push	ar7
      0006A5 E5*00            [12] 1715 	mov	a,_bp
      0006A7 24 F9            [12] 1716 	add	a,#0xf9
      0006A9 F8               [12] 1717 	mov	r0,a
      0006AA E6               [12] 1718 	mov	a,@r0
      0006AB C0 E0            [24] 1719 	push	acc
      0006AD 08               [12] 1720 	inc	r0
      0006AE E6               [12] 1721 	mov	a,@r0
      0006AF C0 E0            [24] 1722 	push	acc
      0006B1 E5*00            [12] 1723 	mov	a,_bp
      0006B3 24 FB            [12] 1724 	add	a,#0xfb
      0006B5 F8               [12] 1725 	mov	r0,a
      0006B6 E6               [12] 1726 	mov	a,@r0
      0006B7 C0 E0            [24] 1727 	push	acc
      0006B9 08               [12] 1728 	inc	r0
      0006BA E6               [12] 1729 	mov	a,@r0
      0006BB C0 E0            [24] 1730 	push	acc
      0006BD 08               [12] 1731 	inc	r0
      0006BE E6               [12] 1732 	mov	a,@r0
      0006BF C0 E0            [24] 1733 	push	acc
      0006C1 E5*00            [12] 1734 	mov	a,_bp
      0006C3 24 03            [12] 1735 	add	a,#0x03
      0006C5 F8               [12] 1736 	mov	r0,a
      0006C6 86 82            [24] 1737 	mov	dpl,@r0
      0006C8 08               [12] 1738 	inc	r0
      0006C9 86 83            [24] 1739 	mov	dph,@r0
      0006CB 08               [12] 1740 	inc	r0
      0006CC 86 F0            [24] 1741 	mov	b,@r0
      0006CE 12r07rC7         [24] 1742 	lcall	_prvWriteMessageToBuffer
      0006D1 AE 82            [24] 1743 	mov	r6,dpl
      0006D3 AF 83            [24] 1744 	mov	r7,dph
      0006D5 E5 81            [12] 1745 	mov	a,sp
      0006D7 24 F7            [12] 1746 	add	a,#0xf7
      0006D9 F5 81            [12] 1747 	mov	sp,a
      0006DB A8*00            [24] 1748 	mov	r0,_bp
      0006DD 08               [12] 1749 	inc	r0
      0006DE A6 06            [24] 1750 	mov	@r0,ar6
      0006E0 08               [12] 1751 	inc	r0
      0006E1 A6 07            [24] 1752 	mov	@r0,ar7
                           0006E3  1753 	C$stream_buffer.c$638$1_0$165 ==.
                                   1754 ;	src/FreeRTOS/stream_buffer.c:638: if( xReturn > ( size_t ) 0 )
      0006E3 EE               [12] 1755 	mov	a,r6
      0006E4 4F               [12] 1756 	orl	a,r7
      0006E5 70 03            [24] 1757 	jnz	00128$
      0006E7 02r07rB9         [24] 1758 	ljmp	00108$
      0006EA                       1759 00128$:
                           0006EA  1760 	C$stream_buffer.c$641$1_0$165 ==.
                                   1761 ;	src/FreeRTOS/stream_buffer.c:641: if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
      0006EA E5*00            [12] 1762 	mov	a,_bp
      0006EC 24 03            [12] 1763 	add	a,#0x03
      0006EE F8               [12] 1764 	mov	r0,a
      0006EF 86 82            [24] 1765 	mov	dpl,@r0
      0006F1 08               [12] 1766 	inc	r0
      0006F2 86 83            [24] 1767 	mov	dph,@r0
      0006F4 08               [12] 1768 	inc	r0
      0006F5 86 F0            [24] 1769 	mov	b,@r0
      0006F7 12r14rB8         [24] 1770 	lcall	_prvBytesInBuffer
      0006FA AE 82            [24] 1771 	mov	r6,dpl
      0006FC AF 83            [24] 1772 	mov	r7,dph
      0006FE E5*00            [12] 1773 	mov	a,_bp
      000700 24 03            [12] 1774 	add	a,#0x03
      000702 F8               [12] 1775 	mov	r0,a
      000703 74 06            [12] 1776 	mov	a,#0x06
      000705 26               [12] 1777 	add	a,@r0
      000706 FB               [12] 1778 	mov	r3,a
      000707 E4               [12] 1779 	clr	a
      000708 08               [12] 1780 	inc	r0
      000709 36               [12] 1781 	addc	a,@r0
      00070A FC               [12] 1782 	mov	r4,a
      00070B 08               [12] 1783 	inc	r0
      00070C 86 05            [24] 1784 	mov	ar5,@r0
      00070E 8B 82            [24] 1785 	mov	dpl,r3
      000710 8C 83            [24] 1786 	mov	dph,r4
      000712 8D F0            [24] 1787 	mov	b,r5
      000714 12r00r00         [24] 1788 	lcall	__gptrget
      000717 FB               [12] 1789 	mov	r3,a
      000718 A3               [24] 1790 	inc	dptr
      000719 12r00r00         [24] 1791 	lcall	__gptrget
      00071C FC               [12] 1792 	mov	r4,a
      00071D C3               [12] 1793 	clr	c
      00071E EE               [12] 1794 	mov	a,r6
      00071F 9B               [12] 1795 	subb	a,r3
      000720 EF               [12] 1796 	mov	a,r7
      000721 9C               [12] 1797 	subb	a,r4
      000722 50 03            [24] 1798 	jnc	00129$
      000724 02r07rB9         [24] 1799 	ljmp	00108$
      000727                       1800 00129$:
                           000727  1801 	C$stream_buffer.c$643$5_0$171 ==.
                                   1802 ;	src/FreeRTOS/stream_buffer.c:643: sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
      000727 E5*00            [12] 1803 	mov	a,_bp
      000729 24 03            [12] 1804 	add	a,#0x03
      00072B F8               [12] 1805 	mov	r0,a
      00072C 74 08            [12] 1806 	mov	a,#0x08
      00072E 26               [12] 1807 	add	a,@r0
      00072F FB               [12] 1808 	mov	r3,a
      000730 E4               [12] 1809 	clr	a
      000731 08               [12] 1810 	inc	r0
      000732 36               [12] 1811 	addc	a,@r0
      000733 FC               [12] 1812 	mov	r4,a
      000734 08               [12] 1813 	inc	r0
      000735 86 06            [24] 1814 	mov	ar6,@r0
      000737 8B 82            [24] 1815 	mov	dpl,r3
      000739 8C 83            [24] 1816 	mov	dph,r4
      00073B 8E F0            [24] 1817 	mov	b,r6
      00073D 12r00r00         [24] 1818 	lcall	__gptrget
      000740 FA               [12] 1819 	mov	r2,a
      000741 A3               [24] 1820 	inc	dptr
      000742 12r00r00         [24] 1821 	lcall	__gptrget
      000745 FD               [12] 1822 	mov	r5,a
      000746 A3               [24] 1823 	inc	dptr
      000747 12r00r00         [24] 1824 	lcall	__gptrget
      00074A FF               [12] 1825 	mov	r7,a
      00074B EA               [12] 1826 	mov	a,r2
      00074C 4D               [12] 1827 	orl	a,r5
      00074D 60 6A            [24] 1828 	jz	00108$
      00074F 8B 82            [24] 1829 	mov	dpl,r3
      000751 8C 83            [24] 1830 	mov	dph,r4
      000753 8E F0            [24] 1831 	mov	b,r6
      000755 12r00r00         [24] 1832 	lcall	__gptrget
      000758 FA               [12] 1833 	mov	r2,a
      000759 A3               [24] 1834 	inc	dptr
      00075A 12r00r00         [24] 1835 	lcall	__gptrget
      00075D FD               [12] 1836 	mov	r5,a
      00075E A3               [24] 1837 	inc	dptr
      00075F 12r00r00         [24] 1838 	lcall	__gptrget
      000762 FF               [12] 1839 	mov	r7,a
      000763 C0 06            [24] 1840 	push	ar6
      000765 C0 04            [24] 1841 	push	ar4
      000767 C0 03            [24] 1842 	push	ar3
      000769 E5*00            [12] 1843 	mov	a,_bp
      00076B 24 F6            [12] 1844 	add	a,#0xf6
      00076D F8               [12] 1845 	mov	r0,a
      00076E E6               [12] 1846 	mov	a,@r0
      00076F C0 E0            [24] 1847 	push	acc
      000771 08               [12] 1848 	inc	r0
      000772 E6               [12] 1849 	mov	a,@r0
      000773 C0 E0            [24] 1850 	push	acc
      000775 08               [12] 1851 	inc	r0
      000776 E6               [12] 1852 	mov	a,@r0
      000777 C0 E0            [24] 1853 	push	acc
      000779 E4               [12] 1854 	clr	a
      00077A C0 E0            [24] 1855 	push	acc
      00077C C0 E0            [24] 1856 	push	acc
      00077E C0 E0            [24] 1857 	push	acc
      000780 C0 E0            [24] 1858 	push	acc
      000782 C0 E0            [24] 1859 	push	acc
      000784 C0 E0            [24] 1860 	push	acc
      000786 C0 E0            [24] 1861 	push	acc
      000788 C0 E0            [24] 1862 	push	acc
      00078A 8A 82            [24] 1863 	mov	dpl,r2
      00078C 8D 83            [24] 1864 	mov	dph,r5
      00078E 8F F0            [24] 1865 	mov	b,r7
      000790 12r00r00         [24] 1866 	lcall	_xTaskGenericNotifyFromISR
      000793 E5 81            [12] 1867 	mov	a,sp
      000795 24 F5            [12] 1868 	add	a,#0xf5
      000797 F5 81            [12] 1869 	mov	sp,a
      000799 D0 03            [24] 1870 	pop	ar3
      00079B D0 04            [24] 1871 	pop	ar4
      00079D D0 06            [24] 1872 	pop	ar6
      00079F 7A 00            [12] 1873 	mov	r2,#0x00
      0007A1 7D 00            [12] 1874 	mov	r5,#0x00
      0007A3 7F 00            [12] 1875 	mov	r7,#0x00
      0007A5 8B 82            [24] 1876 	mov	dpl,r3
      0007A7 8C 83            [24] 1877 	mov	dph,r4
      0007A9 8E F0            [24] 1878 	mov	b,r6
      0007AB EA               [12] 1879 	mov	a,r2
      0007AC 12r00r00         [24] 1880 	lcall	__gptrput
      0007AF A3               [24] 1881 	inc	dptr
      0007B0 ED               [12] 1882 	mov	a,r5
      0007B1 12r00r00         [24] 1883 	lcall	__gptrput
      0007B4 A3               [24] 1884 	inc	dptr
      0007B5 EF               [12] 1885 	mov	a,r7
      0007B6 12r00r00         [24] 1886 	lcall	__gptrput
      0007B9                       1887 00108$:
                           0007B9  1888 	C$stream_buffer.c$657$1_0$165 ==.
                                   1889 ;	src/FreeRTOS/stream_buffer.c:657: return xReturn;
      0007B9 A8*00            [24] 1890 	mov	r0,_bp
      0007BB 08               [12] 1891 	inc	r0
      0007BC 86 82            [24] 1892 	mov	dpl,@r0
      0007BE 08               [12] 1893 	inc	r0
      0007BF 86 83            [24] 1894 	mov	dph,@r0
                           0007C1  1895 	C$stream_buffer.c$658$1_0$165 ==.
                                   1896 ;	src/FreeRTOS/stream_buffer.c:658: }
      0007C1 85*00 81         [24] 1897 	mov	sp,_bp
      0007C4 D0*00            [24] 1898 	pop	_bp
                           0007C6  1899 	C$stream_buffer.c$658$1_0$165 ==.
                           0007C6  1900 	XG$xStreamBufferSendFromISR$0$0 ==.
      0007C6 22               [24] 1901 	ret
                                   1902 ;------------------------------------------------------------
                                   1903 ;Allocation info for local variables in function 'prvWriteMessageToBuffer'
                                   1904 ;------------------------------------------------------------
                                   1905 ;pvTxData                  Allocated to stack - _bp -5
                                   1906 ;xDataLengthBytes          Allocated to stack - _bp -7
                                   1907 ;xSpace                    Allocated to stack - _bp -9
                                   1908 ;xRequiredSpace            Allocated to stack - _bp -11
                                   1909 ;pxStreamBuffer            Allocated to stack - _bp +1
                                   1910 ;xShouldWrite              Allocated to registers r4 
                                   1911 ;xReturn                   Allocated to registers r6 r7 
                                   1912 ;------------------------------------------------------------
                           0007C7  1913 	Fstream_buffer$prvWriteMessageToBuffer$0$0 ==.
                           0007C7  1914 	C$stream_buffer.c$661$1_0$176 ==.
                                   1915 ;	src/FreeRTOS/stream_buffer.c:661: static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                   1916 ;	-----------------------------------------
                                   1917 ;	 function prvWriteMessageToBuffer
                                   1918 ;	-----------------------------------------
      0007C7                       1919 _prvWriteMessageToBuffer:
      0007C7 C0*00            [24] 1920 	push	_bp
      0007C9 85 81*00         [24] 1921 	mov	_bp,sp
      0007CC C0 82            [24] 1922 	push	dpl
      0007CE C0 83            [24] 1923 	push	dph
      0007D0 C0 F0            [24] 1924 	push	b
                           0007D2  1925 	C$stream_buffer.c$670$1_0$176 ==.
                                   1926 ;	src/FreeRTOS/stream_buffer.c:670: if( xSpace == ( size_t ) 0 )
      0007D2 E5*00            [12] 1927 	mov	a,_bp
      0007D4 24 F7            [12] 1928 	add	a,#0xf7
      0007D6 F8               [12] 1929 	mov	r0,a
      0007D7 E6               [12] 1930 	mov	a,@r0
      0007D8 08               [12] 1931 	inc	r0
      0007D9 46               [12] 1932 	orl	a,@r0
                           0007DA  1933 	C$stream_buffer.c$674$2_0$177 ==.
                                   1934 ;	src/FreeRTOS/stream_buffer.c:674: xShouldWrite = pdFALSE;
      0007DA 70 04            [24] 1935 	jnz	00108$
      0007DC FC               [12] 1936 	mov	r4,a
      0007DD 02r08r79         [24] 1937 	ljmp	00109$
      0007E0                       1938 00108$:
                           0007E0  1939 	C$stream_buffer.c$676$1_0$176 ==.
                                   1940 ;	src/FreeRTOS/stream_buffer.c:676: else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
      0007E0 A8*00            [24] 1941 	mov	r0,_bp
      0007E2 08               [12] 1942 	inc	r0
      0007E3 74 11            [12] 1943 	mov	a,#0x11
      0007E5 26               [12] 1944 	add	a,@r0
      0007E6 FA               [12] 1945 	mov	r2,a
      0007E7 E4               [12] 1946 	clr	a
      0007E8 08               [12] 1947 	inc	r0
      0007E9 36               [12] 1948 	addc	a,@r0
      0007EA FB               [12] 1949 	mov	r3,a
      0007EB 08               [12] 1950 	inc	r0
      0007EC 86 07            [24] 1951 	mov	ar7,@r0
      0007EE 8A 82            [24] 1952 	mov	dpl,r2
      0007F0 8B 83            [24] 1953 	mov	dph,r3
      0007F2 8F F0            [24] 1954 	mov	b,r7
      0007F4 12r00r00         [24] 1955 	lcall	__gptrget
      0007F7 FA               [12] 1956 	mov	r2,a
      0007F8 20 E0 37         [24] 1957 	jb	acc.0,00105$
                           0007FB  1958 	C$stream_buffer.c$681$2_0$178 ==.
                                   1959 ;	src/FreeRTOS/stream_buffer.c:681: xShouldWrite = pdTRUE;
      0007FB 7C 01            [12] 1960 	mov	r4,#0x01
                           0007FD  1961 	C$stream_buffer.c$682$2_0$178 ==.
                                   1962 ;	src/FreeRTOS/stream_buffer.c:682: xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
      0007FD E5*00            [12] 1963 	mov	a,_bp
      0007FF 24 F9            [12] 1964 	add	a,#0xf9
      000801 F8               [12] 1965 	mov	r0,a
      000802 E5*00            [12] 1966 	mov	a,_bp
      000804 24 F7            [12] 1967 	add	a,#0xf7
      000806 F9               [12] 1968 	mov	r1,a
      000807 C3               [12] 1969 	clr	c
      000808 E6               [12] 1970 	mov	a,@r0
      000809 97               [12] 1971 	subb	a,@r1
      00080A 08               [12] 1972 	inc	r0
      00080B E6               [12] 1973 	mov	a,@r0
      00080C 09               [12] 1974 	inc	r1
      00080D 97               [12] 1975 	subb	a,@r1
      00080E 50 0C            [24] 1976 	jnc	00115$
      000810 E5*00            [12] 1977 	mov	a,_bp
      000812 24 F9            [12] 1978 	add	a,#0xf9
      000814 F8               [12] 1979 	mov	r0,a
      000815 86 06            [24] 1980 	mov	ar6,@r0
      000817 08               [12] 1981 	inc	r0
      000818 86 07            [24] 1982 	mov	ar7,@r0
      00081A 80 0A            [24] 1983 	sjmp	00116$
      00081C                       1984 00115$:
      00081C E5*00            [12] 1985 	mov	a,_bp
      00081E 24 F7            [12] 1986 	add	a,#0xf7
      000820 F8               [12] 1987 	mov	r0,a
      000821 86 06            [24] 1988 	mov	ar6,@r0
      000823 08               [12] 1989 	inc	r0
      000824 86 07            [24] 1990 	mov	ar7,@r0
      000826                       1991 00116$:
      000826 E5*00            [12] 1992 	mov	a,_bp
      000828 24 F9            [12] 1993 	add	a,#0xf9
      00082A F8               [12] 1994 	mov	r0,a
      00082B A6 06            [24] 1995 	mov	@r0,ar6
      00082D 08               [12] 1996 	inc	r0
      00082E A6 07            [24] 1997 	mov	@r0,ar7
      000830 80 47            [24] 1998 	sjmp	00109$
      000832                       1999 00105$:
                           000832  2000 	C$stream_buffer.c$684$1_0$176 ==.
                                   2001 ;	src/FreeRTOS/stream_buffer.c:684: else if( xSpace >= xRequiredSpace )
      000832 E5*00            [12] 2002 	mov	a,_bp
      000834 24 F7            [12] 2003 	add	a,#0xf7
      000836 F8               [12] 2004 	mov	r0,a
      000837 E5*00            [12] 2005 	mov	a,_bp
      000839 24 F5            [12] 2006 	add	a,#0xf5
      00083B F9               [12] 2007 	mov	r1,a
      00083C C3               [12] 2008 	clr	c
      00083D E6               [12] 2009 	mov	a,@r0
      00083E 97               [12] 2010 	subb	a,@r1
      00083F 08               [12] 2011 	inc	r0
      000840 E6               [12] 2012 	mov	a,@r0
      000841 09               [12] 2013 	inc	r1
      000842 97               [12] 2014 	subb	a,@r1
      000843 40 32            [24] 2015 	jc	00102$
                           000845  2016 	C$stream_buffer.c$690$2_0$179 ==.
                                   2017 ;	src/FreeRTOS/stream_buffer.c:690: xShouldWrite = pdTRUE;
      000845 7C 01            [12] 2018 	mov	r4,#0x01
                           000847  2019 	C$stream_buffer.c$691$2_0$179 ==.
                                   2020 ;	src/FreeRTOS/stream_buffer.c:691: ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
      000847 E5*00            [12] 2021 	mov	a,_bp
      000849 24 F9            [12] 2022 	add	a,#0xf9
      00084B FF               [12] 2023 	mov	r7,a
      00084C 7E 00            [12] 2024 	mov	r6,#0x00
      00084E 7D 40            [12] 2025 	mov	r5,#0x40
      000850 C0 04            [24] 2026 	push	ar4
      000852 74 02            [12] 2027 	mov	a,#0x02
      000854 C0 E0            [24] 2028 	push	acc
      000856 E4               [12] 2029 	clr	a
      000857 C0 E0            [24] 2030 	push	acc
      000859 C0 07            [24] 2031 	push	ar7
      00085B C0 06            [24] 2032 	push	ar6
      00085D C0 05            [24] 2033 	push	ar5
      00085F A8*00            [24] 2034 	mov	r0,_bp
      000861 08               [12] 2035 	inc	r0
      000862 86 82            [24] 2036 	mov	dpl,@r0
      000864 08               [12] 2037 	inc	r0
      000865 86 83            [24] 2038 	mov	dph,@r0
      000867 08               [12] 2039 	inc	r0
      000868 86 F0            [24] 2040 	mov	b,@r0
      00086A 12r10r56         [24] 2041 	lcall	_prvWriteBytesToBuffer
      00086D E5 81            [12] 2042 	mov	a,sp
      00086F 24 FB            [12] 2043 	add	a,#0xfb
      000871 F5 81            [12] 2044 	mov	sp,a
      000873 D0 04            [24] 2045 	pop	ar4
      000875 80 02            [24] 2046 	sjmp	00109$
      000877                       2047 00102$:
                           000877  2048 	C$stream_buffer.c$696$2_0$180 ==.
                                   2049 ;	src/FreeRTOS/stream_buffer.c:696: xShouldWrite = pdFALSE;
      000877 7C 00            [12] 2050 	mov	r4,#0x00
      000879                       2051 00109$:
                           000879  2052 	C$stream_buffer.c$699$1_0$176 ==.
                                   2053 ;	src/FreeRTOS/stream_buffer.c:699: if( xShouldWrite != pdFALSE )
      000879 EC               [12] 2054 	mov	a,r4
      00087A 60 39            [24] 2055 	jz	00111$
                           00087C  2056 	C$stream_buffer.c$702$2_0$181 ==.
                                   2057 ;	src/FreeRTOS/stream_buffer.c:702: xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
      00087C E5*00            [12] 2058 	mov	a,_bp
      00087E 24 FB            [12] 2059 	add	a,#0xfb
      000880 F8               [12] 2060 	mov	r0,a
      000881 86 05            [24] 2061 	mov	ar5,@r0
      000883 08               [12] 2062 	inc	r0
      000884 86 06            [24] 2063 	mov	ar6,@r0
      000886 08               [12] 2064 	inc	r0
      000887 86 07            [24] 2065 	mov	ar7,@r0
      000889 E5*00            [12] 2066 	mov	a,_bp
      00088B 24 F9            [12] 2067 	add	a,#0xf9
      00088D F8               [12] 2068 	mov	r0,a
      00088E E6               [12] 2069 	mov	a,@r0
      00088F C0 E0            [24] 2070 	push	acc
      000891 08               [12] 2071 	inc	r0
      000892 E6               [12] 2072 	mov	a,@r0
      000893 C0 E0            [24] 2073 	push	acc
      000895 C0 05            [24] 2074 	push	ar5
      000897 C0 06            [24] 2075 	push	ar6
      000899 C0 07            [24] 2076 	push	ar7
      00089B A8*00            [24] 2077 	mov	r0,_bp
      00089D 08               [12] 2078 	inc	r0
      00089E 86 82            [24] 2079 	mov	dpl,@r0
      0008A0 08               [12] 2080 	inc	r0
      0008A1 86 83            [24] 2081 	mov	dph,@r0
      0008A3 08               [12] 2082 	inc	r0
      0008A4 86 F0            [24] 2083 	mov	b,@r0
      0008A6 12r10r56         [24] 2084 	lcall	_prvWriteBytesToBuffer
      0008A9 AE 82            [24] 2085 	mov	r6,dpl
      0008AB AF 83            [24] 2086 	mov	r7,dph
      0008AD E5 81            [12] 2087 	mov	a,sp
      0008AF 24 FB            [12] 2088 	add	a,#0xfb
      0008B1 F5 81            [12] 2089 	mov	sp,a
      0008B3 80 04            [24] 2090 	sjmp	00112$
      0008B5                       2091 00111$:
                           0008B5  2092 	C$stream_buffer.c$706$2_0$182 ==.
                                   2093 ;	src/FreeRTOS/stream_buffer.c:706: xReturn = 0;
      0008B5 7E 00            [12] 2094 	mov	r6,#0x00
      0008B7 7F 00            [12] 2095 	mov	r7,#0x00
      0008B9                       2096 00112$:
                           0008B9  2097 	C$stream_buffer.c$709$1_0$176 ==.
                                   2098 ;	src/FreeRTOS/stream_buffer.c:709: return xReturn;
      0008B9 8E 82            [24] 2099 	mov	dpl,r6
      0008BB 8F 83            [24] 2100 	mov	dph,r7
                           0008BD  2101 	C$stream_buffer.c$710$1_0$176 ==.
                                   2102 ;	src/FreeRTOS/stream_buffer.c:710: }
      0008BD 85*00 81         [24] 2103 	mov	sp,_bp
      0008C0 D0*00            [24] 2104 	pop	_bp
                           0008C2  2105 	C$stream_buffer.c$710$1_0$176 ==.
                           0008C2  2106 	XFstream_buffer$prvWriteMessageToBuffer$0$0 ==.
      0008C2 22               [24] 2107 	ret
                                   2108 ;------------------------------------------------------------
                                   2109 ;Allocation info for local variables in function 'xStreamBufferReceive'
                                   2110 ;------------------------------------------------------------
                                   2111 ;pvRxData                  Allocated to stack - _bp -5
                                   2112 ;xBufferLengthBytes        Allocated to stack - _bp -7
                                   2113 ;xTicksToWait              Allocated to stack - _bp -9
                                   2114 ;xStreamBuffer             Allocated to registers r7 r6 r5 
                                   2115 ;pxStreamBuffer            Allocated to stack - _bp +3
                                   2116 ;xReceivedLength           Allocated to stack - _bp +1
                                   2117 ;xBytesAvailable           Allocated to stack - _bp +6
                                   2118 ;xBytesToStoreMessageLength Allocated to stack - _bp +8
                                   2119 ;sloc0                     Allocated to stack - _bp +1
                                   2120 ;------------------------------------------------------------
                           0008C3  2121 	G$xStreamBufferReceive$0$0 ==.
                           0008C3  2122 	C$stream_buffer.c$713$1_0$184 ==.
                                   2123 ;	src/FreeRTOS/stream_buffer.c:713: size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                                   2124 ;	-----------------------------------------
                                   2125 ;	 function xStreamBufferReceive
                                   2126 ;	-----------------------------------------
      0008C3                       2127 _xStreamBufferReceive:
      0008C3 C0*00            [24] 2128 	push	_bp
      0008C5 E5 81            [12] 2129 	mov	a,sp
      0008C7 F5*00            [12] 2130 	mov	_bp,a
      0008C9 24 09            [12] 2131 	add	a,#0x09
      0008CB F5 81            [12] 2132 	mov	sp,a
      0008CD AF 82            [24] 2133 	mov	r7,dpl
      0008CF AE 83            [24] 2134 	mov	r6,dph
      0008D1 AD F0            [24] 2135 	mov	r5,b
                           0008D3  2136 	C$stream_buffer.c$718$2_0$184 ==.
                                   2137 ;	src/FreeRTOS/stream_buffer.c:718: StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
      0008D3 E5*00            [12] 2138 	mov	a,_bp
      0008D5 24 03            [12] 2139 	add	a,#0x03
      0008D7 F8               [12] 2140 	mov	r0,a
      0008D8 A6 07            [24] 2141 	mov	@r0,ar7
      0008DA 08               [12] 2142 	inc	r0
      0008DB A6 06            [24] 2143 	mov	@r0,ar6
      0008DD 08               [12] 2144 	inc	r0
      0008DE A6 05            [24] 2145 	mov	@r0,ar5
                           0008E0  2146 	C$stream_buffer.c$719$2_0$184 ==.
                                   2147 ;	src/FreeRTOS/stream_buffer.c:719: size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
      0008E0 A8*00            [24] 2148 	mov	r0,_bp
      0008E2 08               [12] 2149 	inc	r0
      0008E3 E4               [12] 2150 	clr	a
      0008E4 F6               [12] 2151 	mov	@r0,a
      0008E5 08               [12] 2152 	inc	r0
      0008E6 F6               [12] 2153 	mov	@r0,a
                           0008E7  2154 	C$stream_buffer.c$729$1_0$184 ==.
                                   2155 ;	src/FreeRTOS/stream_buffer.c:729: if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
      0008E7 74 11            [12] 2156 	mov	a,#0x11
      0008E9 2F               [12] 2157 	add	a,r7
      0008EA FB               [12] 2158 	mov	r3,a
      0008EB E4               [12] 2159 	clr	a
      0008EC 3E               [12] 2160 	addc	a,r6
      0008ED FC               [12] 2161 	mov	r4,a
      0008EE 8B 82            [24] 2162 	mov	dpl,r3
      0008F0 8C 83            [24] 2163 	mov	dph,r4
      0008F2 8D F0            [24] 2164 	mov	b,r5
      0008F4 12r00r00         [24] 2165 	lcall	__gptrget
      0008F7 FB               [12] 2166 	mov	r3,a
      0008F8 30 E0 0C         [24] 2167 	jnb	acc.0,00102$
                           0008FB  2168 	C$stream_buffer.c$731$2_0$185 ==.
                                   2169 ;	src/FreeRTOS/stream_buffer.c:731: xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
      0008FB E5*00            [12] 2170 	mov	a,_bp
      0008FD 24 08            [12] 2171 	add	a,#0x08
      0008FF F8               [12] 2172 	mov	r0,a
      000900 76 02            [12] 2173 	mov	@r0,#0x02
      000902 08               [12] 2174 	inc	r0
      000903 76 00            [12] 2175 	mov	@r0,#0x00
      000905 80 09            [24] 2176 	sjmp	00103$
      000907                       2177 00102$:
                           000907  2178 	C$stream_buffer.c$735$2_0$186 ==.
                                   2179 ;	src/FreeRTOS/stream_buffer.c:735: xBytesToStoreMessageLength = 0;
      000907 E5*00            [12] 2180 	mov	a,_bp
      000909 24 08            [12] 2181 	add	a,#0x08
      00090B F8               [12] 2182 	mov	r0,a
      00090C E4               [12] 2183 	clr	a
      00090D F6               [12] 2184 	mov	@r0,a
      00090E 08               [12] 2185 	inc	r0
      00090F F6               [12] 2186 	mov	@r0,a
      000910                       2187 00103$:
                           000910  2188 	C$stream_buffer.c$738$1_0$184 ==.
                                   2189 ;	src/FreeRTOS/stream_buffer.c:738: if( xTicksToWait != ( TickType_t ) 0 )
      000910 E5*00            [12] 2190 	mov	a,_bp
      000912 24 F7            [12] 2191 	add	a,#0xf7
      000914 F8               [12] 2192 	mov	r0,a
      000915 E6               [12] 2193 	mov	a,@r0
      000916 08               [12] 2194 	inc	r0
      000917 46               [12] 2195 	orl	a,@r0
      000918 70 03            [24] 2196 	jnz	00149$
      00091A 02r0Ar25         [24] 2197 	ljmp	00109$
      00091D                       2198 00149$:
                           00091D  2199 	C$stream_buffer.c$742$2_0$187 ==.
                                   2200 ;	src/FreeRTOS/stream_buffer.c:742: taskENTER_CRITICAL();
      00091D C0 E0            [24] 2201 	push ACC 
      00091F C0 A8            [24] 2202 	push IE 
                                   2203 ;	assignBit
      000921 C2 AF            [12] 2204 	clr	_EA
                           000923  2205 	C$stream_buffer.c$744$3_0$188 ==.
                                   2206 ;	src/FreeRTOS/stream_buffer.c:744: xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
      000923 E5*00            [12] 2207 	mov	a,_bp
      000925 24 03            [12] 2208 	add	a,#0x03
      000927 F8               [12] 2209 	mov	r0,a
      000928 86 82            [24] 2210 	mov	dpl,@r0
      00092A 08               [12] 2211 	inc	r0
      00092B 86 83            [24] 2212 	mov	dph,@r0
      00092D 08               [12] 2213 	inc	r0
      00092E 86 F0            [24] 2214 	mov	b,@r0
      000930 12r14rB8         [24] 2215 	lcall	_prvBytesInBuffer
      000933 AA 82            [24] 2216 	mov	r2,dpl
      000935 AB 83            [24] 2217 	mov	r3,dph
      000937 E5*00            [12] 2218 	mov	a,_bp
      000939 24 06            [12] 2219 	add	a,#0x06
      00093B F8               [12] 2220 	mov	r0,a
      00093C A6 02            [24] 2221 	mov	@r0,ar2
      00093E 08               [12] 2222 	inc	r0
      00093F A6 03            [24] 2223 	mov	@r0,ar3
                           000941  2224 	C$stream_buffer.c$751$3_0$188 ==.
                                   2225 ;	src/FreeRTOS/stream_buffer.c:751: if( xBytesAvailable <= xBytesToStoreMessageLength )
      000941 E5*00            [12] 2226 	mov	a,_bp
      000943 24 06            [12] 2227 	add	a,#0x06
      000945 F8               [12] 2228 	mov	r0,a
      000946 E5*00            [12] 2229 	mov	a,_bp
      000948 24 08            [12] 2230 	add	a,#0x08
      00094A F9               [12] 2231 	mov	r1,a
      00094B C3               [12] 2232 	clr	c
      00094C E7               [12] 2233 	mov	a,@r1
      00094D 96               [12] 2234 	subb	a,@r0
      00094E 09               [12] 2235 	inc	r1
      00094F E7               [12] 2236 	mov	a,@r1
      000950 08               [12] 2237 	inc	r0
      000951 96               [12] 2238 	subb	a,@r0
      000952 92*00            [24] 2239 	mov	b0,c
      000954 40 4A            [24] 2240 	jc	00105$
                           000956  2241 	C$stream_buffer.c$754$4_0$189 ==.
                                   2242 ;	src/FreeRTOS/stream_buffer.c:754: ( void ) xTaskNotifyStateClear( NULL );
      000956 90 00 00         [24] 2243 	mov	dptr,#0x0000
      000959 75 F0 00         [24] 2244 	mov	b,#0x00
      00095C C0*00            [24] 2245 	push	bits
      00095E 12r00r00         [24] 2246 	lcall	_xTaskNotifyStateClear
      000961 D0*00            [24] 2247 	pop	bits
                           000963  2248 	C$stream_buffer.c$758$4_0$189 ==.
                                   2249 ;	src/FreeRTOS/stream_buffer.c:758: pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
      000963 E5*00            [12] 2250 	mov	a,_bp
      000965 24 03            [12] 2251 	add	a,#0x03
      000967 F8               [12] 2252 	mov	r0,a
      000968 74 08            [12] 2253 	mov	a,#0x08
      00096A 26               [12] 2254 	add	a,@r0
      00096B FA               [12] 2255 	mov	r2,a
      00096C E4               [12] 2256 	clr	a
      00096D 08               [12] 2257 	inc	r0
      00096E 36               [12] 2258 	addc	a,@r0
      00096F FB               [12] 2259 	mov	r3,a
      000970 08               [12] 2260 	inc	r0
      000971 86 05            [24] 2261 	mov	ar5,@r0
      000973 C0 05            [24] 2262 	push	ar5
      000975 C0 03            [24] 2263 	push	ar3
      000977 C0 02            [24] 2264 	push	ar2
      000979 C0*00            [24] 2265 	push	bits
      00097B 12r00r00         [24] 2266 	lcall	_xTaskGetCurrentTaskHandle
      00097E AC 82            [24] 2267 	mov	r4,dpl
      000980 AE 83            [24] 2268 	mov	r6,dph
      000982 AF F0            [24] 2269 	mov	r7,b
      000984 D0*00            [24] 2270 	pop	bits
      000986 D0 02            [24] 2271 	pop	ar2
      000988 D0 03            [24] 2272 	pop	ar3
      00098A D0 05            [24] 2273 	pop	ar5
      00098C 8A 82            [24] 2274 	mov	dpl,r2
      00098E 8B 83            [24] 2275 	mov	dph,r3
      000990 8D F0            [24] 2276 	mov	b,r5
      000992 EC               [12] 2277 	mov	a,r4
      000993 12r00r00         [24] 2278 	lcall	__gptrput
      000996 A3               [24] 2279 	inc	dptr
      000997 EE               [12] 2280 	mov	a,r6
      000998 12r00r00         [24] 2281 	lcall	__gptrput
      00099B A3               [24] 2282 	inc	dptr
      00099C EF               [12] 2283 	mov	a,r7
      00099D 12r00r00         [24] 2284 	lcall	__gptrput
      0009A0                       2285 00105$:
                           0009A0  2286 	C$stream_buffer.c$765$2_0$187 ==.
                                   2287 ;	src/FreeRTOS/stream_buffer.c:765: taskEXIT_CRITICAL();
      0009A0 D0 E0            [24] 2288 	pop ACC 
      0009A2 53 E0 80         [24] 2289 	anl	_ACC,#0x80
      0009A5 E5 E0            [12] 2290 	mov	a,_ACC
      0009A7 42 A8            [12] 2291 	orl	_IE,a
      0009A9 D0 E0            [24] 2292 	pop ACC 
                           0009AB  2293 	C$stream_buffer.c$767$2_0$187 ==.
                                   2294 ;	src/FreeRTOS/stream_buffer.c:767: if( xBytesAvailable <= xBytesToStoreMessageLength )
      0009AB 30*00 03         [24] 2295 	jnb	b0,00151$
      0009AE 02r0Ar43         [24] 2296 	ljmp	00110$
      0009B1                       2297 00151$:
                           0009B1  2298 	C$stream_buffer.c$771$3_0$191 ==.
                                   2299 ;	src/FreeRTOS/stream_buffer.c:771: ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
      0009B1 E5*00            [12] 2300 	mov	a,_bp
      0009B3 24 F7            [12] 2301 	add	a,#0xf7
      0009B5 F8               [12] 2302 	mov	r0,a
      0009B6 E6               [12] 2303 	mov	a,@r0
      0009B7 C0 E0            [24] 2304 	push	acc
      0009B9 08               [12] 2305 	inc	r0
      0009BA E6               [12] 2306 	mov	a,@r0
      0009BB C0 E0            [24] 2307 	push	acc
      0009BD E4               [12] 2308 	clr	a
      0009BE C0 E0            [24] 2309 	push	acc
      0009C0 C0 E0            [24] 2310 	push	acc
      0009C2 C0 E0            [24] 2311 	push	acc
      0009C4 C0 E0            [24] 2312 	push	acc
      0009C6 C0 E0            [24] 2313 	push	acc
      0009C8 C0 E0            [24] 2314 	push	acc
      0009CA C0 E0            [24] 2315 	push	acc
      0009CC 90 00 00         [24] 2316 	mov	dptr,#(0x00&0x00ff)
      0009CF E4               [12] 2317 	clr	a
      0009D0 F5 F0            [12] 2318 	mov	b,a
      0009D2 12r00r00         [24] 2319 	lcall	_xTaskNotifyWait
      0009D5 E5 81            [12] 2320 	mov	a,sp
      0009D7 24 F7            [12] 2321 	add	a,#0xf7
      0009D9 F5 81            [12] 2322 	mov	sp,a
                           0009DB  2323 	C$stream_buffer.c$772$3_0$191 ==.
                                   2324 ;	src/FreeRTOS/stream_buffer.c:772: pxStreamBuffer->xTaskWaitingToReceive = NULL;
      0009DB E5*00            [12] 2325 	mov	a,_bp
      0009DD 24 03            [12] 2326 	add	a,#0x03
      0009DF F8               [12] 2327 	mov	r0,a
      0009E0 74 08            [12] 2328 	mov	a,#0x08
      0009E2 26               [12] 2329 	add	a,@r0
      0009E3 FD               [12] 2330 	mov	r5,a
      0009E4 E4               [12] 2331 	clr	a
      0009E5 08               [12] 2332 	inc	r0
      0009E6 36               [12] 2333 	addc	a,@r0
      0009E7 FE               [12] 2334 	mov	r6,a
      0009E8 08               [12] 2335 	inc	r0
      0009E9 86 07            [24] 2336 	mov	ar7,@r0
      0009EB 7A 00            [12] 2337 	mov	r2,#0x00
      0009ED 7B 00            [12] 2338 	mov	r3,#0x00
      0009EF 7C 00            [12] 2339 	mov	r4,#0x00
      0009F1 8D 82            [24] 2340 	mov	dpl,r5
      0009F3 8E 83            [24] 2341 	mov	dph,r6
      0009F5 8F F0            [24] 2342 	mov	b,r7
      0009F7 EA               [12] 2343 	mov	a,r2
      0009F8 12r00r00         [24] 2344 	lcall	__gptrput
      0009FB A3               [24] 2345 	inc	dptr
      0009FC EB               [12] 2346 	mov	a,r3
      0009FD 12r00r00         [24] 2347 	lcall	__gptrput
      000A00 A3               [24] 2348 	inc	dptr
      000A01 EC               [12] 2349 	mov	a,r4
      000A02 12r00r00         [24] 2350 	lcall	__gptrput
                           000A05  2351 	C$stream_buffer.c$775$3_0$191 ==.
                                   2352 ;	src/FreeRTOS/stream_buffer.c:775: xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
      000A05 E5*00            [12] 2353 	mov	a,_bp
      000A07 24 03            [12] 2354 	add	a,#0x03
      000A09 F8               [12] 2355 	mov	r0,a
      000A0A 86 82            [24] 2356 	mov	dpl,@r0
      000A0C 08               [12] 2357 	inc	r0
      000A0D 86 83            [24] 2358 	mov	dph,@r0
      000A0F 08               [12] 2359 	inc	r0
      000A10 86 F0            [24] 2360 	mov	b,@r0
      000A12 12r14rB8         [24] 2361 	lcall	_prvBytesInBuffer
      000A15 AE 82            [24] 2362 	mov	r6,dpl
      000A17 AF 83            [24] 2363 	mov	r7,dph
      000A19 E5*00            [12] 2364 	mov	a,_bp
      000A1B 24 06            [12] 2365 	add	a,#0x06
      000A1D F8               [12] 2366 	mov	r0,a
      000A1E A6 06            [24] 2367 	mov	@r0,ar6
      000A20 08               [12] 2368 	inc	r0
      000A21 A6 07            [24] 2369 	mov	@r0,ar7
      000A23 80 1E            [24] 2370 	sjmp	00110$
      000A25                       2371 00109$:
                           000A25  2372 	C$stream_buffer.c$784$2_0$193 ==.
                                   2373 ;	src/FreeRTOS/stream_buffer.c:784: xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
      000A25 E5*00            [12] 2374 	mov	a,_bp
      000A27 24 03            [12] 2375 	add	a,#0x03
      000A29 F8               [12] 2376 	mov	r0,a
      000A2A 86 82            [24] 2377 	mov	dpl,@r0
      000A2C 08               [12] 2378 	inc	r0
      000A2D 86 83            [24] 2379 	mov	dph,@r0
      000A2F 08               [12] 2380 	inc	r0
      000A30 86 F0            [24] 2381 	mov	b,@r0
      000A32 12r14rB8         [24] 2382 	lcall	_prvBytesInBuffer
      000A35 AE 82            [24] 2383 	mov	r6,dpl
      000A37 AF 83            [24] 2384 	mov	r7,dph
      000A39 E5*00            [12] 2385 	mov	a,_bp
      000A3B 24 06            [12] 2386 	add	a,#0x06
      000A3D F8               [12] 2387 	mov	r0,a
      000A3E A6 06            [24] 2388 	mov	@r0,ar6
      000A40 08               [12] 2389 	inc	r0
      000A41 A6 07            [24] 2390 	mov	@r0,ar7
      000A43                       2391 00110$:
                           000A43  2392 	C$stream_buffer.c$792$1_0$184 ==.
                                   2393 ;	src/FreeRTOS/stream_buffer.c:792: if( xBytesAvailable > xBytesToStoreMessageLength )
      000A43 E5*00            [12] 2394 	mov	a,_bp
      000A45 24 06            [12] 2395 	add	a,#0x06
      000A47 F8               [12] 2396 	mov	r0,a
      000A48 E5*00            [12] 2397 	mov	a,_bp
      000A4A 24 08            [12] 2398 	add	a,#0x08
      000A4C F9               [12] 2399 	mov	r1,a
      000A4D C3               [12] 2400 	clr	c
      000A4E E7               [12] 2401 	mov	a,@r1
      000A4F 96               [12] 2402 	subb	a,@r0
      000A50 09               [12] 2403 	inc	r1
      000A51 E7               [12] 2404 	mov	a,@r1
      000A52 08               [12] 2405 	inc	r0
      000A53 96               [12] 2406 	subb	a,@r0
      000A54 40 03            [24] 2407 	jc	00152$
      000A56 02r0Br3D         [24] 2408 	ljmp	00117$
      000A59                       2409 00152$:
                           000A59  2410 	C$stream_buffer.c$794$2_0$194 ==.
                                   2411 ;	src/FreeRTOS/stream_buffer.c:794: xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
      000A59 E5*00            [12] 2412 	mov	a,_bp
      000A5B 24 08            [12] 2413 	add	a,#0x08
      000A5D F8               [12] 2414 	mov	r0,a
      000A5E E6               [12] 2415 	mov	a,@r0
      000A5F C0 E0            [24] 2416 	push	acc
      000A61 08               [12] 2417 	inc	r0
      000A62 E6               [12] 2418 	mov	a,@r0
      000A63 C0 E0            [24] 2419 	push	acc
      000A65 E5*00            [12] 2420 	mov	a,_bp
      000A67 24 06            [12] 2421 	add	a,#0x06
      000A69 F8               [12] 2422 	mov	r0,a
      000A6A E6               [12] 2423 	mov	a,@r0
      000A6B C0 E0            [24] 2424 	push	acc
      000A6D 08               [12] 2425 	inc	r0
      000A6E E6               [12] 2426 	mov	a,@r0
      000A6F C0 E0            [24] 2427 	push	acc
      000A71 E5*00            [12] 2428 	mov	a,_bp
      000A73 24 F9            [12] 2429 	add	a,#0xf9
      000A75 F8               [12] 2430 	mov	r0,a
      000A76 E6               [12] 2431 	mov	a,@r0
      000A77 C0 E0            [24] 2432 	push	acc
      000A79 08               [12] 2433 	inc	r0
      000A7A E6               [12] 2434 	mov	a,@r0
      000A7B C0 E0            [24] 2435 	push	acc
      000A7D E5*00            [12] 2436 	mov	a,_bp
      000A7F 24 FB            [12] 2437 	add	a,#0xfb
      000A81 F8               [12] 2438 	mov	r0,a
      000A82 E6               [12] 2439 	mov	a,@r0
      000A83 C0 E0            [24] 2440 	push	acc
      000A85 08               [12] 2441 	inc	r0
      000A86 E6               [12] 2442 	mov	a,@r0
      000A87 C0 E0            [24] 2443 	push	acc
      000A89 08               [12] 2444 	inc	r0
      000A8A E6               [12] 2445 	mov	a,@r0
      000A8B C0 E0            [24] 2446 	push	acc
      000A8D E5*00            [12] 2447 	mov	a,_bp
      000A8F 24 03            [12] 2448 	add	a,#0x03
      000A91 F8               [12] 2449 	mov	r0,a
      000A92 86 82            [24] 2450 	mov	dpl,@r0
      000A94 08               [12] 2451 	inc	r0
      000A95 86 83            [24] 2452 	mov	dph,@r0
      000A97 08               [12] 2453 	inc	r0
      000A98 86 F0            [24] 2454 	mov	b,@r0
      000A9A 12r0Dr7A         [24] 2455 	lcall	_prvReadMessageFromBuffer
      000A9D AE 82            [24] 2456 	mov	r6,dpl
      000A9F AF 83            [24] 2457 	mov	r7,dph
      000AA1 E5 81            [12] 2458 	mov	a,sp
      000AA3 24 F7            [12] 2459 	add	a,#0xf7
      000AA5 F5 81            [12] 2460 	mov	sp,a
      000AA7 A8*00            [24] 2461 	mov	r0,_bp
      000AA9 08               [12] 2462 	inc	r0
      000AAA A6 06            [24] 2463 	mov	@r0,ar6
      000AAC 08               [12] 2464 	inc	r0
      000AAD A6 07            [24] 2465 	mov	@r0,ar7
                           000AAF  2466 	C$stream_buffer.c$797$2_0$194 ==.
                                   2467 ;	src/FreeRTOS/stream_buffer.c:797: if( xReceivedLength != ( size_t ) 0 )
      000AAF EE               [12] 2468 	mov	a,r6
      000AB0 4F               [12] 2469 	orl	a,r7
      000AB1 70 03            [24] 2470 	jnz	00153$
      000AB3 02r0Br3D         [24] 2471 	ljmp	00117$
      000AB6                       2472 00153$:
                           000AB6  2473 	C$stream_buffer.c$800$3_0$195 ==.
                                   2474 ;	src/FreeRTOS/stream_buffer.c:800: sbRECEIVE_COMPLETED( pxStreamBuffer );
      000AB6 12r00r00         [24] 2475 	lcall	_vTaskSuspendAll
      000AB9 E5*00            [12] 2476 	mov	a,_bp
      000ABB 24 03            [12] 2477 	add	a,#0x03
      000ABD F8               [12] 2478 	mov	r0,a
      000ABE 74 0B            [12] 2479 	mov	a,#0x0b
      000AC0 26               [12] 2480 	add	a,@r0
      000AC1 FD               [12] 2481 	mov	r5,a
      000AC2 E4               [12] 2482 	clr	a
      000AC3 08               [12] 2483 	inc	r0
      000AC4 36               [12] 2484 	addc	a,@r0
      000AC5 FE               [12] 2485 	mov	r6,a
      000AC6 08               [12] 2486 	inc	r0
      000AC7 86 07            [24] 2487 	mov	ar7,@r0
      000AC9 8D 82            [24] 2488 	mov	dpl,r5
      000ACB 8E 83            [24] 2489 	mov	dph,r6
      000ACD 8F F0            [24] 2490 	mov	b,r7
      000ACF 12r00r00         [24] 2491 	lcall	__gptrget
      000AD2 FA               [12] 2492 	mov	r2,a
      000AD3 A3               [24] 2493 	inc	dptr
      000AD4 12r00r00         [24] 2494 	lcall	__gptrget
      000AD7 FB               [12] 2495 	mov	r3,a
      000AD8 A3               [24] 2496 	inc	dptr
      000AD9 12r00r00         [24] 2497 	lcall	__gptrget
      000ADC EA               [12] 2498 	mov	a,r2
      000ADD 4B               [12] 2499 	orl	a,r3
      000ADE 60 5A            [24] 2500 	jz	00112$
      000AE0 8D 82            [24] 2501 	mov	dpl,r5
      000AE2 8E 83            [24] 2502 	mov	dph,r6
      000AE4 8F F0            [24] 2503 	mov	b,r7
      000AE6 12r00r00         [24] 2504 	lcall	__gptrget
      000AE9 FA               [12] 2505 	mov	r2,a
      000AEA A3               [24] 2506 	inc	dptr
      000AEB 12r00r00         [24] 2507 	lcall	__gptrget
      000AEE FB               [12] 2508 	mov	r3,a
      000AEF A3               [24] 2509 	inc	dptr
      000AF0 12r00r00         [24] 2510 	lcall	__gptrget
      000AF3 FC               [12] 2511 	mov	r4,a
      000AF4 C0 07            [24] 2512 	push	ar7
      000AF6 C0 06            [24] 2513 	push	ar6
      000AF8 C0 05            [24] 2514 	push	ar5
      000AFA E4               [12] 2515 	clr	a
      000AFB C0 E0            [24] 2516 	push	acc
      000AFD C0 E0            [24] 2517 	push	acc
      000AFF C0 E0            [24] 2518 	push	acc
      000B01 C0 E0            [24] 2519 	push	acc
      000B03 C0 E0            [24] 2520 	push	acc
      000B05 C0 E0            [24] 2521 	push	acc
      000B07 C0 E0            [24] 2522 	push	acc
      000B09 C0 E0            [24] 2523 	push	acc
      000B0B 8A 82            [24] 2524 	mov	dpl,r2
      000B0D 8B 83            [24] 2525 	mov	dph,r3
      000B0F 8C F0            [24] 2526 	mov	b,r4
      000B11 12r00r00         [24] 2527 	lcall	_xTaskGenericNotify
      000B14 E5 81            [12] 2528 	mov	a,sp
      000B16 24 F8            [12] 2529 	add	a,#0xf8
      000B18 F5 81            [12] 2530 	mov	sp,a
      000B1A D0 05            [24] 2531 	pop	ar5
      000B1C D0 06            [24] 2532 	pop	ar6
      000B1E D0 07            [24] 2533 	pop	ar7
      000B20 7A 00            [12] 2534 	mov	r2,#0x00
      000B22 7B 00            [12] 2535 	mov	r3,#0x00
      000B24 7C 00            [12] 2536 	mov	r4,#0x00
      000B26 8D 82            [24] 2537 	mov	dpl,r5
      000B28 8E 83            [24] 2538 	mov	dph,r6
      000B2A 8F F0            [24] 2539 	mov	b,r7
      000B2C EA               [12] 2540 	mov	a,r2
      000B2D 12r00r00         [24] 2541 	lcall	__gptrput
      000B30 A3               [24] 2542 	inc	dptr
      000B31 EB               [12] 2543 	mov	a,r3
      000B32 12r00r00         [24] 2544 	lcall	__gptrput
      000B35 A3               [24] 2545 	inc	dptr
      000B36 EC               [12] 2546 	mov	a,r4
      000B37 12r00r00         [24] 2547 	lcall	__gptrput
      000B3A                       2548 00112$:
      000B3A 12r00r00         [24] 2549 	lcall	_xTaskResumeAll
                           000B3D  2550 	C$stream_buffer.c$810$1_0$184 ==.
                                   2551 ;	src/FreeRTOS/stream_buffer.c:810: mtCOVERAGE_TEST_MARKER();
      000B3D                       2552 00117$:
                           000B3D  2553 	C$stream_buffer.c$813$1_0$184 ==.
                                   2554 ;	src/FreeRTOS/stream_buffer.c:813: return xReceivedLength;
      000B3D A8*00            [24] 2555 	mov	r0,_bp
      000B3F 08               [12] 2556 	inc	r0
      000B40 86 82            [24] 2557 	mov	dpl,@r0
      000B42 08               [12] 2558 	inc	r0
      000B43 86 83            [24] 2559 	mov	dph,@r0
                           000B45  2560 	C$stream_buffer.c$814$1_0$184 ==.
                                   2561 ;	src/FreeRTOS/stream_buffer.c:814: }
      000B45 85*00 81         [24] 2562 	mov	sp,_bp
      000B48 D0*00            [24] 2563 	pop	_bp
                           000B4A  2564 	C$stream_buffer.c$814$1_0$184 ==.
                           000B4A  2565 	XG$xStreamBufferReceive$0$0 ==.
      000B4A 22               [24] 2566 	ret
                                   2567 ;------------------------------------------------------------
                                   2568 ;Allocation info for local variables in function 'xStreamBufferNextMessageLengthBytes'
                                   2569 ;------------------------------------------------------------
                                   2570 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   2571 ;pxStreamBuffer            Allocated to registers 
                                   2572 ;xReturn                   Allocated to registers r3 r4 
                                   2573 ;xBytesAvailable           Allocated to stack - _bp +1
                                   2574 ;xOriginalTail             Allocated to stack - _bp +3
                                   2575 ;xTempReturn               Allocated to stack - _bp +5
                                   2576 ;------------------------------------------------------------
                           000B4B  2577 	G$xStreamBufferNextMessageLengthBytes$0$0 ==.
                           000B4B  2578 	C$stream_buffer.c$817$1_0$201 ==.
                                   2579 ;	src/FreeRTOS/stream_buffer.c:817: size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
                                   2580 ;	-----------------------------------------
                                   2581 ;	 function xStreamBufferNextMessageLengthBytes
                                   2582 ;	-----------------------------------------
      000B4B                       2583 _xStreamBufferNextMessageLengthBytes:
      000B4B C0*00            [24] 2584 	push	_bp
      000B4D E5 81            [12] 2585 	mov	a,sp
      000B4F F5*00            [12] 2586 	mov	_bp,a
      000B51 24 06            [12] 2587 	add	a,#0x06
      000B53 F5 81            [12] 2588 	mov	sp,a
      000B55 AD 82            [24] 2589 	mov	r5,dpl
      000B57 AE 83            [24] 2590 	mov	r6,dph
      000B59 AF F0            [24] 2591 	mov	r7,b
                           000B5B  2592 	C$stream_buffer.c$826$1_0$201 ==.
                                   2593 ;	src/FreeRTOS/stream_buffer.c:826: if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
      000B5B 74 11            [12] 2594 	mov	a,#0x11
      000B5D 2D               [12] 2595 	add	a,r5
      000B5E FA               [12] 2596 	mov	r2,a
      000B5F E4               [12] 2597 	clr	a
      000B60 3E               [12] 2598 	addc	a,r6
      000B61 FB               [12] 2599 	mov	r3,a
      000B62 8F 04            [24] 2600 	mov	ar4,r7
      000B64 8A 82            [24] 2601 	mov	dpl,r2
      000B66 8B 83            [24] 2602 	mov	dph,r3
      000B68 8C F0            [24] 2603 	mov	b,r4
      000B6A 12r00r00         [24] 2604 	lcall	__gptrget
      000B6D FA               [12] 2605 	mov	r2,a
      000B6E 20 E0 03         [24] 2606 	jb	acc.0,00117$
      000B71 02r0Cr18         [24] 2607 	ljmp	00105$
      000B74                       2608 00117$:
                           000B74  2609 	C$stream_buffer.c$828$2_0$202 ==.
                                   2610 ;	src/FreeRTOS/stream_buffer.c:828: xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
      000B74 8D 82            [24] 2611 	mov	dpl,r5
      000B76 8E 83            [24] 2612 	mov	dph,r6
      000B78 8F F0            [24] 2613 	mov	b,r7
      000B7A C0 07            [24] 2614 	push	ar7
      000B7C C0 06            [24] 2615 	push	ar6
      000B7E C0 05            [24] 2616 	push	ar5
      000B80 12r14rB8         [24] 2617 	lcall	_prvBytesInBuffer
      000B83 AB 82            [24] 2618 	mov	r3,dpl
      000B85 AC 83            [24] 2619 	mov	r4,dph
      000B87 D0 05            [24] 2620 	pop	ar5
      000B89 D0 06            [24] 2621 	pop	ar6
      000B8B D0 07            [24] 2622 	pop	ar7
      000B8D A8*00            [24] 2623 	mov	r0,_bp
      000B8F 08               [12] 2624 	inc	r0
      000B90 A6 03            [24] 2625 	mov	@r0,ar3
      000B92 08               [12] 2626 	inc	r0
      000B93 A6 04            [24] 2627 	mov	@r0,ar4
                           000B95  2628 	C$stream_buffer.c$829$2_0$202 ==.
                                   2629 ;	src/FreeRTOS/stream_buffer.c:829: if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
      000B95 A8*00            [24] 2630 	mov	r0,_bp
      000B97 08               [12] 2631 	inc	r0
      000B98 C3               [12] 2632 	clr	c
      000B99 74 02            [12] 2633 	mov	a,#0x02
      000B9B 96               [12] 2634 	subb	a,@r0
      000B9C E4               [12] 2635 	clr	a
      000B9D 08               [12] 2636 	inc	r0
      000B9E 96               [12] 2637 	subb	a,@r0
      000B9F 50 71            [24] 2638 	jnc	00102$
                           000BA1  2639 	C$stream_buffer.c$837$3_0$203 ==.
                                   2640 ;	src/FreeRTOS/stream_buffer.c:837: xOriginalTail = pxStreamBuffer->xTail;
      000BA1 8D 82            [24] 2641 	mov	dpl,r5
      000BA3 8E 83            [24] 2642 	mov	dph,r6
      000BA5 8F F0            [24] 2643 	mov	b,r7
      000BA7 E5*00            [12] 2644 	mov	a,_bp
      000BA9 24 03            [12] 2645 	add	a,#0x03
      000BAB F8               [12] 2646 	mov	r0,a
      000BAC 12r00r00         [24] 2647 	lcall	__gptrget
      000BAF F6               [12] 2648 	mov	@r0,a
      000BB0 A3               [24] 2649 	inc	dptr
      000BB1 12r00r00         [24] 2650 	lcall	__gptrget
      000BB4 08               [12] 2651 	inc	r0
      000BB5 F6               [12] 2652 	mov	@r0,a
                           000BB6  2653 	C$stream_buffer.c$838$3_0$203 ==.
                                   2654 ;	src/FreeRTOS/stream_buffer.c:838: ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
      000BB6 E5*00            [12] 2655 	mov	a,_bp
      000BB8 24 05            [12] 2656 	add	a,#0x05
      000BBA FA               [12] 2657 	mov	r2,a
      000BBB 7B 00            [12] 2658 	mov	r3,#0x00
      000BBD 7C 40            [12] 2659 	mov	r4,#0x40
      000BBF C0 07            [24] 2660 	push	ar7
      000BC1 C0 06            [24] 2661 	push	ar6
      000BC3 C0 05            [24] 2662 	push	ar5
      000BC5 A8*00            [24] 2663 	mov	r0,_bp
      000BC7 08               [12] 2664 	inc	r0
      000BC8 E6               [12] 2665 	mov	a,@r0
      000BC9 C0 E0            [24] 2666 	push	acc
      000BCB 08               [12] 2667 	inc	r0
      000BCC E6               [12] 2668 	mov	a,@r0
      000BCD C0 E0            [24] 2669 	push	acc
      000BCF 74 02            [12] 2670 	mov	a,#0x02
      000BD1 C0 E0            [24] 2671 	push	acc
      000BD3 E4               [12] 2672 	clr	a
      000BD4 C0 E0            [24] 2673 	push	acc
      000BD6 C0 02            [24] 2674 	push	ar2
      000BD8 C0 03            [24] 2675 	push	ar3
      000BDA C0 04            [24] 2676 	push	ar4
      000BDC 8D 82            [24] 2677 	mov	dpl,r5
      000BDE 8E 83            [24] 2678 	mov	dph,r6
      000BE0 8F F0            [24] 2679 	mov	b,r7
      000BE2 12r12r90         [24] 2680 	lcall	_prvReadBytesFromBuffer
      000BE5 E5 81            [12] 2681 	mov	a,sp
      000BE7 24 F9            [12] 2682 	add	a,#0xf9
      000BE9 F5 81            [12] 2683 	mov	sp,a
      000BEB D0 05            [24] 2684 	pop	ar5
      000BED D0 06            [24] 2685 	pop	ar6
      000BEF D0 07            [24] 2686 	pop	ar7
                           000BF1  2687 	C$stream_buffer.c$839$3_0$203 ==.
                                   2688 ;	src/FreeRTOS/stream_buffer.c:839: xReturn = ( size_t ) xTempReturn;
      000BF1 E5*00            [12] 2689 	mov	a,_bp
      000BF3 24 05            [12] 2690 	add	a,#0x05
      000BF5 F8               [12] 2691 	mov	r0,a
      000BF6 86 03            [24] 2692 	mov	ar3,@r0
      000BF8 08               [12] 2693 	inc	r0
      000BF9 86 04            [24] 2694 	mov	ar4,@r0
                           000BFB  2695 	C$stream_buffer.c$840$3_0$203 ==.
                                   2696 ;	src/FreeRTOS/stream_buffer.c:840: pxStreamBuffer->xTail = xOriginalTail;
      000BFB 8D 82            [24] 2697 	mov	dpl,r5
      000BFD 8E 83            [24] 2698 	mov	dph,r6
      000BFF 8F F0            [24] 2699 	mov	b,r7
      000C01 E5*00            [12] 2700 	mov	a,_bp
      000C03 24 03            [12] 2701 	add	a,#0x03
      000C05 F8               [12] 2702 	mov	r0,a
      000C06 E6               [12] 2703 	mov	a,@r0
      000C07 12r00r00         [24] 2704 	lcall	__gptrput
      000C0A A3               [24] 2705 	inc	dptr
      000C0B 08               [12] 2706 	inc	r0
      000C0C E6               [12] 2707 	mov	a,@r0
      000C0D 12r00r00         [24] 2708 	lcall	__gptrput
      000C10 80 0A            [24] 2709 	sjmp	00106$
      000C12                       2710 00102$:
                           000C12  2711 	C$stream_buffer.c$849$3_0$204 ==.
                                   2712 ;	src/FreeRTOS/stream_buffer.c:849: xReturn = 0;
      000C12 7B 00            [12] 2713 	mov	r3,#0x00
      000C14 7C 00            [12] 2714 	mov	r4,#0x00
      000C16 80 04            [24] 2715 	sjmp	00106$
      000C18                       2716 00105$:
                           000C18  2717 	C$stream_buffer.c$854$2_0$205 ==.
                                   2718 ;	src/FreeRTOS/stream_buffer.c:854: xReturn = 0;
      000C18 7B 00            [12] 2719 	mov	r3,#0x00
      000C1A 7C 00            [12] 2720 	mov	r4,#0x00
      000C1C                       2721 00106$:
                           000C1C  2722 	C$stream_buffer.c$857$1_0$201 ==.
                                   2723 ;	src/FreeRTOS/stream_buffer.c:857: return xReturn;
      000C1C 8B 82            [24] 2724 	mov	dpl,r3
      000C1E 8C 83            [24] 2725 	mov	dph,r4
                           000C20  2726 	C$stream_buffer.c$858$1_0$201 ==.
                                   2727 ;	src/FreeRTOS/stream_buffer.c:858: }
      000C20 85*00 81         [24] 2728 	mov	sp,_bp
      000C23 D0*00            [24] 2729 	pop	_bp
                           000C25  2730 	C$stream_buffer.c$858$1_0$201 ==.
                           000C25  2731 	XG$xStreamBufferNextMessageLengthBytes$0$0 ==.
      000C25 22               [24] 2732 	ret
                                   2733 ;------------------------------------------------------------
                                   2734 ;Allocation info for local variables in function 'xStreamBufferReceiveFromISR'
                                   2735 ;------------------------------------------------------------
                                   2736 ;pvRxData                  Allocated to stack - _bp -5
                                   2737 ;xBufferLengthBytes        Allocated to stack - _bp -7
                                   2738 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -10
                                   2739 ;xStreamBuffer             Allocated to registers r7 r6 r5 
                                   2740 ;pxStreamBuffer            Allocated to stack - _bp +3
                                   2741 ;xReceivedLength           Allocated to stack - _bp +1
                                   2742 ;xBytesAvailable           Allocated to registers r2 r3 
                                   2743 ;xBytesToStoreMessageLength Allocated to registers r4 r5 
                                   2744 ;uxSavedInterruptStatus    Allocated to registers 
                                   2745 ;sloc0                     Allocated to stack - _bp +1
                                   2746 ;------------------------------------------------------------
                           000C26  2747 	G$xStreamBufferReceiveFromISR$0$0 ==.
                           000C26  2748 	C$stream_buffer.c$861$1_0$207 ==.
                                   2749 ;	src/FreeRTOS/stream_buffer.c:861: size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                   2750 ;	-----------------------------------------
                                   2751 ;	 function xStreamBufferReceiveFromISR
                                   2752 ;	-----------------------------------------
      000C26                       2753 _xStreamBufferReceiveFromISR:
      000C26 C0*00            [24] 2754 	push	_bp
      000C28 E5 81            [12] 2755 	mov	a,sp
      000C2A F5*00            [12] 2756 	mov	_bp,a
      000C2C 24 05            [12] 2757 	add	a,#0x05
      000C2E F5 81            [12] 2758 	mov	sp,a
      000C30 AF 82            [24] 2759 	mov	r7,dpl
      000C32 AE 83            [24] 2760 	mov	r6,dph
      000C34 AD F0            [24] 2761 	mov	r5,b
                           000C36  2762 	C$stream_buffer.c$866$2_0$207 ==.
                                   2763 ;	src/FreeRTOS/stream_buffer.c:866: StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
      000C36 E5*00            [12] 2764 	mov	a,_bp
      000C38 24 03            [12] 2765 	add	a,#0x03
      000C3A F8               [12] 2766 	mov	r0,a
      000C3B A6 07            [24] 2767 	mov	@r0,ar7
      000C3D 08               [12] 2768 	inc	r0
      000C3E A6 06            [24] 2769 	mov	@r0,ar6
      000C40 08               [12] 2770 	inc	r0
      000C41 A6 05            [24] 2771 	mov	@r0,ar5
                           000C43  2772 	C$stream_buffer.c$867$2_0$207 ==.
                                   2773 ;	src/FreeRTOS/stream_buffer.c:867: size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
      000C43 A8*00            [24] 2774 	mov	r0,_bp
      000C45 08               [12] 2775 	inc	r0
      000C46 E4               [12] 2776 	clr	a
      000C47 F6               [12] 2777 	mov	@r0,a
      000C48 08               [12] 2778 	inc	r0
      000C49 F6               [12] 2779 	mov	@r0,a
                           000C4A  2780 	C$stream_buffer.c$877$1_0$207 ==.
                                   2781 ;	src/FreeRTOS/stream_buffer.c:877: if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
      000C4A 74 11            [12] 2782 	mov	a,#0x11
      000C4C 2F               [12] 2783 	add	a,r7
      000C4D FB               [12] 2784 	mov	r3,a
      000C4E E4               [12] 2785 	clr	a
      000C4F 3E               [12] 2786 	addc	a,r6
      000C50 FC               [12] 2787 	mov	r4,a
      000C51 8B 82            [24] 2788 	mov	dpl,r3
      000C53 8C 83            [24] 2789 	mov	dph,r4
      000C55 8D F0            [24] 2790 	mov	b,r5
      000C57 12r00r00         [24] 2791 	lcall	__gptrget
      000C5A 30 E0 06         [24] 2792 	jnb	acc.0,00102$
                           000C5D  2793 	C$stream_buffer.c$879$2_0$208 ==.
                                   2794 ;	src/FreeRTOS/stream_buffer.c:879: xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
      000C5D 7C 02            [12] 2795 	mov	r4,#0x02
      000C5F 7D 00            [12] 2796 	mov	r5,#0x00
      000C61 80 04            [24] 2797 	sjmp	00103$
      000C63                       2798 00102$:
                           000C63  2799 	C$stream_buffer.c$883$2_0$209 ==.
                                   2800 ;	src/FreeRTOS/stream_buffer.c:883: xBytesToStoreMessageLength = 0;
      000C63 7C 00            [12] 2801 	mov	r4,#0x00
      000C65 7D 00            [12] 2802 	mov	r5,#0x00
      000C67                       2803 00103$:
                           000C67  2804 	C$stream_buffer.c$886$1_0$207 ==.
                                   2805 ;	src/FreeRTOS/stream_buffer.c:886: xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
      000C67 E5*00            [12] 2806 	mov	a,_bp
      000C69 24 03            [12] 2807 	add	a,#0x03
      000C6B F8               [12] 2808 	mov	r0,a
      000C6C 86 82            [24] 2809 	mov	dpl,@r0
      000C6E 08               [12] 2810 	inc	r0
      000C6F 86 83            [24] 2811 	mov	dph,@r0
      000C71 08               [12] 2812 	inc	r0
      000C72 86 F0            [24] 2813 	mov	b,@r0
      000C74 C0 05            [24] 2814 	push	ar5
      000C76 C0 04            [24] 2815 	push	ar4
      000C78 12r14rB8         [24] 2816 	lcall	_prvBytesInBuffer
      000C7B AA 82            [24] 2817 	mov	r2,dpl
      000C7D AB 83            [24] 2818 	mov	r3,dph
      000C7F D0 04            [24] 2819 	pop	ar4
      000C81 D0 05            [24] 2820 	pop	ar5
                           000C83  2821 	C$stream_buffer.c$893$1_0$207 ==.
                                   2822 ;	src/FreeRTOS/stream_buffer.c:893: if( xBytesAvailable > xBytesToStoreMessageLength )
      000C83 C3               [12] 2823 	clr	c
      000C84 EC               [12] 2824 	mov	a,r4
      000C85 9A               [12] 2825 	subb	a,r2
      000C86 ED               [12] 2826 	mov	a,r5
      000C87 9B               [12] 2827 	subb	a,r3
      000C88 40 03            [24] 2828 	jc	00129$
      000C8A 02r0Dr6C         [24] 2829 	ljmp	00109$
      000C8D                       2830 00129$:
                           000C8D  2831 	C$stream_buffer.c$895$2_0$210 ==.
                                   2832 ;	src/FreeRTOS/stream_buffer.c:895: xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
      000C8D C0 04            [24] 2833 	push	ar4
      000C8F C0 05            [24] 2834 	push	ar5
      000C91 C0 02            [24] 2835 	push	ar2
      000C93 C0 03            [24] 2836 	push	ar3
      000C95 E5*00            [12] 2837 	mov	a,_bp
      000C97 24 F9            [12] 2838 	add	a,#0xf9
      000C99 F8               [12] 2839 	mov	r0,a
      000C9A E6               [12] 2840 	mov	a,@r0
      000C9B C0 E0            [24] 2841 	push	acc
      000C9D 08               [12] 2842 	inc	r0
      000C9E E6               [12] 2843 	mov	a,@r0
      000C9F C0 E0            [24] 2844 	push	acc
      000CA1 E5*00            [12] 2845 	mov	a,_bp
      000CA3 24 FB            [12] 2846 	add	a,#0xfb
      000CA5 F8               [12] 2847 	mov	r0,a
      000CA6 E6               [12] 2848 	mov	a,@r0
      000CA7 C0 E0            [24] 2849 	push	acc
      000CA9 08               [12] 2850 	inc	r0
      000CAA E6               [12] 2851 	mov	a,@r0
      000CAB C0 E0            [24] 2852 	push	acc
      000CAD 08               [12] 2853 	inc	r0
      000CAE E6               [12] 2854 	mov	a,@r0
      000CAF C0 E0            [24] 2855 	push	acc
      000CB1 E5*00            [12] 2856 	mov	a,_bp
      000CB3 24 03            [12] 2857 	add	a,#0x03
      000CB5 F8               [12] 2858 	mov	r0,a
      000CB6 86 82            [24] 2859 	mov	dpl,@r0
      000CB8 08               [12] 2860 	inc	r0
      000CB9 86 83            [24] 2861 	mov	dph,@r0
      000CBB 08               [12] 2862 	inc	r0
      000CBC 86 F0            [24] 2863 	mov	b,@r0
      000CBE 12r0Dr7A         [24] 2864 	lcall	_prvReadMessageFromBuffer
      000CC1 AC 82            [24] 2865 	mov	r4,dpl
      000CC3 AD 83            [24] 2866 	mov	r5,dph
      000CC5 E5 81            [12] 2867 	mov	a,sp
      000CC7 24 F7            [12] 2868 	add	a,#0xf7
      000CC9 F5 81            [12] 2869 	mov	sp,a
      000CCB A8*00            [24] 2870 	mov	r0,_bp
      000CCD 08               [12] 2871 	inc	r0
      000CCE A6 04            [24] 2872 	mov	@r0,ar4
      000CD0 08               [12] 2873 	inc	r0
      000CD1 A6 05            [24] 2874 	mov	@r0,ar5
                           000CD3  2875 	C$stream_buffer.c$898$2_0$210 ==.
                                   2876 ;	src/FreeRTOS/stream_buffer.c:898: if( xReceivedLength != ( size_t ) 0 )
      000CD3 EC               [12] 2877 	mov	a,r4
      000CD4 4D               [12] 2878 	orl	a,r5
      000CD5 70 03            [24] 2879 	jnz	00130$
      000CD7 02r0Dr6C         [24] 2880 	ljmp	00109$
      000CDA                       2881 00130$:
                           000CDA  2882 	C$stream_buffer.c$900$5_0$213 ==.
                                   2883 ;	src/FreeRTOS/stream_buffer.c:900: sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
      000CDA E5*00            [12] 2884 	mov	a,_bp
      000CDC 24 03            [12] 2885 	add	a,#0x03
      000CDE F8               [12] 2886 	mov	r0,a
      000CDF 74 0B            [12] 2887 	mov	a,#0x0b
      000CE1 26               [12] 2888 	add	a,@r0
      000CE2 FB               [12] 2889 	mov	r3,a
      000CE3 E4               [12] 2890 	clr	a
      000CE4 08               [12] 2891 	inc	r0
      000CE5 36               [12] 2892 	addc	a,@r0
      000CE6 FC               [12] 2893 	mov	r4,a
      000CE7 08               [12] 2894 	inc	r0
      000CE8 86 05            [24] 2895 	mov	ar5,@r0
      000CEA 8B 82            [24] 2896 	mov	dpl,r3
      000CEC 8C 83            [24] 2897 	mov	dph,r4
      000CEE 8D F0            [24] 2898 	mov	b,r5
      000CF0 12r00r00         [24] 2899 	lcall	__gptrget
      000CF3 FA               [12] 2900 	mov	r2,a
      000CF4 A3               [24] 2901 	inc	dptr
      000CF5 12r00r00         [24] 2902 	lcall	__gptrget
      000CF8 FE               [12] 2903 	mov	r6,a
      000CF9 A3               [24] 2904 	inc	dptr
      000CFA 12r00r00         [24] 2905 	lcall	__gptrget
      000CFD FF               [12] 2906 	mov	r7,a
      000CFE EA               [12] 2907 	mov	a,r2
      000CFF 4E               [12] 2908 	orl	a,r6
      000D00 60 6A            [24] 2909 	jz	00109$
      000D02 8B 82            [24] 2910 	mov	dpl,r3
      000D04 8C 83            [24] 2911 	mov	dph,r4
      000D06 8D F0            [24] 2912 	mov	b,r5
      000D08 12r00r00         [24] 2913 	lcall	__gptrget
      000D0B FA               [12] 2914 	mov	r2,a
      000D0C A3               [24] 2915 	inc	dptr
      000D0D 12r00r00         [24] 2916 	lcall	__gptrget
      000D10 FE               [12] 2917 	mov	r6,a
      000D11 A3               [24] 2918 	inc	dptr
      000D12 12r00r00         [24] 2919 	lcall	__gptrget
      000D15 FF               [12] 2920 	mov	r7,a
      000D16 C0 05            [24] 2921 	push	ar5
      000D18 C0 04            [24] 2922 	push	ar4
      000D1A C0 03            [24] 2923 	push	ar3
      000D1C E5*00            [12] 2924 	mov	a,_bp
      000D1E 24 F6            [12] 2925 	add	a,#0xf6
      000D20 F8               [12] 2926 	mov	r0,a
      000D21 E6               [12] 2927 	mov	a,@r0
      000D22 C0 E0            [24] 2928 	push	acc
      000D24 08               [12] 2929 	inc	r0
      000D25 E6               [12] 2930 	mov	a,@r0
      000D26 C0 E0            [24] 2931 	push	acc
      000D28 08               [12] 2932 	inc	r0
      000D29 E6               [12] 2933 	mov	a,@r0
      000D2A C0 E0            [24] 2934 	push	acc
      000D2C E4               [12] 2935 	clr	a
      000D2D C0 E0            [24] 2936 	push	acc
      000D2F C0 E0            [24] 2937 	push	acc
      000D31 C0 E0            [24] 2938 	push	acc
      000D33 C0 E0            [24] 2939 	push	acc
      000D35 C0 E0            [24] 2940 	push	acc
      000D37 C0 E0            [24] 2941 	push	acc
      000D39 C0 E0            [24] 2942 	push	acc
      000D3B C0 E0            [24] 2943 	push	acc
      000D3D 8A 82            [24] 2944 	mov	dpl,r2
      000D3F 8E 83            [24] 2945 	mov	dph,r6
      000D41 8F F0            [24] 2946 	mov	b,r7
      000D43 12r00r00         [24] 2947 	lcall	_xTaskGenericNotifyFromISR
      000D46 E5 81            [12] 2948 	mov	a,sp
      000D48 24 F5            [12] 2949 	add	a,#0xf5
      000D4A F5 81            [12] 2950 	mov	sp,a
      000D4C D0 03            [24] 2951 	pop	ar3
      000D4E D0 04            [24] 2952 	pop	ar4
      000D50 D0 05            [24] 2953 	pop	ar5
      000D52 7A 00            [12] 2954 	mov	r2,#0x00
      000D54 7E 00            [12] 2955 	mov	r6,#0x00
      000D56 7F 00            [12] 2956 	mov	r7,#0x00
      000D58 8B 82            [24] 2957 	mov	dpl,r3
      000D5A 8C 83            [24] 2958 	mov	dph,r4
      000D5C 8D F0            [24] 2959 	mov	b,r5
      000D5E EA               [12] 2960 	mov	a,r2
      000D5F 12r00r00         [24] 2961 	lcall	__gptrput
      000D62 A3               [24] 2962 	inc	dptr
      000D63 EE               [12] 2963 	mov	a,r6
      000D64 12r00r00         [24] 2964 	lcall	__gptrput
      000D67 A3               [24] 2965 	inc	dptr
      000D68 EF               [12] 2966 	mov	a,r7
      000D69 12r00r00         [24] 2967 	lcall	__gptrput
      000D6C                       2968 00109$:
                           000D6C  2969 	C$stream_buffer.c$914$1_0$207 ==.
                                   2970 ;	src/FreeRTOS/stream_buffer.c:914: return xReceivedLength;
      000D6C A8*00            [24] 2971 	mov	r0,_bp
      000D6E 08               [12] 2972 	inc	r0
      000D6F 86 82            [24] 2973 	mov	dpl,@r0
      000D71 08               [12] 2974 	inc	r0
      000D72 86 83            [24] 2975 	mov	dph,@r0
                           000D74  2976 	C$stream_buffer.c$915$1_0$207 ==.
                                   2977 ;	src/FreeRTOS/stream_buffer.c:915: }
      000D74 85*00 81         [24] 2978 	mov	sp,_bp
      000D77 D0*00            [24] 2979 	pop	_bp
                           000D79  2980 	C$stream_buffer.c$915$1_0$207 ==.
                           000D79  2981 	XG$xStreamBufferReceiveFromISR$0$0 ==.
      000D79 22               [24] 2982 	ret
                                   2983 ;------------------------------------------------------------
                                   2984 ;Allocation info for local variables in function 'prvReadMessageFromBuffer'
                                   2985 ;------------------------------------------------------------
                                   2986 ;pvRxData                  Allocated to stack - _bp -5
                                   2987 ;xBufferLengthBytes        Allocated to stack - _bp -7
                                   2988 ;xBytesAvailable           Allocated to stack - _bp -9
                                   2989 ;xBytesToStoreMessageLength Allocated to stack - _bp -11
                                   2990 ;pxStreamBuffer            Allocated to registers r5 r6 r7 
                                   2991 ;xOriginalTail             Allocated to stack - _bp +1
                                   2992 ;xReceivedLength           Allocated to registers r6 r7 
                                   2993 ;xNextMessageLength        Allocated to stack - _bp +3
                                   2994 ;xTempNextMessageLength    Allocated to stack - _bp +5
                                   2995 ;------------------------------------------------------------
                           000D7A  2996 	Fstream_buffer$prvReadMessageFromBuffer$0$0 ==.
                           000D7A  2997 	C$stream_buffer.c$918$1_0$218 ==.
                                   2998 ;	src/FreeRTOS/stream_buffer.c:918: static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
                                   2999 ;	-----------------------------------------
                                   3000 ;	 function prvReadMessageFromBuffer
                                   3001 ;	-----------------------------------------
      000D7A                       3002 _prvReadMessageFromBuffer:
      000D7A C0*00            [24] 3003 	push	_bp
      000D7C E5 81            [12] 3004 	mov	a,sp
      000D7E F5*00            [12] 3005 	mov	_bp,a
      000D80 24 06            [12] 3006 	add	a,#0x06
      000D82 F5 81            [12] 3007 	mov	sp,a
      000D84 AD 82            [24] 3008 	mov	r5,dpl
      000D86 AE 83            [24] 3009 	mov	r6,dph
      000D88 AF F0            [24] 3010 	mov	r7,b
                           000D8A  3011 	C$stream_buffer.c$927$1_0$218 ==.
                                   3012 ;	src/FreeRTOS/stream_buffer.c:927: if( xBytesToStoreMessageLength != ( size_t ) 0 )
      000D8A E5*00            [12] 3013 	mov	a,_bp
      000D8C 24 F5            [12] 3014 	add	a,#0xf5
      000D8E F8               [12] 3015 	mov	r0,a
      000D8F E6               [12] 3016 	mov	a,@r0
      000D90 08               [12] 3017 	inc	r0
      000D91 46               [12] 3018 	orl	a,@r0
      000D92 70 03            [24] 3019 	jnz	00116$
      000D94 02r0Er40         [24] 3020 	ljmp	00104$
      000D97                       3021 00116$:
                           000D97  3022 	C$stream_buffer.c$933$2_0$219 ==.
                                   3023 ;	src/FreeRTOS/stream_buffer.c:933: xOriginalTail = pxStreamBuffer->xTail;
      000D97 8D 82            [24] 3024 	mov	dpl,r5
      000D99 8E 83            [24] 3025 	mov	dph,r6
      000D9B 8F F0            [24] 3026 	mov	b,r7
      000D9D A8*00            [24] 3027 	mov	r0,_bp
      000D9F 08               [12] 3028 	inc	r0
      000DA0 12r00r00         [24] 3029 	lcall	__gptrget
      000DA3 F6               [12] 3030 	mov	@r0,a
      000DA4 A3               [24] 3031 	inc	dptr
      000DA5 12r00r00         [24] 3032 	lcall	__gptrget
      000DA8 08               [12] 3033 	inc	r0
      000DA9 F6               [12] 3034 	mov	@r0,a
                           000DAA  3035 	C$stream_buffer.c$934$2_0$219 ==.
                                   3036 ;	src/FreeRTOS/stream_buffer.c:934: ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
      000DAA E5*00            [12] 3037 	mov	a,_bp
      000DAC 24 05            [12] 3038 	add	a,#0x05
      000DAE FA               [12] 3039 	mov	r2,a
      000DAF 7B 00            [12] 3040 	mov	r3,#0x00
      000DB1 7C 40            [12] 3041 	mov	r4,#0x40
      000DB3 C0 07            [24] 3042 	push	ar7
      000DB5 C0 06            [24] 3043 	push	ar6
      000DB7 C0 05            [24] 3044 	push	ar5
      000DB9 E5*00            [12] 3045 	mov	a,_bp
      000DBB 24 F7            [12] 3046 	add	a,#0xf7
      000DBD F8               [12] 3047 	mov	r0,a
      000DBE E6               [12] 3048 	mov	a,@r0
      000DBF C0 E0            [24] 3049 	push	acc
      000DC1 08               [12] 3050 	inc	r0
      000DC2 E6               [12] 3051 	mov	a,@r0
      000DC3 C0 E0            [24] 3052 	push	acc
      000DC5 E5*00            [12] 3053 	mov	a,_bp
      000DC7 24 F5            [12] 3054 	add	a,#0xf5
      000DC9 F8               [12] 3055 	mov	r0,a
      000DCA E6               [12] 3056 	mov	a,@r0
      000DCB C0 E0            [24] 3057 	push	acc
      000DCD 08               [12] 3058 	inc	r0
      000DCE E6               [12] 3059 	mov	a,@r0
      000DCF C0 E0            [24] 3060 	push	acc
      000DD1 C0 02            [24] 3061 	push	ar2
      000DD3 C0 03            [24] 3062 	push	ar3
      000DD5 C0 04            [24] 3063 	push	ar4
      000DD7 8D 82            [24] 3064 	mov	dpl,r5
      000DD9 8E 83            [24] 3065 	mov	dph,r6
      000DDB 8F F0            [24] 3066 	mov	b,r7
      000DDD 12r12r90         [24] 3067 	lcall	_prvReadBytesFromBuffer
      000DE0 E5 81            [12] 3068 	mov	a,sp
      000DE2 24 F9            [12] 3069 	add	a,#0xf9
      000DE4 F5 81            [12] 3070 	mov	sp,a
      000DE6 D0 05            [24] 3071 	pop	ar5
      000DE8 D0 06            [24] 3072 	pop	ar6
      000DEA D0 07            [24] 3073 	pop	ar7
                           000DEC  3074 	C$stream_buffer.c$935$2_0$219 ==.
                                   3075 ;	src/FreeRTOS/stream_buffer.c:935: xNextMessageLength = ( size_t ) xTempNextMessageLength;
      000DEC E5*00            [12] 3076 	mov	a,_bp
      000DEE 24 05            [12] 3077 	add	a,#0x05
      000DF0 F8               [12] 3078 	mov	r0,a
      000DF1 E5*00            [12] 3079 	mov	a,_bp
      000DF3 24 03            [12] 3080 	add	a,#0x03
      000DF5 F9               [12] 3081 	mov	r1,a
      000DF6 E6               [12] 3082 	mov	a,@r0
      000DF7 F7               [12] 3083 	mov	@r1,a
      000DF8 08               [12] 3084 	inc	r0
      000DF9 09               [12] 3085 	inc	r1
      000DFA E6               [12] 3086 	mov	a,@r0
      000DFB F7               [12] 3087 	mov	@r1,a
                           000DFC  3088 	C$stream_buffer.c$939$2_0$219 ==.
                                   3089 ;	src/FreeRTOS/stream_buffer.c:939: xBytesAvailable -= xBytesToStoreMessageLength;
      000DFC E5*00            [12] 3090 	mov	a,_bp
      000DFE 24 F7            [12] 3091 	add	a,#0xf7
      000E00 F8               [12] 3092 	mov	r0,a
      000E01 E5*00            [12] 3093 	mov	a,_bp
      000E03 24 F5            [12] 3094 	add	a,#0xf5
      000E05 F9               [12] 3095 	mov	r1,a
      000E06 E6               [12] 3096 	mov	a,@r0
      000E07 C3               [12] 3097 	clr	c
      000E08 97               [12] 3098 	subb	a,@r1
      000E09 F6               [12] 3099 	mov	@r0,a
      000E0A 08               [12] 3100 	inc	r0
      000E0B E6               [12] 3101 	mov	a,@r0
      000E0C 09               [12] 3102 	inc	r1
      000E0D 97               [12] 3103 	subb	a,@r1
      000E0E F6               [12] 3104 	mov	@r0,a
                           000E0F  3105 	C$stream_buffer.c$943$2_0$219 ==.
                                   3106 ;	src/FreeRTOS/stream_buffer.c:943: if( xNextMessageLength > xBufferLengthBytes )
      000E0F E5*00            [12] 3107 	mov	a,_bp
      000E11 24 03            [12] 3108 	add	a,#0x03
      000E13 F8               [12] 3109 	mov	r0,a
      000E14 E5*00            [12] 3110 	mov	a,_bp
      000E16 24 F9            [12] 3111 	add	a,#0xf9
      000E18 F9               [12] 3112 	mov	r1,a
      000E19 C3               [12] 3113 	clr	c
      000E1A E7               [12] 3114 	mov	a,@r1
      000E1B 96               [12] 3115 	subb	a,@r0
      000E1C 09               [12] 3116 	inc	r1
      000E1D E7               [12] 3117 	mov	a,@r1
      000E1E 08               [12] 3118 	inc	r0
      000E1F 96               [12] 3119 	subb	a,@r0
      000E20 50 2E            [24] 3120 	jnc	00105$
                           000E22  3121 	C$stream_buffer.c$948$3_0$220 ==.
                                   3122 ;	src/FreeRTOS/stream_buffer.c:948: pxStreamBuffer->xTail = xOriginalTail;
      000E22 8D 82            [24] 3123 	mov	dpl,r5
      000E24 8E 83            [24] 3124 	mov	dph,r6
      000E26 8F F0            [24] 3125 	mov	b,r7
      000E28 A8*00            [24] 3126 	mov	r0,_bp
      000E2A 08               [12] 3127 	inc	r0
      000E2B E6               [12] 3128 	mov	a,@r0
      000E2C 12r00r00         [24] 3129 	lcall	__gptrput
      000E2F A3               [24] 3130 	inc	dptr
      000E30 08               [12] 3131 	inc	r0
      000E31 E6               [12] 3132 	mov	a,@r0
      000E32 12r00r00         [24] 3133 	lcall	__gptrput
                           000E35  3134 	C$stream_buffer.c$949$3_0$220 ==.
                                   3135 ;	src/FreeRTOS/stream_buffer.c:949: xNextMessageLength = 0;
      000E35 E5*00            [12] 3136 	mov	a,_bp
      000E37 24 03            [12] 3137 	add	a,#0x03
      000E39 F8               [12] 3138 	mov	r0,a
      000E3A E4               [12] 3139 	clr	a
      000E3B F6               [12] 3140 	mov	@r0,a
      000E3C 08               [12] 3141 	inc	r0
      000E3D F6               [12] 3142 	mov	@r0,a
      000E3E 80 10            [24] 3143 	sjmp	00105$
      000E40                       3144 00104$:
                           000E40  3145 	C$stream_buffer.c$960$2_0$222 ==.
                                   3146 ;	src/FreeRTOS/stream_buffer.c:960: xNextMessageLength = xBufferLengthBytes;
      000E40 E5*00            [12] 3147 	mov	a,_bp
      000E42 24 F9            [12] 3148 	add	a,#0xf9
      000E44 F8               [12] 3149 	mov	r0,a
      000E45 E5*00            [12] 3150 	mov	a,_bp
      000E47 24 03            [12] 3151 	add	a,#0x03
      000E49 F9               [12] 3152 	mov	r1,a
      000E4A E6               [12] 3153 	mov	a,@r0
      000E4B F7               [12] 3154 	mov	@r1,a
      000E4C 08               [12] 3155 	inc	r0
      000E4D 09               [12] 3156 	inc	r1
      000E4E E6               [12] 3157 	mov	a,@r0
      000E4F F7               [12] 3158 	mov	@r1,a
      000E50                       3159 00105$:
                           000E50  3160 	C$stream_buffer.c$964$1_0$218 ==.
                                   3161 ;	src/FreeRTOS/stream_buffer.c:964: xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
      000E50 E5*00            [12] 3162 	mov	a,_bp
      000E52 24 FB            [12] 3163 	add	a,#0xfb
      000E54 F8               [12] 3164 	mov	r0,a
      000E55 86 02            [24] 3165 	mov	ar2,@r0
      000E57 08               [12] 3166 	inc	r0
      000E58 86 03            [24] 3167 	mov	ar3,@r0
      000E5A 08               [12] 3168 	inc	r0
      000E5B 86 04            [24] 3169 	mov	ar4,@r0
      000E5D E5*00            [12] 3170 	mov	a,_bp
      000E5F 24 F7            [12] 3171 	add	a,#0xf7
      000E61 F8               [12] 3172 	mov	r0,a
      000E62 E6               [12] 3173 	mov	a,@r0
      000E63 C0 E0            [24] 3174 	push	acc
      000E65 08               [12] 3175 	inc	r0
      000E66 E6               [12] 3176 	mov	a,@r0
      000E67 C0 E0            [24] 3177 	push	acc
      000E69 E5*00            [12] 3178 	mov	a,_bp
      000E6B 24 03            [12] 3179 	add	a,#0x03
      000E6D F8               [12] 3180 	mov	r0,a
      000E6E E6               [12] 3181 	mov	a,@r0
      000E6F C0 E0            [24] 3182 	push	acc
      000E71 08               [12] 3183 	inc	r0
      000E72 E6               [12] 3184 	mov	a,@r0
      000E73 C0 E0            [24] 3185 	push	acc
      000E75 C0 02            [24] 3186 	push	ar2
      000E77 C0 03            [24] 3187 	push	ar3
      000E79 C0 04            [24] 3188 	push	ar4
      000E7B 8D 82            [24] 3189 	mov	dpl,r5
      000E7D 8E 83            [24] 3190 	mov	dph,r6
      000E7F 8F F0            [24] 3191 	mov	b,r7
      000E81 12r12r90         [24] 3192 	lcall	_prvReadBytesFromBuffer
      000E84 AE 82            [24] 3193 	mov	r6,dpl
      000E86 AF 83            [24] 3194 	mov	r7,dph
      000E88 E5 81            [12] 3195 	mov	a,sp
      000E8A 24 F9            [12] 3196 	add	a,#0xf9
      000E8C F5 81            [12] 3197 	mov	sp,a
                           000E8E  3198 	C$stream_buffer.c$966$1_0$218 ==.
                                   3199 ;	src/FreeRTOS/stream_buffer.c:966: return xReceivedLength;
      000E8E 8E 82            [24] 3200 	mov	dpl,r6
      000E90 8F 83            [24] 3201 	mov	dph,r7
                           000E92  3202 	C$stream_buffer.c$967$1_0$218 ==.
                                   3203 ;	src/FreeRTOS/stream_buffer.c:967: }
      000E92 85*00 81         [24] 3204 	mov	sp,_bp
      000E95 D0*00            [24] 3205 	pop	_bp
                           000E97  3206 	C$stream_buffer.c$967$1_0$218 ==.
                           000E97  3207 	XFstream_buffer$prvReadMessageFromBuffer$0$0 ==.
      000E97 22               [24] 3208 	ret
                                   3209 ;------------------------------------------------------------
                                   3210 ;Allocation info for local variables in function 'xStreamBufferIsEmpty'
                                   3211 ;------------------------------------------------------------
                                   3212 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   3213 ;pxStreamBuffer            Allocated to registers 
                                   3214 ;xReturn                   Allocated to registers r7 
                                   3215 ;xTail                     Allocated to registers r3 r4 
                                   3216 ;------------------------------------------------------------
                           000E98  3217 	G$xStreamBufferIsEmpty$0$0 ==.
                           000E98  3218 	C$stream_buffer.c$970$1_0$224 ==.
                                   3219 ;	src/FreeRTOS/stream_buffer.c:970: BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
                                   3220 ;	-----------------------------------------
                                   3221 ;	 function xStreamBufferIsEmpty
                                   3222 ;	-----------------------------------------
      000E98                       3223 _xStreamBufferIsEmpty:
                           000E98  3224 	C$stream_buffer.c$979$1_0$224 ==.
                                   3225 ;	src/FreeRTOS/stream_buffer.c:979: xTail = pxStreamBuffer->xTail;
      000E98 AD 82            [24] 3226 	mov	r5,dpl
      000E9A AE 83            [24] 3227 	mov	r6,dph
      000E9C AF F0            [24] 3228 	mov	r7,b
      000E9E 12r00r00         [24] 3229 	lcall	__gptrget
      000EA1 FB               [12] 3230 	mov	r3,a
      000EA2 A3               [24] 3231 	inc	dptr
      000EA3 12r00r00         [24] 3232 	lcall	__gptrget
      000EA6 FC               [12] 3233 	mov	r4,a
                           000EA7  3234 	C$stream_buffer.c$980$1_0$224 ==.
                                   3235 ;	src/FreeRTOS/stream_buffer.c:980: if( pxStreamBuffer->xHead == xTail )
      000EA7 74 02            [12] 3236 	mov	a,#0x02
      000EA9 2D               [12] 3237 	add	a,r5
      000EAA FD               [12] 3238 	mov	r5,a
      000EAB E4               [12] 3239 	clr	a
      000EAC 3E               [12] 3240 	addc	a,r6
      000EAD FE               [12] 3241 	mov	r6,a
      000EAE 8D 82            [24] 3242 	mov	dpl,r5
      000EB0 8E 83            [24] 3243 	mov	dph,r6
      000EB2 8F F0            [24] 3244 	mov	b,r7
      000EB4 12r00r00         [24] 3245 	lcall	__gptrget
      000EB7 FD               [12] 3246 	mov	r5,a
      000EB8 A3               [24] 3247 	inc	dptr
      000EB9 12r00r00         [24] 3248 	lcall	__gptrget
      000EBC FE               [12] 3249 	mov	r6,a
      000EBD ED               [12] 3250 	mov	a,r5
      000EBE B5 03 08         [24] 3251 	cjne	a,ar3,00102$
      000EC1 EE               [12] 3252 	mov	a,r6
      000EC2 B5 04 04         [24] 3253 	cjne	a,ar4,00102$
                           000EC5  3254 	C$stream_buffer.c$982$2_0$225 ==.
                                   3255 ;	src/FreeRTOS/stream_buffer.c:982: xReturn = pdTRUE;
      000EC5 7F 01            [12] 3256 	mov	r7,#0x01
      000EC7 80 02            [24] 3257 	sjmp	00103$
      000EC9                       3258 00102$:
                           000EC9  3259 	C$stream_buffer.c$986$2_0$226 ==.
                                   3260 ;	src/FreeRTOS/stream_buffer.c:986: xReturn = pdFALSE;
      000EC9 7F 00            [12] 3261 	mov	r7,#0x00
      000ECB                       3262 00103$:
                           000ECB  3263 	C$stream_buffer.c$989$1_0$224 ==.
                                   3264 ;	src/FreeRTOS/stream_buffer.c:989: return xReturn;
      000ECB 8F 82            [24] 3265 	mov	dpl,r7
                           000ECD  3266 	C$stream_buffer.c$990$1_0$224 ==.
                                   3267 ;	src/FreeRTOS/stream_buffer.c:990: }
                           000ECD  3268 	C$stream_buffer.c$990$1_0$224 ==.
                           000ECD  3269 	XG$xStreamBufferIsEmpty$0$0 ==.
      000ECD 22               [24] 3270 	ret
                                   3271 ;------------------------------------------------------------
                                   3272 ;Allocation info for local variables in function 'xStreamBufferIsFull'
                                   3273 ;------------------------------------------------------------
                                   3274 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   3275 ;xReturn                   Allocated to registers r7 
                                   3276 ;xBytesToStoreMessageLength Allocated to registers r3 r4 
                                   3277 ;pxStreamBuffer            Allocated to registers 
                                   3278 ;------------------------------------------------------------
                           000ECE  3279 	G$xStreamBufferIsFull$0$0 ==.
                           000ECE  3280 	C$stream_buffer.c$993$1_0$228 ==.
                                   3281 ;	src/FreeRTOS/stream_buffer.c:993: BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
                                   3282 ;	-----------------------------------------
                                   3283 ;	 function xStreamBufferIsFull
                                   3284 ;	-----------------------------------------
      000ECE                       3285 _xStreamBufferIsFull:
      000ECE AD 82            [24] 3286 	mov	r5,dpl
      000ED0 AE 83            [24] 3287 	mov	r6,dph
      000ED2 AF F0            [24] 3288 	mov	r7,b
                           000ED4  3289 	C$stream_buffer.c$1005$1_0$228 ==.
                                   3290 ;	src/FreeRTOS/stream_buffer.c:1005: if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
      000ED4 74 11            [12] 3291 	mov	a,#0x11
      000ED6 2D               [12] 3292 	add	a,r5
      000ED7 FA               [12] 3293 	mov	r2,a
      000ED8 E4               [12] 3294 	clr	a
      000ED9 3E               [12] 3295 	addc	a,r6
      000EDA FB               [12] 3296 	mov	r3,a
      000EDB 8F 04            [24] 3297 	mov	ar4,r7
      000EDD 8A 82            [24] 3298 	mov	dpl,r2
      000EDF 8B 83            [24] 3299 	mov	dph,r3
      000EE1 8C F0            [24] 3300 	mov	b,r4
      000EE3 12r00r00         [24] 3301 	lcall	__gptrget
      000EE6 30 E0 06         [24] 3302 	jnb	acc.0,00102$
                           000EE9  3303 	C$stream_buffer.c$1007$2_0$229 ==.
                                   3304 ;	src/FreeRTOS/stream_buffer.c:1007: xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
      000EE9 7B 02            [12] 3305 	mov	r3,#0x02
      000EEB 7C 00            [12] 3306 	mov	r4,#0x00
      000EED 80 04            [24] 3307 	sjmp	00103$
      000EEF                       3308 00102$:
                           000EEF  3309 	C$stream_buffer.c$1011$2_0$230 ==.
                                   3310 ;	src/FreeRTOS/stream_buffer.c:1011: xBytesToStoreMessageLength = 0;
      000EEF 7B 00            [12] 3311 	mov	r3,#0x00
      000EF1 7C 00            [12] 3312 	mov	r4,#0x00
      000EF3                       3313 00103$:
                           000EF3  3314 	C$stream_buffer.c$1015$1_0$228 ==.
                                   3315 ;	src/FreeRTOS/stream_buffer.c:1015: if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
      000EF3 8D 82            [24] 3316 	mov	dpl,r5
      000EF5 8E 83            [24] 3317 	mov	dph,r6
      000EF7 8F F0            [24] 3318 	mov	b,r7
      000EF9 C0 04            [24] 3319 	push	ar4
      000EFB C0 03            [24] 3320 	push	ar3
      000EFD 12r02rC2         [24] 3321 	lcall	_xStreamBufferSpacesAvailable
      000F00 AE 82            [24] 3322 	mov	r6,dpl
      000F02 AF 83            [24] 3323 	mov	r7,dph
      000F04 D0 03            [24] 3324 	pop	ar3
      000F06 D0 04            [24] 3325 	pop	ar4
      000F08 C3               [12] 3326 	clr	c
      000F09 EB               [12] 3327 	mov	a,r3
      000F0A 9E               [12] 3328 	subb	a,r6
      000F0B EC               [12] 3329 	mov	a,r4
      000F0C 9F               [12] 3330 	subb	a,r7
      000F0D 40 04            [24] 3331 	jc	00105$
                           000F0F  3332 	C$stream_buffer.c$1017$2_0$231 ==.
                                   3333 ;	src/FreeRTOS/stream_buffer.c:1017: xReturn = pdTRUE;
      000F0F 7F 01            [12] 3334 	mov	r7,#0x01
      000F11 80 02            [24] 3335 	sjmp	00106$
      000F13                       3336 00105$:
                           000F13  3337 	C$stream_buffer.c$1021$2_0$232 ==.
                                   3338 ;	src/FreeRTOS/stream_buffer.c:1021: xReturn = pdFALSE;
      000F13 7F 00            [12] 3339 	mov	r7,#0x00
      000F15                       3340 00106$:
                           000F15  3341 	C$stream_buffer.c$1024$1_0$228 ==.
                                   3342 ;	src/FreeRTOS/stream_buffer.c:1024: return xReturn;
      000F15 8F 82            [24] 3343 	mov	dpl,r7
                           000F17  3344 	C$stream_buffer.c$1025$1_0$228 ==.
                                   3345 ;	src/FreeRTOS/stream_buffer.c:1025: }
                           000F17  3346 	C$stream_buffer.c$1025$1_0$228 ==.
                           000F17  3347 	XG$xStreamBufferIsFull$0$0 ==.
      000F17 22               [24] 3348 	ret
                                   3349 ;------------------------------------------------------------
                                   3350 ;Allocation info for local variables in function 'xStreamBufferSendCompletedFromISR'
                                   3351 ;------------------------------------------------------------
                                   3352 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -5
                                   3353 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   3354 ;pxStreamBuffer            Allocated to registers 
                                   3355 ;xReturn                   Allocated to registers r7 
                                   3356 ;uxSavedInterruptStatus    Allocated to registers 
                                   3357 ;------------------------------------------------------------
                           000F18  3358 	G$xStreamBufferSendCompletedFromISR$0$0 ==.
                           000F18  3359 	C$stream_buffer.c$1028$1_0$234 ==.
                                   3360 ;	src/FreeRTOS/stream_buffer.c:1028: BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
                                   3361 ;	-----------------------------------------
                                   3362 ;	 function xStreamBufferSendCompletedFromISR
                                   3363 ;	-----------------------------------------
      000F18                       3364 _xStreamBufferSendCompletedFromISR:
      000F18 C0*00            [24] 3365 	push	_bp
      000F1A 85 81*00         [24] 3366 	mov	_bp,sp
      000F1D AD 82            [24] 3367 	mov	r5,dpl
      000F1F AE 83            [24] 3368 	mov	r6,dph
      000F21 AF F0            [24] 3369 	mov	r7,b
                           000F23  3370 	C$stream_buffer.c$1038$2_0$235 ==.
                                   3371 ;	src/FreeRTOS/stream_buffer.c:1038: if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
      000F23 74 08            [12] 3372 	mov	a,#0x08
      000F25 2D               [12] 3373 	add	a,r5
      000F26 FD               [12] 3374 	mov	r5,a
      000F27 E4               [12] 3375 	clr	a
      000F28 3E               [12] 3376 	addc	a,r6
      000F29 FE               [12] 3377 	mov	r6,a
      000F2A 8D 82            [24] 3378 	mov	dpl,r5
      000F2C 8E 83            [24] 3379 	mov	dph,r6
      000F2E 8F F0            [24] 3380 	mov	b,r7
      000F30 12r00r00         [24] 3381 	lcall	__gptrget
      000F33 FA               [12] 3382 	mov	r2,a
      000F34 A3               [24] 3383 	inc	dptr
      000F35 12r00r00         [24] 3384 	lcall	__gptrget
      000F38 FB               [12] 3385 	mov	r3,a
      000F39 A3               [24] 3386 	inc	dptr
      000F3A 12r00r00         [24] 3387 	lcall	__gptrget
      000F3D FC               [12] 3388 	mov	r4,a
      000F3E EA               [12] 3389 	mov	a,r2
      000F3F 4B               [12] 3390 	orl	a,r3
      000F40 60 6E            [24] 3391 	jz	00102$
                           000F42  3392 	C$stream_buffer.c$1040$3_0$236 ==.
                                   3393 ;	src/FreeRTOS/stream_buffer.c:1040: ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
      000F42 8D 82            [24] 3394 	mov	dpl,r5
      000F44 8E 83            [24] 3395 	mov	dph,r6
      000F46 8F F0            [24] 3396 	mov	b,r7
      000F48 12r00r00         [24] 3397 	lcall	__gptrget
      000F4B FA               [12] 3398 	mov	r2,a
      000F4C A3               [24] 3399 	inc	dptr
      000F4D 12r00r00         [24] 3400 	lcall	__gptrget
      000F50 FB               [12] 3401 	mov	r3,a
      000F51 A3               [24] 3402 	inc	dptr
      000F52 12r00r00         [24] 3403 	lcall	__gptrget
      000F55 FC               [12] 3404 	mov	r4,a
      000F56 C0 07            [24] 3405 	push	ar7
      000F58 C0 06            [24] 3406 	push	ar6
      000F5A C0 05            [24] 3407 	push	ar5
      000F5C E5*00            [12] 3408 	mov	a,_bp
      000F5E 24 FB            [12] 3409 	add	a,#0xfb
      000F60 F8               [12] 3410 	mov	r0,a
      000F61 E6               [12] 3411 	mov	a,@r0
      000F62 C0 E0            [24] 3412 	push	acc
      000F64 08               [12] 3413 	inc	r0
      000F65 E6               [12] 3414 	mov	a,@r0
      000F66 C0 E0            [24] 3415 	push	acc
      000F68 08               [12] 3416 	inc	r0
      000F69 E6               [12] 3417 	mov	a,@r0
      000F6A C0 E0            [24] 3418 	push	acc
      000F6C E4               [12] 3419 	clr	a
      000F6D C0 E0            [24] 3420 	push	acc
      000F6F C0 E0            [24] 3421 	push	acc
      000F71 C0 E0            [24] 3422 	push	acc
      000F73 C0 E0            [24] 3423 	push	acc
      000F75 C0 E0            [24] 3424 	push	acc
      000F77 C0 E0            [24] 3425 	push	acc
      000F79 C0 E0            [24] 3426 	push	acc
      000F7B C0 E0            [24] 3427 	push	acc
      000F7D 8A 82            [24] 3428 	mov	dpl,r2
      000F7F 8B 83            [24] 3429 	mov	dph,r3
      000F81 8C F0            [24] 3430 	mov	b,r4
      000F83 12r00r00         [24] 3431 	lcall	_xTaskGenericNotifyFromISR
      000F86 E5 81            [12] 3432 	mov	a,sp
      000F88 24 F5            [12] 3433 	add	a,#0xf5
      000F8A F5 81            [12] 3434 	mov	sp,a
      000F8C D0 05            [24] 3435 	pop	ar5
      000F8E D0 06            [24] 3436 	pop	ar6
      000F90 D0 07            [24] 3437 	pop	ar7
                           000F92  3438 	C$stream_buffer.c$1044$3_0$236 ==.
                                   3439 ;	src/FreeRTOS/stream_buffer.c:1044: ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
      000F92 7A 00            [12] 3440 	mov	r2,#0x00
      000F94 7B 00            [12] 3441 	mov	r3,#0x00
      000F96 7C 00            [12] 3442 	mov	r4,#0x00
      000F98 8D 82            [24] 3443 	mov	dpl,r5
      000F9A 8E 83            [24] 3444 	mov	dph,r6
      000F9C 8F F0            [24] 3445 	mov	b,r7
      000F9E EA               [12] 3446 	mov	a,r2
      000F9F 12r00r00         [24] 3447 	lcall	__gptrput
      000FA2 A3               [24] 3448 	inc	dptr
      000FA3 EB               [12] 3449 	mov	a,r3
      000FA4 12r00r00         [24] 3450 	lcall	__gptrput
      000FA7 A3               [24] 3451 	inc	dptr
      000FA8 EC               [12] 3452 	mov	a,r4
      000FA9 12r00r00         [24] 3453 	lcall	__gptrput
                           000FAC  3454 	C$stream_buffer.c$1045$3_0$236 ==.
                                   3455 ;	src/FreeRTOS/stream_buffer.c:1045: xReturn = pdTRUE;
      000FAC 7F 01            [12] 3456 	mov	r7,#0x01
      000FAE 80 02            [24] 3457 	sjmp	00103$
      000FB0                       3458 00102$:
                           000FB0  3459 	C$stream_buffer.c$1049$3_0$237 ==.
                                   3460 ;	src/FreeRTOS/stream_buffer.c:1049: xReturn = pdFALSE;
      000FB0 7F 00            [12] 3461 	mov	r7,#0x00
      000FB2                       3462 00103$:
                           000FB2  3463 	C$stream_buffer.c$1054$1_0$234 ==.
                                   3464 ;	src/FreeRTOS/stream_buffer.c:1054: return xReturn;
      000FB2 8F 82            [24] 3465 	mov	dpl,r7
                           000FB4  3466 	C$stream_buffer.c$1055$1_0$234 ==.
                                   3467 ;	src/FreeRTOS/stream_buffer.c:1055: }
      000FB4 D0*00            [24] 3468 	pop	_bp
                           000FB6  3469 	C$stream_buffer.c$1055$1_0$234 ==.
                           000FB6  3470 	XG$xStreamBufferSendCompletedFromISR$0$0 ==.
      000FB6 22               [24] 3471 	ret
                                   3472 ;------------------------------------------------------------
                                   3473 ;Allocation info for local variables in function 'xStreamBufferReceiveCompletedFromISR'
                                   3474 ;------------------------------------------------------------
                                   3475 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -5
                                   3476 ;xStreamBuffer             Allocated to registers r5 r6 r7 
                                   3477 ;pxStreamBuffer            Allocated to registers 
                                   3478 ;xReturn                   Allocated to registers r7 
                                   3479 ;uxSavedInterruptStatus    Allocated to registers 
                                   3480 ;------------------------------------------------------------
                           000FB7  3481 	G$xStreamBufferReceiveCompletedFromISR$0$0 ==.
                           000FB7  3482 	C$stream_buffer.c$1058$1_0$239 ==.
                                   3483 ;	src/FreeRTOS/stream_buffer.c:1058: BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
                                   3484 ;	-----------------------------------------
                                   3485 ;	 function xStreamBufferReceiveCompletedFromISR
                                   3486 ;	-----------------------------------------
      000FB7                       3487 _xStreamBufferReceiveCompletedFromISR:
      000FB7 C0*00            [24] 3488 	push	_bp
      000FB9 85 81*00         [24] 3489 	mov	_bp,sp
      000FBC AD 82            [24] 3490 	mov	r5,dpl
      000FBE AE 83            [24] 3491 	mov	r6,dph
      000FC0 AF F0            [24] 3492 	mov	r7,b
                           000FC2  3493 	C$stream_buffer.c$1068$2_0$240 ==.
                                   3494 ;	src/FreeRTOS/stream_buffer.c:1068: if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
      000FC2 74 0B            [12] 3495 	mov	a,#0x0b
      000FC4 2D               [12] 3496 	add	a,r5
      000FC5 FD               [12] 3497 	mov	r5,a
      000FC6 E4               [12] 3498 	clr	a
      000FC7 3E               [12] 3499 	addc	a,r6
      000FC8 FE               [12] 3500 	mov	r6,a
      000FC9 8D 82            [24] 3501 	mov	dpl,r5
      000FCB 8E 83            [24] 3502 	mov	dph,r6
      000FCD 8F F0            [24] 3503 	mov	b,r7
      000FCF 12r00r00         [24] 3504 	lcall	__gptrget
      000FD2 FA               [12] 3505 	mov	r2,a
      000FD3 A3               [24] 3506 	inc	dptr
      000FD4 12r00r00         [24] 3507 	lcall	__gptrget
      000FD7 FB               [12] 3508 	mov	r3,a
      000FD8 A3               [24] 3509 	inc	dptr
      000FD9 12r00r00         [24] 3510 	lcall	__gptrget
      000FDC FC               [12] 3511 	mov	r4,a
      000FDD EA               [12] 3512 	mov	a,r2
      000FDE 4B               [12] 3513 	orl	a,r3
      000FDF 60 6E            [24] 3514 	jz	00102$
                           000FE1  3515 	C$stream_buffer.c$1070$3_0$241 ==.
                                   3516 ;	src/FreeRTOS/stream_buffer.c:1070: ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
      000FE1 8D 82            [24] 3517 	mov	dpl,r5
      000FE3 8E 83            [24] 3518 	mov	dph,r6
      000FE5 8F F0            [24] 3519 	mov	b,r7
      000FE7 12r00r00         [24] 3520 	lcall	__gptrget
      000FEA FA               [12] 3521 	mov	r2,a
      000FEB A3               [24] 3522 	inc	dptr
      000FEC 12r00r00         [24] 3523 	lcall	__gptrget
      000FEF FB               [12] 3524 	mov	r3,a
      000FF0 A3               [24] 3525 	inc	dptr
      000FF1 12r00r00         [24] 3526 	lcall	__gptrget
      000FF4 FC               [12] 3527 	mov	r4,a
      000FF5 C0 07            [24] 3528 	push	ar7
      000FF7 C0 06            [24] 3529 	push	ar6
      000FF9 C0 05            [24] 3530 	push	ar5
      000FFB E5*00            [12] 3531 	mov	a,_bp
      000FFD 24 FB            [12] 3532 	add	a,#0xfb
      000FFF F8               [12] 3533 	mov	r0,a
      001000 E6               [12] 3534 	mov	a,@r0
      001001 C0 E0            [24] 3535 	push	acc
      001003 08               [12] 3536 	inc	r0
      001004 E6               [12] 3537 	mov	a,@r0
      001005 C0 E0            [24] 3538 	push	acc
      001007 08               [12] 3539 	inc	r0
      001008 E6               [12] 3540 	mov	a,@r0
      001009 C0 E0            [24] 3541 	push	acc
      00100B E4               [12] 3542 	clr	a
      00100C C0 E0            [24] 3543 	push	acc
      00100E C0 E0            [24] 3544 	push	acc
      001010 C0 E0            [24] 3545 	push	acc
      001012 C0 E0            [24] 3546 	push	acc
      001014 C0 E0            [24] 3547 	push	acc
      001016 C0 E0            [24] 3548 	push	acc
      001018 C0 E0            [24] 3549 	push	acc
      00101A C0 E0            [24] 3550 	push	acc
      00101C 8A 82            [24] 3551 	mov	dpl,r2
      00101E 8B 83            [24] 3552 	mov	dph,r3
      001020 8C F0            [24] 3553 	mov	b,r4
      001022 12r00r00         [24] 3554 	lcall	_xTaskGenericNotifyFromISR
      001025 E5 81            [12] 3555 	mov	a,sp
      001027 24 F5            [12] 3556 	add	a,#0xf5
      001029 F5 81            [12] 3557 	mov	sp,a
      00102B D0 05            [24] 3558 	pop	ar5
      00102D D0 06            [24] 3559 	pop	ar6
      00102F D0 07            [24] 3560 	pop	ar7
                           001031  3561 	C$stream_buffer.c$1074$3_0$241 ==.
                                   3562 ;	src/FreeRTOS/stream_buffer.c:1074: ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
      001031 7A 00            [12] 3563 	mov	r2,#0x00
      001033 7B 00            [12] 3564 	mov	r3,#0x00
      001035 7C 00            [12] 3565 	mov	r4,#0x00
      001037 8D 82            [24] 3566 	mov	dpl,r5
      001039 8E 83            [24] 3567 	mov	dph,r6
      00103B 8F F0            [24] 3568 	mov	b,r7
      00103D EA               [12] 3569 	mov	a,r2
      00103E 12r00r00         [24] 3570 	lcall	__gptrput
      001041 A3               [24] 3571 	inc	dptr
      001042 EB               [12] 3572 	mov	a,r3
      001043 12r00r00         [24] 3573 	lcall	__gptrput
      001046 A3               [24] 3574 	inc	dptr
      001047 EC               [12] 3575 	mov	a,r4
      001048 12r00r00         [24] 3576 	lcall	__gptrput
                           00104B  3577 	C$stream_buffer.c$1075$3_0$241 ==.
                                   3578 ;	src/FreeRTOS/stream_buffer.c:1075: xReturn = pdTRUE;
      00104B 7F 01            [12] 3579 	mov	r7,#0x01
      00104D 80 02            [24] 3580 	sjmp	00103$
      00104F                       3581 00102$:
                           00104F  3582 	C$stream_buffer.c$1079$3_0$242 ==.
                                   3583 ;	src/FreeRTOS/stream_buffer.c:1079: xReturn = pdFALSE;
      00104F 7F 00            [12] 3584 	mov	r7,#0x00
      001051                       3585 00103$:
                           001051  3586 	C$stream_buffer.c$1084$1_0$239 ==.
                                   3587 ;	src/FreeRTOS/stream_buffer.c:1084: return xReturn;
      001051 8F 82            [24] 3588 	mov	dpl,r7
                           001053  3589 	C$stream_buffer.c$1085$1_0$239 ==.
                                   3590 ;	src/FreeRTOS/stream_buffer.c:1085: }
      001053 D0*00            [24] 3591 	pop	_bp
                           001055  3592 	C$stream_buffer.c$1085$1_0$239 ==.
                           001055  3593 	XG$xStreamBufferReceiveCompletedFromISR$0$0 ==.
      001055 22               [24] 3594 	ret
                                   3595 ;------------------------------------------------------------
                                   3596 ;Allocation info for local variables in function 'prvWriteBytesToBuffer'
                                   3597 ;------------------------------------------------------------
                                   3598 ;pucData                   Allocated to stack - _bp -5
                                   3599 ;xCount                    Allocated to stack - _bp -7
                                   3600 ;pxStreamBuffer            Allocated to stack - _bp +1
                                   3601 ;xNextHead                 Allocated to registers r6 r7 
                                   3602 ;xFirstLength              Allocated to stack - _bp +14
                                   3603 ;sloc0                     Allocated to stack - _bp +4
                                   3604 ;sloc1                     Allocated to stack - _bp +6
                                   3605 ;sloc2                     Allocated to stack - _bp +9
                                   3606 ;sloc3                     Allocated to stack - _bp +11
                                   3607 ;------------------------------------------------------------
                           001056  3608 	Fstream_buffer$prvWriteBytesToBuffer$0$0 ==.
                           001056  3609 	C$stream_buffer.c$1088$1_0$244 ==.
                                   3610 ;	src/FreeRTOS/stream_buffer.c:1088: static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
                                   3611 ;	-----------------------------------------
                                   3612 ;	 function prvWriteBytesToBuffer
                                   3613 ;	-----------------------------------------
      001056                       3614 _prvWriteBytesToBuffer:
      001056 C0*00            [24] 3615 	push	_bp
      001058 85 81*00         [24] 3616 	mov	_bp,sp
      00105B C0 82            [24] 3617 	push	dpl
      00105D C0 83            [24] 3618 	push	dph
      00105F C0 F0            [24] 3619 	push	b
      001061 E5 81            [12] 3620 	mov	a,sp
      001063 24 0C            [12] 3621 	add	a,#0x0c
      001065 F5 81            [12] 3622 	mov	sp,a
                           001067  3623 	C$stream_buffer.c$1094$1_0$244 ==.
                                   3624 ;	src/FreeRTOS/stream_buffer.c:1094: xNextHead = pxStreamBuffer->xHead;
      001067 A8*00            [24] 3625 	mov	r0,_bp
      001069 08               [12] 3626 	inc	r0
      00106A 74 02            [12] 3627 	mov	a,#0x02
      00106C 26               [12] 3628 	add	a,@r0
      00106D FA               [12] 3629 	mov	r2,a
      00106E E4               [12] 3630 	clr	a
      00106F 08               [12] 3631 	inc	r0
      001070 36               [12] 3632 	addc	a,@r0
      001071 FB               [12] 3633 	mov	r3,a
      001072 08               [12] 3634 	inc	r0
      001073 86 04            [24] 3635 	mov	ar4,@r0
      001075 8A 82            [24] 3636 	mov	dpl,r2
      001077 8B 83            [24] 3637 	mov	dph,r3
      001079 8C F0            [24] 3638 	mov	b,r4
      00107B E5*00            [12] 3639 	mov	a,_bp
      00107D 24 04            [12] 3640 	add	a,#0x04
      00107F F8               [12] 3641 	mov	r0,a
      001080 12r00r00         [24] 3642 	lcall	__gptrget
      001083 F6               [12] 3643 	mov	@r0,a
      001084 A3               [24] 3644 	inc	dptr
      001085 12r00r00         [24] 3645 	lcall	__gptrget
      001088 08               [12] 3646 	inc	r0
      001089 F6               [12] 3647 	mov	@r0,a
                           00108A  3648 	C$stream_buffer.c$1099$1_0$244 ==.
                                   3649 ;	src/FreeRTOS/stream_buffer.c:1099: xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
      00108A A8*00            [24] 3650 	mov	r0,_bp
      00108C 08               [12] 3651 	inc	r0
      00108D E5*00            [12] 3652 	mov	a,_bp
      00108F 24 06            [12] 3653 	add	a,#0x06
      001091 F9               [12] 3654 	mov	r1,a
      001092 74 04            [12] 3655 	mov	a,#0x04
      001094 26               [12] 3656 	add	a,@r0
      001095 F7               [12] 3657 	mov	@r1,a
      001096 E4               [12] 3658 	clr	a
      001097 08               [12] 3659 	inc	r0
      001098 36               [12] 3660 	addc	a,@r0
      001099 09               [12] 3661 	inc	r1
      00109A F7               [12] 3662 	mov	@r1,a
      00109B 08               [12] 3663 	inc	r0
      00109C 09               [12] 3664 	inc	r1
      00109D E6               [12] 3665 	mov	a,@r0
      00109E F7               [12] 3666 	mov	@r1,a
      00109F E5*00            [12] 3667 	mov	a,_bp
      0010A1 24 06            [12] 3668 	add	a,#0x06
      0010A3 F8               [12] 3669 	mov	r0,a
      0010A4 86 82            [24] 3670 	mov	dpl,@r0
      0010A6 08               [12] 3671 	inc	r0
      0010A7 86 83            [24] 3672 	mov	dph,@r0
      0010A9 08               [12] 3673 	inc	r0
      0010AA 86 F0            [24] 3674 	mov	b,@r0
      0010AC E5*00            [12] 3675 	mov	a,_bp
      0010AE 24 09            [12] 3676 	add	a,#0x09
      0010B0 F9               [12] 3677 	mov	r1,a
      0010B1 12r00r00         [24] 3678 	lcall	__gptrget
      0010B4 F7               [12] 3679 	mov	@r1,a
      0010B5 A3               [24] 3680 	inc	dptr
      0010B6 12r00r00         [24] 3681 	lcall	__gptrget
      0010B9 09               [12] 3682 	inc	r1
      0010BA F7               [12] 3683 	mov	@r1,a
      0010BB E5*00            [12] 3684 	mov	a,_bp
      0010BD 24 09            [12] 3685 	add	a,#0x09
      0010BF F8               [12] 3686 	mov	r0,a
      0010C0 E5*00            [12] 3687 	mov	a,_bp
      0010C2 24 04            [12] 3688 	add	a,#0x04
      0010C4 F9               [12] 3689 	mov	r1,a
      0010C5 E6               [12] 3690 	mov	a,@r0
      0010C6 C3               [12] 3691 	clr	c
      0010C7 97               [12] 3692 	subb	a,@r1
      0010C8 FE               [12] 3693 	mov	r6,a
      0010C9 08               [12] 3694 	inc	r0
      0010CA E6               [12] 3695 	mov	a,@r0
      0010CB 09               [12] 3696 	inc	r1
      0010CC 97               [12] 3697 	subb	a,@r1
      0010CD FF               [12] 3698 	mov	r7,a
      0010CE E5*00            [12] 3699 	mov	a,_bp
      0010D0 24 F9            [12] 3700 	add	a,#0xf9
      0010D2 F8               [12] 3701 	mov	r0,a
      0010D3 C3               [12] 3702 	clr	c
      0010D4 EE               [12] 3703 	mov	a,r6
      0010D5 96               [12] 3704 	subb	a,@r0
      0010D6 EF               [12] 3705 	mov	a,r7
      0010D7 08               [12] 3706 	inc	r0
      0010D8 96               [12] 3707 	subb	a,@r0
      0010D9 50 15            [24] 3708 	jnc	00107$
      0010DB E5*00            [12] 3709 	mov	a,_bp
      0010DD 24 09            [12] 3710 	add	a,#0x09
      0010DF F8               [12] 3711 	mov	r0,a
      0010E0 E5*00            [12] 3712 	mov	a,_bp
      0010E2 24 04            [12] 3713 	add	a,#0x04
      0010E4 F9               [12] 3714 	mov	r1,a
      0010E5 E6               [12] 3715 	mov	a,@r0
      0010E6 C3               [12] 3716 	clr	c
      0010E7 97               [12] 3717 	subb	a,@r1
      0010E8 FE               [12] 3718 	mov	r6,a
      0010E9 08               [12] 3719 	inc	r0
      0010EA E6               [12] 3720 	mov	a,@r0
      0010EB 09               [12] 3721 	inc	r1
      0010EC 97               [12] 3722 	subb	a,@r1
      0010ED FF               [12] 3723 	mov	r7,a
      0010EE 80 0A            [24] 3724 	sjmp	00108$
      0010F0                       3725 00107$:
      0010F0 E5*00            [12] 3726 	mov	a,_bp
      0010F2 24 F9            [12] 3727 	add	a,#0xf9
      0010F4 F8               [12] 3728 	mov	r0,a
      0010F5 86 06            [24] 3729 	mov	ar6,@r0
      0010F7 08               [12] 3730 	inc	r0
      0010F8 86 07            [24] 3731 	mov	ar7,@r0
      0010FA                       3732 00108$:
      0010FA C0 02            [24] 3733 	push	ar2
      0010FC C0 03            [24] 3734 	push	ar3
      0010FE C0 04            [24] 3735 	push	ar4
      001100 E5*00            [12] 3736 	mov	a,_bp
      001102 24 0E            [12] 3737 	add	a,#0x0e
      001104 F8               [12] 3738 	mov	r0,a
      001105 A6 06            [24] 3739 	mov	@r0,ar6
      001107 08               [12] 3740 	inc	r0
      001108 A6 07            [24] 3741 	mov	@r0,ar7
                           00110A  3742 	C$stream_buffer.c$1103$1_0$244 ==.
                                   3743 ;	src/FreeRTOS/stream_buffer.c:1103: ( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
      00110A E5*00            [12] 3744 	mov	a,_bp
      00110C 24 FB            [12] 3745 	add	a,#0xfb
      00110E F8               [12] 3746 	mov	r0,a
      00110F 86 03            [24] 3747 	mov	ar3,@r0
      001111 08               [12] 3748 	inc	r0
      001112 86 04            [24] 3749 	mov	ar4,@r0
      001114 08               [12] 3750 	inc	r0
      001115 86 05            [24] 3751 	mov	ar5,@r0
      001117 A8*00            [24] 3752 	mov	r0,_bp
      001119 08               [12] 3753 	inc	r0
      00111A E5*00            [12] 3754 	mov	a,_bp
      00111C 24 0B            [12] 3755 	add	a,#0x0b
      00111E F9               [12] 3756 	mov	r1,a
      00111F 74 0E            [12] 3757 	mov	a,#0x0e
      001121 26               [12] 3758 	add	a,@r0
      001122 F7               [12] 3759 	mov	@r1,a
      001123 E4               [12] 3760 	clr	a
      001124 08               [12] 3761 	inc	r0
      001125 36               [12] 3762 	addc	a,@r0
      001126 09               [12] 3763 	inc	r1
      001127 F7               [12] 3764 	mov	@r1,a
      001128 08               [12] 3765 	inc	r0
      001129 09               [12] 3766 	inc	r1
      00112A E6               [12] 3767 	mov	a,@r0
      00112B F7               [12] 3768 	mov	@r1,a
      00112C E5*00            [12] 3769 	mov	a,_bp
      00112E 24 0B            [12] 3770 	add	a,#0x0b
      001130 F8               [12] 3771 	mov	r0,a
      001131 86 82            [24] 3772 	mov	dpl,@r0
      001133 08               [12] 3773 	inc	r0
      001134 86 83            [24] 3774 	mov	dph,@r0
      001136 08               [12] 3775 	inc	r0
      001137 86 F0            [24] 3776 	mov	b,@r0
      001139 12r00r00         [24] 3777 	lcall	__gptrget
      00113C FA               [12] 3778 	mov	r2,a
      00113D A3               [24] 3779 	inc	dptr
      00113E 12r00r00         [24] 3780 	lcall	__gptrget
      001141 FE               [12] 3781 	mov	r6,a
      001142 A3               [24] 3782 	inc	dptr
      001143 12r00r00         [24] 3783 	lcall	__gptrget
      001146 FF               [12] 3784 	mov	r7,a
      001147 E5*00            [12] 3785 	mov	a,_bp
      001149 24 04            [12] 3786 	add	a,#0x04
      00114B F8               [12] 3787 	mov	r0,a
      00114C E6               [12] 3788 	mov	a,@r0
      00114D 2A               [12] 3789 	add	a,r2
      00114E FA               [12] 3790 	mov	r2,a
      00114F 08               [12] 3791 	inc	r0
      001150 E6               [12] 3792 	mov	a,@r0
      001151 3E               [12] 3793 	addc	a,r6
      001152 FE               [12] 3794 	mov	r6,a
      001153 C0 04            [24] 3795 	push	ar4
      001155 C0 03            [24] 3796 	push	ar3
      001157 C0 02            [24] 3797 	push	ar2
      001159 E5*00            [12] 3798 	mov	a,_bp
      00115B 24 0E            [12] 3799 	add	a,#0x0e
      00115D F8               [12] 3800 	mov	r0,a
      00115E E6               [12] 3801 	mov	a,@r0
      00115F C0 E0            [24] 3802 	push	acc
      001161 08               [12] 3803 	inc	r0
      001162 E6               [12] 3804 	mov	a,@r0
      001163 C0 E0            [24] 3805 	push	acc
      001165 C0 03            [24] 3806 	push	ar3
      001167 C0 04            [24] 3807 	push	ar4
      001169 C0 05            [24] 3808 	push	ar5
      00116B 8A 82            [24] 3809 	mov	dpl,r2
      00116D 8E 83            [24] 3810 	mov	dph,r6
      00116F 8F F0            [24] 3811 	mov	b,r7
      001171 12r00r00         [24] 3812 	lcall	_memcpy
      001174 E5 81            [12] 3813 	mov	a,sp
      001176 24 FB            [12] 3814 	add	a,#0xfb
      001178 F5 81            [12] 3815 	mov	sp,a
      00117A D0 02            [24] 3816 	pop	ar2
      00117C D0 03            [24] 3817 	pop	ar3
      00117E D0 04            [24] 3818 	pop	ar4
                           001180  3819 	C$stream_buffer.c$1107$1_0$244 ==.
                                   3820 ;	src/FreeRTOS/stream_buffer.c:1107: if( xCount > xFirstLength )
      001180 E5*00            [12] 3821 	mov	a,_bp
      001182 24 F9            [12] 3822 	add	a,#0xf9
      001184 F8               [12] 3823 	mov	r0,a
      001185 E5*00            [12] 3824 	mov	a,_bp
      001187 24 0E            [12] 3825 	add	a,#0x0e
      001189 F9               [12] 3826 	mov	r1,a
      00118A C3               [12] 3827 	clr	c
      00118B E7               [12] 3828 	mov	a,@r1
      00118C 96               [12] 3829 	subb	a,@r0
      00118D 09               [12] 3830 	inc	r1
      00118E E7               [12] 3831 	mov	a,@r1
      00118F 08               [12] 3832 	inc	r0
      001190 96               [12] 3833 	subb	a,@r0
      001191 D0 04            [24] 3834 	pop	ar4
      001193 D0 03            [24] 3835 	pop	ar3
      001195 D0 02            [24] 3836 	pop	ar2
      001197 40 03            [24] 3837 	jc	00125$
      001199 02r12r29         [24] 3838 	ljmp	00102$
      00119C                       3839 00125$:
                           00119C  3840 	C$stream_buffer.c$1111$1_0$244 ==.
                                   3841 ;	src/FreeRTOS/stream_buffer.c:1111: ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
      00119C C0 02            [24] 3842 	push	ar2
      00119E C0 03            [24] 3843 	push	ar3
      0011A0 C0 04            [24] 3844 	push	ar4
      0011A2 E5*00            [12] 3845 	mov	a,_bp
      0011A4 24 F9            [12] 3846 	add	a,#0xf9
      0011A6 F8               [12] 3847 	mov	r0,a
      0011A7 E5*00            [12] 3848 	mov	a,_bp
      0011A9 24 0E            [12] 3849 	add	a,#0x0e
      0011AB F9               [12] 3850 	mov	r1,a
      0011AC E6               [12] 3851 	mov	a,@r0
      0011AD C3               [12] 3852 	clr	c
      0011AE 97               [12] 3853 	subb	a,@r1
      0011AF C0 E0            [24] 3854 	push	acc
      0011B1 08               [12] 3855 	inc	r0
      0011B2 E6               [12] 3856 	mov	a,@r0
      0011B3 09               [12] 3857 	inc	r1
      0011B4 97               [12] 3858 	subb	a,@r1
      0011B5 C0 E0            [24] 3859 	push	acc
      0011B7 E5*00            [12] 3860 	mov	a,_bp
      0011B9 24 0A            [12] 3861 	add	a,#0x0a
      0011BB F8               [12] 3862 	mov	r0,a
      0011BC D0 E0            [24] 3863 	pop	acc
      0011BE F6               [12] 3864 	mov	@r0,a
      0011BF 18               [12] 3865 	dec	r0
      0011C0 D0 E0            [24] 3866 	pop	acc
      0011C2 F6               [12] 3867 	mov	@r0,a
      0011C3 E5*00            [12] 3868 	mov	a,_bp
      0011C5 24 FB            [12] 3869 	add	a,#0xfb
      0011C7 F8               [12] 3870 	mov	r0,a
      0011C8 E5*00            [12] 3871 	mov	a,_bp
      0011CA 24 0E            [12] 3872 	add	a,#0x0e
      0011CC F9               [12] 3873 	mov	r1,a
      0011CD E7               [12] 3874 	mov	a,@r1
      0011CE 26               [12] 3875 	add	a,@r0
      0011CF FB               [12] 3876 	mov	r3,a
      0011D0 09               [12] 3877 	inc	r1
      0011D1 E7               [12] 3878 	mov	a,@r1
      0011D2 08               [12] 3879 	inc	r0
      0011D3 36               [12] 3880 	addc	a,@r0
      0011D4 08               [12] 3881 	inc	r0
      0011D5 86 05            [24] 3882 	mov	ar5,@r0
      0011D7 7D 00            [12] 3883 	mov	r5,#0x00
      0011D9 7C 40            [12] 3884 	mov	r4,#0x40
      0011DB E5*00            [12] 3885 	mov	a,_bp
      0011DD 24 0B            [12] 3886 	add	a,#0x0b
      0011DF F8               [12] 3887 	mov	r0,a
      0011E0 86 82            [24] 3888 	mov	dpl,@r0
      0011E2 08               [12] 3889 	inc	r0
      0011E3 86 83            [24] 3890 	mov	dph,@r0
      0011E5 08               [12] 3891 	inc	r0
      0011E6 86 F0            [24] 3892 	mov	b,@r0
      0011E8 12r00r00         [24] 3893 	lcall	__gptrget
      0011EB FA               [12] 3894 	mov	r2,a
      0011EC A3               [24] 3895 	inc	dptr
      0011ED 12r00r00         [24] 3896 	lcall	__gptrget
      0011F0 FE               [12] 3897 	mov	r6,a
      0011F1 A3               [24] 3898 	inc	dptr
      0011F2 12r00r00         [24] 3899 	lcall	__gptrget
      0011F5 FF               [12] 3900 	mov	r7,a
      0011F6 C0 04            [24] 3901 	push	ar4
      0011F8 C0 03            [24] 3902 	push	ar3
      0011FA C0 02            [24] 3903 	push	ar2
      0011FC E5*00            [12] 3904 	mov	a,_bp
      0011FE 24 09            [12] 3905 	add	a,#0x09
      001200 F8               [12] 3906 	mov	r0,a
      001201 E6               [12] 3907 	mov	a,@r0
      001202 C0 E0            [24] 3908 	push	acc
      001204 08               [12] 3909 	inc	r0
      001205 E6               [12] 3910 	mov	a,@r0
      001206 C0 E0            [24] 3911 	push	acc
      001208 C0 03            [24] 3912 	push	ar3
      00120A C0 05            [24] 3913 	push	ar5
      00120C C0 04            [24] 3914 	push	ar4
      00120E 8A 82            [24] 3915 	mov	dpl,r2
      001210 8E 83            [24] 3916 	mov	dph,r6
      001212 8F F0            [24] 3917 	mov	b,r7
      001214 12r00r00         [24] 3918 	lcall	_memcpy
      001217 E5 81            [12] 3919 	mov	a,sp
      001219 24 FB            [12] 3920 	add	a,#0xfb
      00121B F5 81            [12] 3921 	mov	sp,a
      00121D D0 02            [24] 3922 	pop	ar2
      00121F D0 03            [24] 3923 	pop	ar3
      001221 D0 04            [24] 3924 	pop	ar4
                           001223  3925 	C$stream_buffer.c$1130$1_0$244 ==.
                                   3926 ;	src/FreeRTOS/stream_buffer.c:1130: return xCount;
      001223 D0 04            [24] 3927 	pop	ar4
      001225 D0 03            [24] 3928 	pop	ar3
      001227 D0 02            [24] 3929 	pop	ar2
                           001229  3930 	C$stream_buffer.c$1111$1_0$244 ==.
                                   3931 ;	src/FreeRTOS/stream_buffer.c:1111: ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
      001229                       3932 00102$:
                           001229  3933 	C$stream_buffer.c$1118$1_0$244 ==.
                                   3934 ;	src/FreeRTOS/stream_buffer.c:1118: xNextHead += xCount;
      001229 E5*00            [12] 3935 	mov	a,_bp
      00122B 24 04            [12] 3936 	add	a,#0x04
      00122D F8               [12] 3937 	mov	r0,a
      00122E E5*00            [12] 3938 	mov	a,_bp
      001230 24 F9            [12] 3939 	add	a,#0xf9
      001232 F9               [12] 3940 	mov	r1,a
      001233 E7               [12] 3941 	mov	a,@r1
      001234 26               [12] 3942 	add	a,@r0
      001235 FE               [12] 3943 	mov	r6,a
      001236 09               [12] 3944 	inc	r1
      001237 E7               [12] 3945 	mov	a,@r1
      001238 08               [12] 3946 	inc	r0
      001239 36               [12] 3947 	addc	a,@r0
      00123A FF               [12] 3948 	mov	r7,a
                           00123B  3949 	C$stream_buffer.c$1119$1_0$244 ==.
                                   3950 ;	src/FreeRTOS/stream_buffer.c:1119: if( xNextHead >= pxStreamBuffer->xLength )
      00123B E5*00            [12] 3951 	mov	a,_bp
      00123D 24 06            [12] 3952 	add	a,#0x06
      00123F F8               [12] 3953 	mov	r0,a
      001240 86 82            [24] 3954 	mov	dpl,@r0
      001242 08               [12] 3955 	inc	r0
      001243 86 83            [24] 3956 	mov	dph,@r0
      001245 08               [12] 3957 	inc	r0
      001246 86 F0            [24] 3958 	mov	b,@r0
      001248 E5*00            [12] 3959 	mov	a,_bp
      00124A 24 0B            [12] 3960 	add	a,#0x0b
      00124C F9               [12] 3961 	mov	r1,a
      00124D 12r00r00         [24] 3962 	lcall	__gptrget
      001250 F7               [12] 3963 	mov	@r1,a
      001251 A3               [24] 3964 	inc	dptr
      001252 12r00r00         [24] 3965 	lcall	__gptrget
      001255 09               [12] 3966 	inc	r1
      001256 F7               [12] 3967 	mov	@r1,a
      001257 E5*00            [12] 3968 	mov	a,_bp
      001259 24 0B            [12] 3969 	add	a,#0x0b
      00125B F8               [12] 3970 	mov	r0,a
      00125C C3               [12] 3971 	clr	c
      00125D EE               [12] 3972 	mov	a,r6
      00125E 96               [12] 3973 	subb	a,@r0
      00125F EF               [12] 3974 	mov	a,r7
      001260 08               [12] 3975 	inc	r0
      001261 96               [12] 3976 	subb	a,@r0
      001262 40 0D            [24] 3977 	jc	00104$
                           001264  3978 	C$stream_buffer.c$1121$2_0$247 ==.
                                   3979 ;	src/FreeRTOS/stream_buffer.c:1121: xNextHead -= pxStreamBuffer->xLength;
      001264 E5*00            [12] 3980 	mov	a,_bp
      001266 24 0B            [12] 3981 	add	a,#0x0b
      001268 F8               [12] 3982 	mov	r0,a
      001269 EE               [12] 3983 	mov	a,r6
      00126A C3               [12] 3984 	clr	c
      00126B 96               [12] 3985 	subb	a,@r0
      00126C FE               [12] 3986 	mov	r6,a
      00126D EF               [12] 3987 	mov	a,r7
      00126E 08               [12] 3988 	inc	r0
      00126F 96               [12] 3989 	subb	a,@r0
      001270 FF               [12] 3990 	mov	r7,a
      001271                       3991 00104$:
                           001271  3992 	C$stream_buffer.c$1128$1_0$244 ==.
                                   3993 ;	src/FreeRTOS/stream_buffer.c:1128: pxStreamBuffer->xHead = xNextHead;
      001271 8A 82            [24] 3994 	mov	dpl,r2
      001273 8B 83            [24] 3995 	mov	dph,r3
      001275 8C F0            [24] 3996 	mov	b,r4
      001277 EE               [12] 3997 	mov	a,r6
      001278 12r00r00         [24] 3998 	lcall	__gptrput
      00127B A3               [24] 3999 	inc	dptr
      00127C EF               [12] 4000 	mov	a,r7
      00127D 12r00r00         [24] 4001 	lcall	__gptrput
                           001280  4002 	C$stream_buffer.c$1130$1_0$244 ==.
                                   4003 ;	src/FreeRTOS/stream_buffer.c:1130: return xCount;
      001280 E5*00            [12] 4004 	mov	a,_bp
      001282 24 F9            [12] 4005 	add	a,#0xf9
      001284 F8               [12] 4006 	mov	r0,a
      001285 86 82            [24] 4007 	mov	dpl,@r0
      001287 08               [12] 4008 	inc	r0
      001288 86 83            [24] 4009 	mov	dph,@r0
                           00128A  4010 	C$stream_buffer.c$1131$1_0$244 ==.
                                   4011 ;	src/FreeRTOS/stream_buffer.c:1131: }
      00128A 85*00 81         [24] 4012 	mov	sp,_bp
      00128D D0*00            [24] 4013 	pop	_bp
                           00128F  4014 	C$stream_buffer.c$1131$1_0$244 ==.
                           00128F  4015 	XFstream_buffer$prvWriteBytesToBuffer$0$0 ==.
      00128F 22               [24] 4016 	ret
                                   4017 ;------------------------------------------------------------
                                   4018 ;Allocation info for local variables in function 'prvReadBytesFromBuffer'
                                   4019 ;------------------------------------------------------------
                                   4020 ;pucData                   Allocated to stack - _bp -5
                                   4021 ;xMaxCount                 Allocated to stack - _bp -7
                                   4022 ;xBytesAvailable           Allocated to stack - _bp -9
                                   4023 ;pxStreamBuffer            Allocated to stack - _bp +1
                                   4024 ;xCount                    Allocated to stack - _bp +12
                                   4025 ;xFirstLength              Allocated to stack - _bp +14
                                   4026 ;xNextTail                 Allocated to registers r7 r6 
                                   4027 ;sloc0                     Allocated to stack - _bp +4
                                   4028 ;sloc1                     Allocated to stack - _bp +7
                                   4029 ;sloc2                     Allocated to stack - _bp +9
                                   4030 ;------------------------------------------------------------
                           001290  4031 	Fstream_buffer$prvReadBytesFromBuffer$0$0 ==.
                           001290  4032 	C$stream_buffer.c$1134$1_0$250 ==.
                                   4033 ;	src/FreeRTOS/stream_buffer.c:1134: static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
                                   4034 ;	-----------------------------------------
                                   4035 ;	 function prvReadBytesFromBuffer
                                   4036 ;	-----------------------------------------
      001290                       4037 _prvReadBytesFromBuffer:
      001290 C0*00            [24] 4038 	push	_bp
      001292 85 81*00         [24] 4039 	mov	_bp,sp
      001295 C0 82            [24] 4040 	push	dpl
      001297 C0 83            [24] 4041 	push	dph
      001299 C0 F0            [24] 4042 	push	b
      00129B E5 81            [12] 4043 	mov	a,sp
      00129D 24 0C            [12] 4044 	add	a,#0x0c
      00129F F5 81            [12] 4045 	mov	sp,a
                           0012A1  4046 	C$stream_buffer.c$1139$1_0$250 ==.
                                   4047 ;	src/FreeRTOS/stream_buffer.c:1139: xCount = configMIN( xBytesAvailable, xMaxCount );
      0012A1 E5*00            [12] 4048 	mov	a,_bp
      0012A3 24 F7            [12] 4049 	add	a,#0xf7
      0012A5 F8               [12] 4050 	mov	r0,a
      0012A6 E5*00            [12] 4051 	mov	a,_bp
      0012A8 24 F9            [12] 4052 	add	a,#0xf9
      0012AA F9               [12] 4053 	mov	r1,a
      0012AB C3               [12] 4054 	clr	c
      0012AC E6               [12] 4055 	mov	a,@r0
      0012AD 97               [12] 4056 	subb	a,@r1
      0012AE 08               [12] 4057 	inc	r0
      0012AF E6               [12] 4058 	mov	a,@r0
      0012B0 09               [12] 4059 	inc	r1
      0012B1 97               [12] 4060 	subb	a,@r1
      0012B2 50 0C            [24] 4061 	jnc	00109$
      0012B4 E5*00            [12] 4062 	mov	a,_bp
      0012B6 24 F7            [12] 4063 	add	a,#0xf7
      0012B8 F8               [12] 4064 	mov	r0,a
      0012B9 86 03            [24] 4065 	mov	ar3,@r0
      0012BB 08               [12] 4066 	inc	r0
      0012BC 86 04            [24] 4067 	mov	ar4,@r0
      0012BE 80 0A            [24] 4068 	sjmp	00110$
      0012C0                       4069 00109$:
      0012C0 E5*00            [12] 4070 	mov	a,_bp
      0012C2 24 F9            [12] 4071 	add	a,#0xf9
      0012C4 F8               [12] 4072 	mov	r0,a
      0012C5 86 03            [24] 4073 	mov	ar3,@r0
      0012C7 08               [12] 4074 	inc	r0
      0012C8 86 04            [24] 4075 	mov	ar4,@r0
      0012CA                       4076 00110$:
      0012CA E5*00            [12] 4077 	mov	a,_bp
      0012CC 24 0C            [12] 4078 	add	a,#0x0c
      0012CE F8               [12] 4079 	mov	r0,a
      0012CF A6 03            [24] 4080 	mov	@r0,ar3
      0012D1 08               [12] 4081 	inc	r0
      0012D2 A6 04            [24] 4082 	mov	@r0,ar4
                           0012D4  4083 	C$stream_buffer.c$1141$1_0$250 ==.
                                   4084 ;	src/FreeRTOS/stream_buffer.c:1141: if( xCount > ( size_t ) 0 )
      0012D4 E5*00            [12] 4085 	mov	a,_bp
      0012D6 24 0C            [12] 4086 	add	a,#0x0c
      0012D8 F8               [12] 4087 	mov	r0,a
      0012D9 E6               [12] 4088 	mov	a,@r0
      0012DA 08               [12] 4089 	inc	r0
      0012DB 46               [12] 4090 	orl	a,@r0
      0012DC 70 03            [24] 4091 	jnz	00139$
      0012DE 02r14rA8         [24] 4092 	ljmp	00106$
      0012E1                       4093 00139$:
                           0012E1  4094 	C$stream_buffer.c$1143$2_0$251 ==.
                                   4095 ;	src/FreeRTOS/stream_buffer.c:1143: xNextTail = pxStreamBuffer->xTail;
      0012E1 A8*00            [24] 4096 	mov	r0,_bp
      0012E3 08               [12] 4097 	inc	r0
      0012E4 86 82            [24] 4098 	mov	dpl,@r0
      0012E6 08               [12] 4099 	inc	r0
      0012E7 86 83            [24] 4100 	mov	dph,@r0
      0012E9 08               [12] 4101 	inc	r0
      0012EA 86 F0            [24] 4102 	mov	b,@r0
      0012EC 12r00r00         [24] 4103 	lcall	__gptrget
      0012EF FA               [12] 4104 	mov	r2,a
      0012F0 A3               [24] 4105 	inc	dptr
      0012F1 12r00r00         [24] 4106 	lcall	__gptrget
      0012F4 FC               [12] 4107 	mov	r4,a
                           0012F5  4108 	C$stream_buffer.c$1148$2_0$251 ==.
                                   4109 ;	src/FreeRTOS/stream_buffer.c:1148: xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
      0012F5 A8*00            [24] 4110 	mov	r0,_bp
      0012F7 08               [12] 4111 	inc	r0
      0012F8 E5*00            [12] 4112 	mov	a,_bp
      0012FA 24 04            [12] 4113 	add	a,#0x04
      0012FC F9               [12] 4114 	mov	r1,a
      0012FD 74 04            [12] 4115 	mov	a,#0x04
      0012FF 26               [12] 4116 	add	a,@r0
      001300 F7               [12] 4117 	mov	@r1,a
      001301 E4               [12] 4118 	clr	a
      001302 08               [12] 4119 	inc	r0
      001303 36               [12] 4120 	addc	a,@r0
      001304 09               [12] 4121 	inc	r1
      001305 F7               [12] 4122 	mov	@r1,a
      001306 08               [12] 4123 	inc	r0
      001307 09               [12] 4124 	inc	r1
      001308 E6               [12] 4125 	mov	a,@r0
      001309 F7               [12] 4126 	mov	@r1,a
      00130A E5*00            [12] 4127 	mov	a,_bp
      00130C 24 04            [12] 4128 	add	a,#0x04
      00130E F8               [12] 4129 	mov	r0,a
      00130F 86 82            [24] 4130 	mov	dpl,@r0
      001311 08               [12] 4131 	inc	r0
      001312 86 83            [24] 4132 	mov	dph,@r0
      001314 08               [12] 4133 	inc	r0
      001315 86 F0            [24] 4134 	mov	b,@r0
      001317 12r00r00         [24] 4135 	lcall	__gptrget
      00131A FE               [12] 4136 	mov	r6,a
      00131B A3               [24] 4137 	inc	dptr
      00131C 12r00r00         [24] 4138 	lcall	__gptrget
      00131F FD               [12] 4139 	mov	r5,a
      001320 EE               [12] 4140 	mov	a,r6
      001321 C3               [12] 4141 	clr	c
      001322 9A               [12] 4142 	subb	a,r2
      001323 FB               [12] 4143 	mov	r3,a
      001324 ED               [12] 4144 	mov	a,r5
      001325 9C               [12] 4145 	subb	a,r4
      001326 FF               [12] 4146 	mov	r7,a
      001327 E5*00            [12] 4147 	mov	a,_bp
      001329 24 0C            [12] 4148 	add	a,#0x0c
      00132B F8               [12] 4149 	mov	r0,a
      00132C C3               [12] 4150 	clr	c
      00132D EB               [12] 4151 	mov	a,r3
      00132E 96               [12] 4152 	subb	a,@r0
      00132F EF               [12] 4153 	mov	a,r7
      001330 08               [12] 4154 	inc	r0
      001331 96               [12] 4155 	subb	a,@r0
      001332 50 09            [24] 4156 	jnc	00111$
      001334 EE               [12] 4157 	mov	a,r6
      001335 C3               [12] 4158 	clr	c
      001336 9A               [12] 4159 	subb	a,r2
      001337 FE               [12] 4160 	mov	r6,a
      001338 ED               [12] 4161 	mov	a,r5
      001339 9C               [12] 4162 	subb	a,r4
      00133A FF               [12] 4163 	mov	r7,a
      00133B 80 0A            [24] 4164 	sjmp	00112$
      00133D                       4165 00111$:
      00133D E5*00            [12] 4166 	mov	a,_bp
      00133F 24 0C            [12] 4167 	add	a,#0x0c
      001341 F8               [12] 4168 	mov	r0,a
      001342 86 06            [24] 4169 	mov	ar6,@r0
      001344 08               [12] 4170 	inc	r0
      001345 86 07            [24] 4171 	mov	ar7,@r0
      001347                       4172 00112$:
      001347 E5*00            [12] 4173 	mov	a,_bp
      001349 24 0E            [12] 4174 	add	a,#0x0e
      00134B F8               [12] 4175 	mov	r0,a
      00134C A6 06            [24] 4176 	mov	@r0,ar6
      00134E 08               [12] 4177 	inc	r0
      00134F A6 07            [24] 4178 	mov	@r0,ar7
                           001351  4179 	C$stream_buffer.c$1154$2_0$251 ==.
                                   4180 ;	src/FreeRTOS/stream_buffer.c:1154: ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
      001351 A8*00            [24] 4181 	mov	r0,_bp
      001353 08               [12] 4182 	inc	r0
      001354 E5*00            [12] 4183 	mov	a,_bp
      001356 24 09            [12] 4184 	add	a,#0x09
      001358 F9               [12] 4185 	mov	r1,a
      001359 74 0E            [12] 4186 	mov	a,#0x0e
      00135B 26               [12] 4187 	add	a,@r0
      00135C F7               [12] 4188 	mov	@r1,a
      00135D E4               [12] 4189 	clr	a
      00135E 08               [12] 4190 	inc	r0
      00135F 36               [12] 4191 	addc	a,@r0
      001360 09               [12] 4192 	inc	r1
      001361 F7               [12] 4193 	mov	@r1,a
      001362 08               [12] 4194 	inc	r0
      001363 09               [12] 4195 	inc	r1
      001364 E6               [12] 4196 	mov	a,@r0
      001365 F7               [12] 4197 	mov	@r1,a
      001366 E5*00            [12] 4198 	mov	a,_bp
      001368 24 09            [12] 4199 	add	a,#0x09
      00136A F8               [12] 4200 	mov	r0,a
      00136B 86 82            [24] 4201 	mov	dpl,@r0
      00136D 08               [12] 4202 	inc	r0
      00136E 86 83            [24] 4203 	mov	dph,@r0
      001370 08               [12] 4204 	inc	r0
      001371 86 F0            [24] 4205 	mov	b,@r0
      001373 12r00r00         [24] 4206 	lcall	__gptrget
      001376 FD               [12] 4207 	mov	r5,a
      001377 A3               [24] 4208 	inc	dptr
      001378 12r00r00         [24] 4209 	lcall	__gptrget
      00137B FE               [12] 4210 	mov	r6,a
      00137C A3               [24] 4211 	inc	dptr
      00137D 12r00r00         [24] 4212 	lcall	__gptrget
      001380 FF               [12] 4213 	mov	r7,a
      001381 EA               [12] 4214 	mov	a,r2
      001382 2D               [12] 4215 	add	a,r5
      001383 FD               [12] 4216 	mov	r5,a
      001384 EC               [12] 4217 	mov	a,r4
      001385 3E               [12] 4218 	addc	a,r6
      001386 FE               [12] 4219 	mov	r6,a
      001387 C0 02            [24] 4220 	push	ar2
      001389 C0 04            [24] 4221 	push	ar4
      00138B E5*00            [12] 4222 	mov	a,_bp
      00138D 24 FB            [12] 4223 	add	a,#0xfb
      00138F F8               [12] 4224 	mov	r0,a
      001390 86 02            [24] 4225 	mov	ar2,@r0
      001392 08               [12] 4226 	inc	r0
      001393 86 03            [24] 4227 	mov	ar3,@r0
      001395 08               [12] 4228 	inc	r0
      001396 86 04            [24] 4229 	mov	ar4,@r0
      001398 C0 04            [24] 4230 	push	ar4
      00139A C0 02            [24] 4231 	push	ar2
      00139C E5*00            [12] 4232 	mov	a,_bp
      00139E 24 0E            [12] 4233 	add	a,#0x0e
      0013A0 F8               [12] 4234 	mov	r0,a
      0013A1 E6               [12] 4235 	mov	a,@r0
      0013A2 C0 E0            [24] 4236 	push	acc
      0013A4 08               [12] 4237 	inc	r0
      0013A5 E6               [12] 4238 	mov	a,@r0
      0013A6 C0 E0            [24] 4239 	push	acc
      0013A8 C0 05            [24] 4240 	push	ar5
      0013AA C0 06            [24] 4241 	push	ar6
      0013AC C0 07            [24] 4242 	push	ar7
      0013AE 8A 82            [24] 4243 	mov	dpl,r2
      0013B0 8B 83            [24] 4244 	mov	dph,r3
      0013B2 8C F0            [24] 4245 	mov	b,r4
      0013B4 12r00r00         [24] 4246 	lcall	_memcpy
      0013B7 E5 81            [12] 4247 	mov	a,sp
      0013B9 24 FB            [12] 4248 	add	a,#0xfb
      0013BB F5 81            [12] 4249 	mov	sp,a
      0013BD D0 02            [24] 4250 	pop	ar2
      0013BF D0 04            [24] 4251 	pop	ar4
                           0013C1  4252 	C$stream_buffer.c$1158$2_0$251 ==.
                                   4253 ;	src/FreeRTOS/stream_buffer.c:1158: if( xCount > xFirstLength )
      0013C1 E5*00            [12] 4254 	mov	a,_bp
      0013C3 24 0C            [12] 4255 	add	a,#0x0c
      0013C5 F8               [12] 4256 	mov	r0,a
      0013C6 E5*00            [12] 4257 	mov	a,_bp
      0013C8 24 0E            [12] 4258 	add	a,#0x0e
      0013CA F9               [12] 4259 	mov	r1,a
      0013CB C3               [12] 4260 	clr	c
      0013CC E7               [12] 4261 	mov	a,@r1
      0013CD 96               [12] 4262 	subb	a,@r0
      0013CE 09               [12] 4263 	inc	r1
      0013CF E7               [12] 4264 	mov	a,@r1
      0013D0 08               [12] 4265 	inc	r0
      0013D1 96               [12] 4266 	subb	a,@r0
      0013D2 D0 04            [24] 4267 	pop	ar4
      0013D4 D0 02            [24] 4268 	pop	ar2
      0013D6 40 03            [24] 4269 	jc	00141$
      0013D8 02r14r60         [24] 4270 	ljmp	00102$
      0013DB                       4271 00141$:
                           0013DB  4272 	C$stream_buffer.c$1162$1_0$250 ==.
                                   4273 ;	src/FreeRTOS/stream_buffer.c:1162: ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
      0013DB C0 02            [24] 4274 	push	ar2
      0013DD C0 04            [24] 4275 	push	ar4
      0013DF E5*00            [12] 4276 	mov	a,_bp
      0013E1 24 0C            [12] 4277 	add	a,#0x0c
      0013E3 F8               [12] 4278 	mov	r0,a
      0013E4 E5*00            [12] 4279 	mov	a,_bp
      0013E6 24 0E            [12] 4280 	add	a,#0x0e
      0013E8 F9               [12] 4281 	mov	r1,a
      0013E9 E6               [12] 4282 	mov	a,@r0
      0013EA C3               [12] 4283 	clr	c
      0013EB 97               [12] 4284 	subb	a,@r1
      0013EC C0 E0            [24] 4285 	push	acc
      0013EE 08               [12] 4286 	inc	r0
      0013EF E6               [12] 4287 	mov	a,@r0
      0013F0 09               [12] 4288 	inc	r1
      0013F1 97               [12] 4289 	subb	a,@r1
      0013F2 C0 E0            [24] 4290 	push	acc
      0013F4 E5*00            [12] 4291 	mov	a,_bp
      0013F6 24 08            [12] 4292 	add	a,#0x08
      0013F8 F8               [12] 4293 	mov	r0,a
      0013F9 D0 E0            [24] 4294 	pop	acc
      0013FB F6               [12] 4295 	mov	@r0,a
      0013FC 18               [12] 4296 	dec	r0
      0013FD D0 E0            [24] 4297 	pop	acc
      0013FF F6               [12] 4298 	mov	@r0,a
      001400 E5*00            [12] 4299 	mov	a,_bp
      001402 24 09            [12] 4300 	add	a,#0x09
      001404 F8               [12] 4301 	mov	r0,a
      001405 86 82            [24] 4302 	mov	dpl,@r0
      001407 08               [12] 4303 	inc	r0
      001408 86 83            [24] 4304 	mov	dph,@r0
      00140A 08               [12] 4305 	inc	r0
      00140B 86 F0            [24] 4306 	mov	b,@r0
      00140D 12r00r00         [24] 4307 	lcall	__gptrget
      001410 FB               [12] 4308 	mov	r3,a
      001411 A3               [24] 4309 	inc	dptr
      001412 12r00r00         [24] 4310 	lcall	__gptrget
      001415 FC               [12] 4311 	mov	r4,a
      001416 A3               [24] 4312 	inc	dptr
      001417 12r00r00         [24] 4313 	lcall	__gptrget
      00141A FD               [12] 4314 	mov	r5,a
      00141B E5*00            [12] 4315 	mov	a,_bp
      00141D 24 FB            [12] 4316 	add	a,#0xfb
      00141F F8               [12] 4317 	mov	r0,a
      001420 E5*00            [12] 4318 	mov	a,_bp
      001422 24 0E            [12] 4319 	add	a,#0x0e
      001424 F9               [12] 4320 	mov	r1,a
      001425 E7               [12] 4321 	mov	a,@r1
      001426 26               [12] 4322 	add	a,@r0
      001427 FA               [12] 4323 	mov	r2,a
      001428 09               [12] 4324 	inc	r1
      001429 E7               [12] 4325 	mov	a,@r1
      00142A 08               [12] 4326 	inc	r0
      00142B 36               [12] 4327 	addc	a,@r0
      00142C 08               [12] 4328 	inc	r0
      00142D 86 07            [24] 4329 	mov	ar7,@r0
      00142F 7F 00            [12] 4330 	mov	r7,#0x00
      001431 7E 40            [12] 4331 	mov	r6,#0x40
      001433 C0 04            [24] 4332 	push	ar4
      001435 C0 02            [24] 4333 	push	ar2
      001437 E5*00            [12] 4334 	mov	a,_bp
      001439 24 07            [12] 4335 	add	a,#0x07
      00143B F8               [12] 4336 	mov	r0,a
      00143C E6               [12] 4337 	mov	a,@r0
      00143D C0 E0            [24] 4338 	push	acc
      00143F 08               [12] 4339 	inc	r0
      001440 E6               [12] 4340 	mov	a,@r0
      001441 C0 E0            [24] 4341 	push	acc
      001443 C0 03            [24] 4342 	push	ar3
      001445 C0 04            [24] 4343 	push	ar4
      001447 C0 05            [24] 4344 	push	ar5
      001449 8A 82            [24] 4345 	mov	dpl,r2
      00144B 8F 83            [24] 4346 	mov	dph,r7
      00144D 8E F0            [24] 4347 	mov	b,r6
      00144F 12r00r00         [24] 4348 	lcall	_memcpy
      001452 E5 81            [12] 4349 	mov	a,sp
      001454 24 FB            [12] 4350 	add	a,#0xfb
      001456 F5 81            [12] 4351 	mov	sp,a
      001458 D0 02            [24] 4352 	pop	ar2
      00145A D0 04            [24] 4353 	pop	ar4
                           00145C  4354 	C$stream_buffer.c$1185$1_0$250 ==.
                                   4355 ;	src/FreeRTOS/stream_buffer.c:1185: return xCount;
      00145C D0 04            [24] 4356 	pop	ar4
      00145E D0 02            [24] 4357 	pop	ar2
                           001460  4358 	C$stream_buffer.c$1162$2_0$251 ==.
                                   4359 ;	src/FreeRTOS/stream_buffer.c:1162: ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
      001460                       4360 00102$:
                           001460  4361 	C$stream_buffer.c$1171$2_0$251 ==.
                                   4362 ;	src/FreeRTOS/stream_buffer.c:1171: xNextTail += xCount;
      001460 E5*00            [12] 4363 	mov	a,_bp
      001462 24 0C            [12] 4364 	add	a,#0x0c
      001464 F8               [12] 4365 	mov	r0,a
      001465 E6               [12] 4366 	mov	a,@r0
      001466 2A               [12] 4367 	add	a,r2
      001467 FA               [12] 4368 	mov	r2,a
      001468 08               [12] 4369 	inc	r0
      001469 E6               [12] 4370 	mov	a,@r0
      00146A 3C               [12] 4371 	addc	a,r4
      00146B FC               [12] 4372 	mov	r4,a
      00146C 8A 07            [24] 4373 	mov	ar7,r2
      00146E 8C 06            [24] 4374 	mov	ar6,r4
                           001470  4375 	C$stream_buffer.c$1173$2_0$251 ==.
                                   4376 ;	src/FreeRTOS/stream_buffer.c:1173: if( xNextTail >= pxStreamBuffer->xLength )
      001470 E5*00            [12] 4377 	mov	a,_bp
      001472 24 04            [12] 4378 	add	a,#0x04
      001474 F8               [12] 4379 	mov	r0,a
      001475 86 82            [24] 4380 	mov	dpl,@r0
      001477 08               [12] 4381 	inc	r0
      001478 86 83            [24] 4382 	mov	dph,@r0
      00147A 08               [12] 4383 	inc	r0
      00147B 86 F0            [24] 4384 	mov	b,@r0
      00147D 12r00r00         [24] 4385 	lcall	__gptrget
      001480 FC               [12] 4386 	mov	r4,a
      001481 A3               [24] 4387 	inc	dptr
      001482 12r00r00         [24] 4388 	lcall	__gptrget
      001485 FD               [12] 4389 	mov	r5,a
      001486 C3               [12] 4390 	clr	c
      001487 EF               [12] 4391 	mov	a,r7
      001488 9C               [12] 4392 	subb	a,r4
      001489 EE               [12] 4393 	mov	a,r6
      00148A 9D               [12] 4394 	subb	a,r5
      00148B 40 07            [24] 4395 	jc	00104$
                           00148D  4396 	C$stream_buffer.c$1175$3_0$254 ==.
                                   4397 ;	src/FreeRTOS/stream_buffer.c:1175: xNextTail -= pxStreamBuffer->xLength;
      00148D EF               [12] 4398 	mov	a,r7
      00148E C3               [12] 4399 	clr	c
      00148F 9C               [12] 4400 	subb	a,r4
      001490 FF               [12] 4401 	mov	r7,a
      001491 EE               [12] 4402 	mov	a,r6
      001492 9D               [12] 4403 	subb	a,r5
      001493 FE               [12] 4404 	mov	r6,a
      001494                       4405 00104$:
                           001494  4406 	C$stream_buffer.c$1178$2_0$251 ==.
                                   4407 ;	src/FreeRTOS/stream_buffer.c:1178: pxStreamBuffer->xTail = xNextTail;
      001494 A8*00            [24] 4408 	mov	r0,_bp
      001496 08               [12] 4409 	inc	r0
      001497 86 82            [24] 4410 	mov	dpl,@r0
      001499 08               [12] 4411 	inc	r0
      00149A 86 83            [24] 4412 	mov	dph,@r0
      00149C 08               [12] 4413 	inc	r0
      00149D 86 F0            [24] 4414 	mov	b,@r0
      00149F EF               [12] 4415 	mov	a,r7
      0014A0 12r00r00         [24] 4416 	lcall	__gptrput
      0014A3 A3               [24] 4417 	inc	dptr
      0014A4 EE               [12] 4418 	mov	a,r6
      0014A5 12r00r00         [24] 4419 	lcall	__gptrput
      0014A8                       4420 00106$:
                           0014A8  4421 	C$stream_buffer.c$1185$1_0$250 ==.
                                   4422 ;	src/FreeRTOS/stream_buffer.c:1185: return xCount;
      0014A8 E5*00            [12] 4423 	mov	a,_bp
      0014AA 24 0C            [12] 4424 	add	a,#0x0c
      0014AC F8               [12] 4425 	mov	r0,a
      0014AD 86 82            [24] 4426 	mov	dpl,@r0
      0014AF 08               [12] 4427 	inc	r0
      0014B0 86 83            [24] 4428 	mov	dph,@r0
                           0014B2  4429 	C$stream_buffer.c$1186$1_0$250 ==.
                                   4430 ;	src/FreeRTOS/stream_buffer.c:1186: }
      0014B2 85*00 81         [24] 4431 	mov	sp,_bp
      0014B5 D0*00            [24] 4432 	pop	_bp
                           0014B7  4433 	C$stream_buffer.c$1186$1_0$250 ==.
                           0014B7  4434 	XFstream_buffer$prvReadBytesFromBuffer$0$0 ==.
      0014B7 22               [24] 4435 	ret
                                   4436 ;------------------------------------------------------------
                                   4437 ;Allocation info for local variables in function 'prvBytesInBuffer'
                                   4438 ;------------------------------------------------------------
                                   4439 ;pxStreamBuffer            Allocated to stack - _bp +1
                                   4440 ;xCount                    Allocated to registers r6 r7 
                                   4441 ;------------------------------------------------------------
                           0014B8  4442 	Fstream_buffer$prvBytesInBuffer$0$0 ==.
                           0014B8  4443 	C$stream_buffer.c$1189$1_0$257 ==.
                                   4444 ;	src/FreeRTOS/stream_buffer.c:1189: static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
                                   4445 ;	-----------------------------------------
                                   4446 ;	 function prvBytesInBuffer
                                   4447 ;	-----------------------------------------
      0014B8                       4448 _prvBytesInBuffer:
      0014B8 C0*00            [24] 4449 	push	_bp
      0014BA 85 81*00         [24] 4450 	mov	_bp,sp
      0014BD C0 82            [24] 4451 	push	dpl
      0014BF C0 83            [24] 4452 	push	dph
      0014C1 C0 F0            [24] 4453 	push	b
                           0014C3  4454 	C$stream_buffer.c$1194$1_0$257 ==.
                                   4455 ;	src/FreeRTOS/stream_buffer.c:1194: xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
      0014C3 A8*00            [24] 4456 	mov	r0,_bp
      0014C5 08               [12] 4457 	inc	r0
      0014C6 74 04            [12] 4458 	mov	a,#0x04
      0014C8 26               [12] 4459 	add	a,@r0
      0014C9 FB               [12] 4460 	mov	r3,a
      0014CA E4               [12] 4461 	clr	a
      0014CB 08               [12] 4462 	inc	r0
      0014CC 36               [12] 4463 	addc	a,@r0
      0014CD FA               [12] 4464 	mov	r2,a
      0014CE 08               [12] 4465 	inc	r0
      0014CF 86 04            [24] 4466 	mov	ar4,@r0
      0014D1 8B 82            [24] 4467 	mov	dpl,r3
      0014D3 8A 83            [24] 4468 	mov	dph,r2
      0014D5 8C F0            [24] 4469 	mov	b,r4
      0014D7 12r00r00         [24] 4470 	lcall	__gptrget
      0014DA FB               [12] 4471 	mov	r3,a
      0014DB A3               [24] 4472 	inc	dptr
      0014DC 12r00r00         [24] 4473 	lcall	__gptrget
      0014DF FC               [12] 4474 	mov	r4,a
      0014E0 A8*00            [24] 4475 	mov	r0,_bp
      0014E2 08               [12] 4476 	inc	r0
      0014E3 74 02            [12] 4477 	mov	a,#0x02
      0014E5 26               [12] 4478 	add	a,@r0
      0014E6 FA               [12] 4479 	mov	r2,a
      0014E7 E4               [12] 4480 	clr	a
      0014E8 08               [12] 4481 	inc	r0
      0014E9 36               [12] 4482 	addc	a,@r0
      0014EA FE               [12] 4483 	mov	r6,a
      0014EB 08               [12] 4484 	inc	r0
      0014EC 86 07            [24] 4485 	mov	ar7,@r0
      0014EE 8A 82            [24] 4486 	mov	dpl,r2
      0014F0 8E 83            [24] 4487 	mov	dph,r6
      0014F2 8F F0            [24] 4488 	mov	b,r7
      0014F4 12r00r00         [24] 4489 	lcall	__gptrget
      0014F7 FA               [12] 4490 	mov	r2,a
      0014F8 A3               [24] 4491 	inc	dptr
      0014F9 12r00r00         [24] 4492 	lcall	__gptrget
      0014FC FE               [12] 4493 	mov	r6,a
      0014FD EA               [12] 4494 	mov	a,r2
      0014FE 2B               [12] 4495 	add	a,r3
      0014FF FA               [12] 4496 	mov	r2,a
      001500 EE               [12] 4497 	mov	a,r6
      001501 3C               [12] 4498 	addc	a,r4
      001502 FE               [12] 4499 	mov	r6,a
                           001503  4500 	C$stream_buffer.c$1195$1_0$257 ==.
                                   4501 ;	src/FreeRTOS/stream_buffer.c:1195: xCount -= pxStreamBuffer->xTail;
      001503 A8*00            [24] 4502 	mov	r0,_bp
      001505 08               [12] 4503 	inc	r0
      001506 86 82            [24] 4504 	mov	dpl,@r0
      001508 08               [12] 4505 	inc	r0
      001509 86 83            [24] 4506 	mov	dph,@r0
      00150B 08               [12] 4507 	inc	r0
      00150C 86 F0            [24] 4508 	mov	b,@r0
      00150E 12r00r00         [24] 4509 	lcall	__gptrget
      001511 FD               [12] 4510 	mov	r5,a
      001512 A3               [24] 4511 	inc	dptr
      001513 12r00r00         [24] 4512 	lcall	__gptrget
      001516 FF               [12] 4513 	mov	r7,a
      001517 EA               [12] 4514 	mov	a,r2
      001518 C3               [12] 4515 	clr	c
      001519 9D               [12] 4516 	subb	a,r5
      00151A FD               [12] 4517 	mov	r5,a
      00151B EE               [12] 4518 	mov	a,r6
      00151C 9F               [12] 4519 	subb	a,r7
      00151D FF               [12] 4520 	mov	r7,a
      00151E 8D 06            [24] 4521 	mov	ar6,r5
                           001520  4522 	C$stream_buffer.c$1196$1_0$257 ==.
                                   4523 ;	src/FreeRTOS/stream_buffer.c:1196: if ( xCount >= pxStreamBuffer->xLength )
      001520 C3               [12] 4524 	clr	c
      001521 EE               [12] 4525 	mov	a,r6
      001522 9B               [12] 4526 	subb	a,r3
      001523 EF               [12] 4527 	mov	a,r7
      001524 9C               [12] 4528 	subb	a,r4
      001525 40 07            [24] 4529 	jc	00102$
                           001527  4530 	C$stream_buffer.c$1198$2_0$258 ==.
                                   4531 ;	src/FreeRTOS/stream_buffer.c:1198: xCount -= pxStreamBuffer->xLength;
      001527 EE               [12] 4532 	mov	a,r6
      001528 C3               [12] 4533 	clr	c
      001529 9B               [12] 4534 	subb	a,r3
      00152A FE               [12] 4535 	mov	r6,a
      00152B EF               [12] 4536 	mov	a,r7
      00152C 9C               [12] 4537 	subb	a,r4
      00152D FF               [12] 4538 	mov	r7,a
      00152E                       4539 00102$:
                           00152E  4540 	C$stream_buffer.c$1205$1_0$257 ==.
                                   4541 ;	src/FreeRTOS/stream_buffer.c:1205: return xCount;
      00152E 8E 82            [24] 4542 	mov	dpl,r6
      001530 8F 83            [24] 4543 	mov	dph,r7
                           001532  4544 	C$stream_buffer.c$1206$1_0$257 ==.
                                   4545 ;	src/FreeRTOS/stream_buffer.c:1206: }
      001532 85*00 81         [24] 4546 	mov	sp,_bp
      001535 D0*00            [24] 4547 	pop	_bp
                           001537  4548 	C$stream_buffer.c$1206$1_0$257 ==.
                           001537  4549 	XFstream_buffer$prvBytesInBuffer$0$0 ==.
      001537 22               [24] 4550 	ret
                                   4551 ;------------------------------------------------------------
                                   4552 ;Allocation info for local variables in function 'prvInitialiseNewStreamBuffer'
                                   4553 ;------------------------------------------------------------
                                   4554 ;pucBuffer                 Allocated to stack - _bp -5
                                   4555 ;xBufferSizeBytes          Allocated to stack - _bp -7
                                   4556 ;xTriggerLevelBytes        Allocated to stack - _bp -9
                                   4557 ;ucFlags                   Allocated to stack - _bp -10
                                   4558 ;pxStreamBuffer            Allocated to registers r5 r6 r7 
                                   4559 ;------------------------------------------------------------
                           001538  4560 	Fstream_buffer$prvInitialiseNewStreamBuffer$0$0 ==.
                           001538  4561 	C$stream_buffer.c$1209$1_0$261 ==.
                                   4562 ;	src/FreeRTOS/stream_buffer.c:1209: static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                   4563 ;	-----------------------------------------
                                   4564 ;	 function prvInitialiseNewStreamBuffer
                                   4565 ;	-----------------------------------------
      001538                       4566 _prvInitialiseNewStreamBuffer:
      001538 C0*00            [24] 4567 	push	_bp
      00153A 85 81*00         [24] 4568 	mov	_bp,sp
      00153D AD 82            [24] 4569 	mov	r5,dpl
      00153F AE 83            [24] 4570 	mov	r6,dph
      001541 AF F0            [24] 4571 	mov	r7,b
                           001543  4572 	C$stream_buffer.c$1228$1_0$261 ==.
                                   4573 ;	src/FreeRTOS/stream_buffer.c:1228: ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
      001543 8D 02            [24] 4574 	mov	ar2,r5
      001545 8E 03            [24] 4575 	mov	ar3,r6
      001547 8F 04            [24] 4576 	mov	ar4,r7
      001549 C0 07            [24] 4577 	push	ar7
      00154B C0 06            [24] 4578 	push	ar6
      00154D C0 05            [24] 4579 	push	ar5
      00154F 74 12            [12] 4580 	mov	a,#0x12
      001551 C0 E0            [24] 4581 	push	acc
      001553 E4               [12] 4582 	clr	a
      001554 C0 E0            [24] 4583 	push	acc
      001556 C0 E0            [24] 4584 	push	acc
      001558 8A 82            [24] 4585 	mov	dpl,r2
      00155A 8B 83            [24] 4586 	mov	dph,r3
      00155C 8C F0            [24] 4587 	mov	b,r4
      00155E 12r00r00         [24] 4588 	lcall	_memset
      001561 15 81            [12] 4589 	dec	sp
      001563 15 81            [12] 4590 	dec	sp
      001565 15 81            [12] 4591 	dec	sp
      001567 D0 05            [24] 4592 	pop	ar5
      001569 D0 06            [24] 4593 	pop	ar6
      00156B D0 07            [24] 4594 	pop	ar7
                           00156D  4595 	C$stream_buffer.c$1229$1_0$261 ==.
                                   4596 ;	src/FreeRTOS/stream_buffer.c:1229: pxStreamBuffer->pucBuffer = pucBuffer;
      00156D 74 0E            [12] 4597 	mov	a,#0x0e
      00156F 2D               [12] 4598 	add	a,r5
      001570 FA               [12] 4599 	mov	r2,a
      001571 E4               [12] 4600 	clr	a
      001572 3E               [12] 4601 	addc	a,r6
      001573 FB               [12] 4602 	mov	r3,a
      001574 8F 04            [24] 4603 	mov	ar4,r7
      001576 8A 82            [24] 4604 	mov	dpl,r2
      001578 8B 83            [24] 4605 	mov	dph,r3
      00157A 8C F0            [24] 4606 	mov	b,r4
      00157C E5*00            [12] 4607 	mov	a,_bp
      00157E 24 FB            [12] 4608 	add	a,#0xfb
      001580 F8               [12] 4609 	mov	r0,a
      001581 E6               [12] 4610 	mov	a,@r0
      001582 12r00r00         [24] 4611 	lcall	__gptrput
      001585 A3               [24] 4612 	inc	dptr
      001586 08               [12] 4613 	inc	r0
      001587 E6               [12] 4614 	mov	a,@r0
      001588 12r00r00         [24] 4615 	lcall	__gptrput
      00158B A3               [24] 4616 	inc	dptr
      00158C 08               [12] 4617 	inc	r0
      00158D E6               [12] 4618 	mov	a,@r0
      00158E 12r00r00         [24] 4619 	lcall	__gptrput
                           001591  4620 	C$stream_buffer.c$1230$1_0$261 ==.
                                   4621 ;	src/FreeRTOS/stream_buffer.c:1230: pxStreamBuffer->xLength = xBufferSizeBytes;
      001591 74 04            [12] 4622 	mov	a,#0x04
      001593 2D               [12] 4623 	add	a,r5
      001594 FA               [12] 4624 	mov	r2,a
      001595 E4               [12] 4625 	clr	a
      001596 3E               [12] 4626 	addc	a,r6
      001597 FB               [12] 4627 	mov	r3,a
      001598 8F 04            [24] 4628 	mov	ar4,r7
      00159A 8A 82            [24] 4629 	mov	dpl,r2
      00159C 8B 83            [24] 4630 	mov	dph,r3
      00159E 8C F0            [24] 4631 	mov	b,r4
      0015A0 E5*00            [12] 4632 	mov	a,_bp
      0015A2 24 F9            [12] 4633 	add	a,#0xf9
      0015A4 F8               [12] 4634 	mov	r0,a
      0015A5 E6               [12] 4635 	mov	a,@r0
      0015A6 12r00r00         [24] 4636 	lcall	__gptrput
      0015A9 A3               [24] 4637 	inc	dptr
      0015AA 08               [12] 4638 	inc	r0
      0015AB E6               [12] 4639 	mov	a,@r0
      0015AC 12r00r00         [24] 4640 	lcall	__gptrput
                           0015AF  4641 	C$stream_buffer.c$1231$1_0$261 ==.
                                   4642 ;	src/FreeRTOS/stream_buffer.c:1231: pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
      0015AF 74 06            [12] 4643 	mov	a,#0x06
      0015B1 2D               [12] 4644 	add	a,r5
      0015B2 FA               [12] 4645 	mov	r2,a
      0015B3 E4               [12] 4646 	clr	a
      0015B4 3E               [12] 4647 	addc	a,r6
      0015B5 FB               [12] 4648 	mov	r3,a
      0015B6 8F 04            [24] 4649 	mov	ar4,r7
      0015B8 8A 82            [24] 4650 	mov	dpl,r2
      0015BA 8B 83            [24] 4651 	mov	dph,r3
      0015BC 8C F0            [24] 4652 	mov	b,r4
      0015BE E5*00            [12] 4653 	mov	a,_bp
      0015C0 24 F7            [12] 4654 	add	a,#0xf7
      0015C2 F8               [12] 4655 	mov	r0,a
      0015C3 E6               [12] 4656 	mov	a,@r0
      0015C4 12r00r00         [24] 4657 	lcall	__gptrput
      0015C7 A3               [24] 4658 	inc	dptr
      0015C8 08               [12] 4659 	inc	r0
      0015C9 E6               [12] 4660 	mov	a,@r0
      0015CA 12r00r00         [24] 4661 	lcall	__gptrput
                           0015CD  4662 	C$stream_buffer.c$1232$1_0$261 ==.
                                   4663 ;	src/FreeRTOS/stream_buffer.c:1232: pxStreamBuffer->ucFlags = ucFlags;
      0015CD 74 11            [12] 4664 	mov	a,#0x11
      0015CF 2D               [12] 4665 	add	a,r5
      0015D0 FD               [12] 4666 	mov	r5,a
      0015D1 E4               [12] 4667 	clr	a
      0015D2 3E               [12] 4668 	addc	a,r6
      0015D3 FE               [12] 4669 	mov	r6,a
      0015D4 8D 82            [24] 4670 	mov	dpl,r5
      0015D6 8E 83            [24] 4671 	mov	dph,r6
      0015D8 8F F0            [24] 4672 	mov	b,r7
      0015DA E5*00            [12] 4673 	mov	a,_bp
      0015DC 24 F6            [12] 4674 	add	a,#0xf6
      0015DE F8               [12] 4675 	mov	r0,a
      0015DF E6               [12] 4676 	mov	a,@r0
      0015E0 12r00r00         [24] 4677 	lcall	__gptrput
                           0015E3  4678 	C$stream_buffer.c$1233$1_0$261 ==.
                                   4679 ;	src/FreeRTOS/stream_buffer.c:1233: }
      0015E3 D0*00            [24] 4680 	pop	_bp
                           0015E5  4681 	C$stream_buffer.c$1233$1_0$261 ==.
                           0015E5  4682 	XFstream_buffer$prvInitialiseNewStreamBuffer$0$0 ==.
      0015E5 22               [24] 4683 	ret
                                   4684 	.area CSEG    (CODE)
                                   4685 	.area CONST   (CODE)
                                   4686 	.area CABS    (ABS,CODE)
