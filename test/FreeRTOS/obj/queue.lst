                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module queue
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _vTaskInternalSetTimeOutState
                                     12 	.globl _vTaskMissedYield
                                     13 	.globl _xTaskCheckForTimeOut
                                     14 	.globl _xTaskRemoveFromEventList
                                     15 	.globl _vTaskPlaceOnEventList
                                     16 	.globl _xTaskResumeAll
                                     17 	.globl _vTaskSuspendAll
                                     18 	.globl _vListInitialise
                                     19 	.globl _vPortFree
                                     20 	.globl _pvPortMalloc
                                     21 	.globl _vPortYield
                                     22 	.globl _memcpy
                                     23 	.globl _P3_7
                                     24 	.globl _P3_6
                                     25 	.globl _P3_5
                                     26 	.globl _P3_4
                                     27 	.globl _P3_3
                                     28 	.globl _P3_2
                                     29 	.globl _P3_1
                                     30 	.globl _P3_0
                                     31 	.globl _P2_7
                                     32 	.globl _P2_6
                                     33 	.globl _P2_5
                                     34 	.globl _P2_4
                                     35 	.globl _P2_3
                                     36 	.globl _P2_2
                                     37 	.globl _P2_1
                                     38 	.globl _P2_0
                                     39 	.globl _P1_7
                                     40 	.globl _P1_6
                                     41 	.globl _P1_5
                                     42 	.globl _P1_4
                                     43 	.globl _P1_3
                                     44 	.globl _P1_2
                                     45 	.globl _P1_1
                                     46 	.globl _P1_0
                                     47 	.globl _P0_7
                                     48 	.globl _P0_6
                                     49 	.globl _P0_5
                                     50 	.globl _P0_4
                                     51 	.globl _P0_3
                                     52 	.globl _P0_2
                                     53 	.globl _P0_1
                                     54 	.globl _P0_0
                                     55 	.globl _EIRQ7
                                     56 	.globl _EIRQ6
                                     57 	.globl _EIRQ5
                                     58 	.globl _EIRQ4
                                     59 	.globl _EIRQ3
                                     60 	.globl _EIRQ2
                                     61 	.globl _EIRQ1
                                     62 	.globl _EIRQ0
                                     63 	.globl _T0CEN
                                     64 	.globl _T0ARL
                                     65 	.globl _T0IRQ
                                     66 	.globl _RXRDY
                                     67 	.globl _TXRDY
                                     68 	.globl _RXIRQ
                                     69 	.globl _TXIRQ
                                     70 	.globl _EEX
                                     71 	.globl _ET0
                                     72 	.globl _ES
                                     73 	.globl _EA
                                     74 	.globl _P3
                                     75 	.globl _P2
                                     76 	.globl _P1
                                     77 	.globl _P0
                                     78 	.globl _EXTINT
                                     79 	.globl _T0CH
                                     80 	.globl _T0CL
                                     81 	.globl _T0H
                                     82 	.globl _T0L
                                     83 	.globl _TCON
                                     84 	.globl _SBPH
                                     85 	.globl _SBPL
                                     86 	.globl _SBUF
                                     87 	.globl _SCON
                                     88 	.globl _IE
                                     89 	.globl _DPL
                                     90 	.globl _DPH
                                     91 	.globl _SP
                                     92 	.globl _PSW
                                     93 	.globl _B
                                     94 	.globl _ACC
                                     95 	.globl _xQueueGenericReset
                                     96 	.globl _xQueueGenericCreate
                                     97 	.globl _xQueueGenericSend
                                     98 	.globl _xQueueGenericSendFromISR
                                     99 	.globl _xQueueGiveFromISR
                                    100 	.globl _xQueueReceive
                                    101 	.globl _xQueueSemaphoreTake
                                    102 	.globl _xQueuePeek
                                    103 	.globl _xQueueReceiveFromISR
                                    104 	.globl _xQueuePeekFromISR
                                    105 	.globl _uxQueueMessagesWaiting
                                    106 	.globl _uxQueueSpacesAvailable
                                    107 	.globl _uxQueueMessagesWaitingFromISR
                                    108 	.globl _vQueueDelete
                                    109 	.globl _xQueueIsQueueEmptyFromISR
                                    110 	.globl _xQueueIsQueueFullFromISR
                                    111 ;--------------------------------------------------------
                                    112 ; special function registers
                                    113 ;--------------------------------------------------------
                                    114 	.area RSEG    (ABS,DATA)
      000000                        115 	.org 0x0000
                           0000E0   116 G$ACC$0_0$0 == 0x00e0
                           0000E0   117 _ACC	=	0x00e0
                           0000F0   118 G$B$0_0$0 == 0x00f0
                           0000F0   119 _B	=	0x00f0
                           0000D0   120 G$PSW$0_0$0 == 0x00d0
                           0000D0   121 _PSW	=	0x00d0
                           000081   122 G$SP$0_0$0 == 0x0081
                           000081   123 _SP	=	0x0081
                           000083   124 G$DPH$0_0$0 == 0x0083
                           000083   125 _DPH	=	0x0083
                           000082   126 G$DPL$0_0$0 == 0x0082
                           000082   127 _DPL	=	0x0082
                           0000A8   128 G$IE$0_0$0 == 0x00a8
                           0000A8   129 _IE	=	0x00a8
                           000098   130 G$SCON$0_0$0 == 0x0098
                           000098   131 _SCON	=	0x0098
                           000099   132 G$SBUF$0_0$0 == 0x0099
                           000099   133 _SBUF	=	0x0099
                           00009A   134 G$SBPL$0_0$0 == 0x009a
                           00009A   135 _SBPL	=	0x009a
                           00009B   136 G$SBPH$0_0$0 == 0x009b
                           00009B   137 _SBPH	=	0x009b
                           000088   138 G$TCON$0_0$0 == 0x0088
                           000088   139 _TCON	=	0x0088
                           00008C   140 G$T0L$0_0$0 == 0x008c
                           00008C   141 _T0L	=	0x008c
                           00008D   142 G$T0H$0_0$0 == 0x008d
                           00008D   143 _T0H	=	0x008d
                           00008E   144 G$T0CL$0_0$0 == 0x008e
                           00008E   145 _T0CL	=	0x008e
                           00008F   146 G$T0CH$0_0$0 == 0x008f
                           00008F   147 _T0CH	=	0x008f
                           0000C0   148 G$EXTINT$0_0$0 == 0x00c0
                           0000C0   149 _EXTINT	=	0x00c0
                           000080   150 G$P0$0_0$0 == 0x0080
                           000080   151 _P0	=	0x0080
                           000090   152 G$P1$0_0$0 == 0x0090
                           000090   153 _P1	=	0x0090
                           0000A0   154 G$P2$0_0$0 == 0x00a0
                           0000A0   155 _P2	=	0x00a0
                           0000B0   156 G$P3$0_0$0 == 0x00b0
                           0000B0   157 _P3	=	0x00b0
                                    158 ;--------------------------------------------------------
                                    159 ; special function bits
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           0000AF   163 G$EA$0_0$0 == 0x00af
                           0000AF   164 _EA	=	0x00af
                           0000AC   165 G$ES$0_0$0 == 0x00ac
                           0000AC   166 _ES	=	0x00ac
                           0000A9   167 G$ET0$0_0$0 == 0x00a9
                           0000A9   168 _ET0	=	0x00a9
                           0000A8   169 G$EEX$0_0$0 == 0x00a8
                           0000A8   170 _EEX	=	0x00a8
                           00009C   171 G$TXIRQ$0_0$0 == 0x009c
                           00009C   172 _TXIRQ	=	0x009c
                           00009D   173 G$RXIRQ$0_0$0 == 0x009d
                           00009D   174 _RXIRQ	=	0x009d
                           00009C   175 G$TXRDY$0_0$0 == 0x009c
                           00009C   176 _TXRDY	=	0x009c
                           00009D   177 G$RXRDY$0_0$0 == 0x009d
                           00009D   178 _RXRDY	=	0x009d
                           000088   179 G$T0IRQ$0_0$0 == 0x0088
                           000088   180 _T0IRQ	=	0x0088
                           00008C   181 G$T0ARL$0_0$0 == 0x008c
                           00008C   182 _T0ARL	=	0x008c
                           00008D   183 G$T0CEN$0_0$0 == 0x008d
                           00008D   184 _T0CEN	=	0x008d
                           0000C0   185 G$EIRQ0$0_0$0 == 0x00c0
                           0000C0   186 _EIRQ0	=	0x00c0
                           0000C1   187 G$EIRQ1$0_0$0 == 0x00c1
                           0000C1   188 _EIRQ1	=	0x00c1
                           0000C2   189 G$EIRQ2$0_0$0 == 0x00c2
                           0000C2   190 _EIRQ2	=	0x00c2
                           0000C3   191 G$EIRQ3$0_0$0 == 0x00c3
                           0000C3   192 _EIRQ3	=	0x00c3
                           0000C4   193 G$EIRQ4$0_0$0 == 0x00c4
                           0000C4   194 _EIRQ4	=	0x00c4
                           0000C5   195 G$EIRQ5$0_0$0 == 0x00c5
                           0000C5   196 _EIRQ5	=	0x00c5
                           0000C6   197 G$EIRQ6$0_0$0 == 0x00c6
                           0000C6   198 _EIRQ6	=	0x00c6
                           0000C7   199 G$EIRQ7$0_0$0 == 0x00c7
                           0000C7   200 _EIRQ7	=	0x00c7
                           000080   201 G$P0_0$0_0$0 == 0x0080
                           000080   202 _P0_0	=	0x0080
                           000081   203 G$P0_1$0_0$0 == 0x0081
                           000081   204 _P0_1	=	0x0081
                           000082   205 G$P0_2$0_0$0 == 0x0082
                           000082   206 _P0_2	=	0x0082
                           000083   207 G$P0_3$0_0$0 == 0x0083
                           000083   208 _P0_3	=	0x0083
                           000084   209 G$P0_4$0_0$0 == 0x0084
                           000084   210 _P0_4	=	0x0084
                           000085   211 G$P0_5$0_0$0 == 0x0085
                           000085   212 _P0_5	=	0x0085
                           000086   213 G$P0_6$0_0$0 == 0x0086
                           000086   214 _P0_6	=	0x0086
                           000087   215 G$P0_7$0_0$0 == 0x0087
                           000087   216 _P0_7	=	0x0087
                           000090   217 G$P1_0$0_0$0 == 0x0090
                           000090   218 _P1_0	=	0x0090
                           000091   219 G$P1_1$0_0$0 == 0x0091
                           000091   220 _P1_1	=	0x0091
                           000092   221 G$P1_2$0_0$0 == 0x0092
                           000092   222 _P1_2	=	0x0092
                           000093   223 G$P1_3$0_0$0 == 0x0093
                           000093   224 _P1_3	=	0x0093
                           000094   225 G$P1_4$0_0$0 == 0x0094
                           000094   226 _P1_4	=	0x0094
                           000095   227 G$P1_5$0_0$0 == 0x0095
                           000095   228 _P1_5	=	0x0095
                           000096   229 G$P1_6$0_0$0 == 0x0096
                           000096   230 _P1_6	=	0x0096
                           000097   231 G$P1_7$0_0$0 == 0x0097
                           000097   232 _P1_7	=	0x0097
                           0000A0   233 G$P2_0$0_0$0 == 0x00a0
                           0000A0   234 _P2_0	=	0x00a0
                           0000A1   235 G$P2_1$0_0$0 == 0x00a1
                           0000A1   236 _P2_1	=	0x00a1
                           0000A2   237 G$P2_2$0_0$0 == 0x00a2
                           0000A2   238 _P2_2	=	0x00a2
                           0000A3   239 G$P2_3$0_0$0 == 0x00a3
                           0000A3   240 _P2_3	=	0x00a3
                           0000A4   241 G$P2_4$0_0$0 == 0x00a4
                           0000A4   242 _P2_4	=	0x00a4
                           0000A5   243 G$P2_5$0_0$0 == 0x00a5
                           0000A5   244 _P2_5	=	0x00a5
                           0000A6   245 G$P2_6$0_0$0 == 0x00a6
                           0000A6   246 _P2_6	=	0x00a6
                           0000A7   247 G$P2_7$0_0$0 == 0x00a7
                           0000A7   248 _P2_7	=	0x00a7
                           0000B0   249 G$P3_0$0_0$0 == 0x00b0
                           0000B0   250 _P3_0	=	0x00b0
                           0000B1   251 G$P3_1$0_0$0 == 0x00b1
                           0000B1   252 _P3_1	=	0x00b1
                           0000B2   253 G$P3_2$0_0$0 == 0x00b2
                           0000B2   254 _P3_2	=	0x00b2
                           0000B3   255 G$P3_3$0_0$0 == 0x00b3
                           0000B3   256 _P3_3	=	0x00b3
                           0000B4   257 G$P3_4$0_0$0 == 0x00b4
                           0000B4   258 _P3_4	=	0x00b4
                           0000B5   259 G$P3_5$0_0$0 == 0x00b5
                           0000B5   260 _P3_5	=	0x00b5
                           0000B6   261 G$P3_6$0_0$0 == 0x00b6
                           0000B6   262 _P3_6	=	0x00b6
                           0000B7   263 G$P3_7$0_0$0 == 0x00b7
                           0000B7   264 _P3_7	=	0x00b7
                                    265 ;--------------------------------------------------------
                                    266 ; overlayable register banks
                                    267 ;--------------------------------------------------------
                                    268 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        269 	.ds 8
                                    270 ;--------------------------------------------------------
                                    271 ; internal ram data
                                    272 ;--------------------------------------------------------
                                    273 	.area DSEG    (DATA)
                                    274 ;--------------------------------------------------------
                                    275 ; overlayable items in internal ram 
                                    276 ;--------------------------------------------------------
                                    277 ;--------------------------------------------------------
                                    278 ; indirectly addressable internal ram data
                                    279 ;--------------------------------------------------------
                                    280 	.area ISEG    (DATA)
                                    281 ;--------------------------------------------------------
                                    282 ; absolute internal ram data
                                    283 ;--------------------------------------------------------
                                    284 	.area IABS    (ABS,DATA)
                                    285 	.area IABS    (ABS,DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; bit data
                                    288 ;--------------------------------------------------------
                                    289 	.area BSEG    (BIT)
                                    290 ;--------------------------------------------------------
                                    291 ; paged external ram data
                                    292 ;--------------------------------------------------------
                                    293 	.area PSEG    (PAG,XDATA)
                                    294 ;--------------------------------------------------------
                                    295 ; external ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area XSEG    (XDATA)
                                    298 ;--------------------------------------------------------
                                    299 ; absolute external ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area XABS    (ABS,XDATA)
                                    302 ;--------------------------------------------------------
                                    303 ; external initialized ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area HOME    (CODE)
                                    306 	.area GSINIT0 (CODE)
                                    307 	.area GSINIT1 (CODE)
                                    308 	.area GSINIT2 (CODE)
                                    309 	.area GSINIT3 (CODE)
                                    310 	.area GSINIT4 (CODE)
                                    311 	.area GSINIT5 (CODE)
                                    312 	.area GSINIT  (CODE)
                                    313 	.area GSFINAL (CODE)
                                    314 	.area CSEG    (CODE)
                                    315 ;--------------------------------------------------------
                                    316 ; global & static initialisations
                                    317 ;--------------------------------------------------------
                                    318 	.area HOME    (CODE)
                                    319 	.area GSINIT  (CODE)
                                    320 	.area GSFINAL (CODE)
                                    321 	.area GSINIT  (CODE)
                                    322 ;--------------------------------------------------------
                                    323 ; Home
                                    324 ;--------------------------------------------------------
                                    325 	.area HOME    (CODE)
                                    326 	.area HOME    (CODE)
                                    327 ;--------------------------------------------------------
                                    328 ; code
                                    329 ;--------------------------------------------------------
                                    330 	.area CSEG    (CODE)
                                    331 ;------------------------------------------------------------
                                    332 ;Allocation info for local variables in function 'xQueueGenericReset'
                                    333 ;------------------------------------------------------------
                                    334 ;xNewQueue                 Allocated to stack - _bp -3
                                    335 ;xQueue                    Allocated to stack - _bp +1
                                    336 ;pxQueue                   Allocated to registers 
                                    337 ;sloc0                     Allocated to stack - _bp +4
                                    338 ;sloc1                     Allocated to stack - _bp +7
                                    339 ;sloc2                     Allocated to stack - _bp +13
                                    340 ;sloc3                     Allocated to stack - _bp +10
                                    341 ;------------------------------------------------------------
                           000000   342 	G$xQueueGenericReset$0$0 ==.
                           000000   343 	C$queue.c$255$0_0$168 ==.
                                    344 ;	src/FreeRTOS/queue.c:255: BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
                                    345 ;	-----------------------------------------
                                    346 ;	 function xQueueGenericReset
                                    347 ;	-----------------------------------------
      000000                        348 _xQueueGenericReset:
                           000007   349 	ar7 = 0x07
                           000006   350 	ar6 = 0x06
                           000005   351 	ar5 = 0x05
                           000004   352 	ar4 = 0x04
                           000003   353 	ar3 = 0x03
                           000002   354 	ar2 = 0x02
                           000001   355 	ar1 = 0x01
                           000000   356 	ar0 = 0x00
      000000 C0*00            [24]  357 	push	_bp
      000002 85 81*00         [24]  358 	mov	_bp,sp
      000005 C0 82            [24]  359 	push	dpl
      000007 C0 83            [24]  360 	push	dph
      000009 C0 F0            [24]  361 	push	b
      00000B E5 81            [12]  362 	mov	a,sp
      00000D 24 09            [12]  363 	add	a,#0x09
      00000F F5 81            [12]  364 	mov	sp,a
                           000011   365 	C$queue.c$261$1_0$168 ==.
                                    366 ;	src/FreeRTOS/queue.c:261: taskENTER_CRITICAL();
      000011 C0 E0            [24]  367 	push ACC 
      000013 C0 A8            [24]  368 	push IE 
                                    369 ;	assignBit
      000015 C2 AF            [12]  370 	clr	_EA
                           000017   371 	C$queue.c$263$2_0$169 ==.
                                    372 ;	src/FreeRTOS/queue.c:263: pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
      000017 A8*00            [24]  373 	mov	r0,_bp
      000019 08               [12]  374 	inc	r0
      00001A 74 06            [12]  375 	mov	a,#0x06
      00001C 26               [12]  376 	add	a,@r0
      00001D FA               [12]  377 	mov	r2,a
      00001E E4               [12]  378 	clr	a
      00001F 08               [12]  379 	inc	r0
      000020 36               [12]  380 	addc	a,@r0
      000021 FB               [12]  381 	mov	r3,a
      000022 08               [12]  382 	inc	r0
      000023 86 04            [24]  383 	mov	ar4,@r0
      000025 A8*00            [24]  384 	mov	r0,_bp
      000027 08               [12]  385 	inc	r0
      000028 86 82            [24]  386 	mov	dpl,@r0
      00002A 08               [12]  387 	inc	r0
      00002B 86 83            [24]  388 	mov	dph,@r0
      00002D 08               [12]  389 	inc	r0
      00002E 86 F0            [24]  390 	mov	b,@r0
      000030 E5*00            [12]  391 	mov	a,_bp
      000032 24 04            [12]  392 	add	a,#0x04
      000034 F9               [12]  393 	mov	r1,a
      000035 12r00r00         [24]  394 	lcall	__gptrget
      000038 F7               [12]  395 	mov	@r1,a
      000039 A3               [24]  396 	inc	dptr
      00003A 12r00r00         [24]  397 	lcall	__gptrget
      00003D 09               [12]  398 	inc	r1
      00003E F7               [12]  399 	mov	@r1,a
      00003F A3               [24]  400 	inc	dptr
      000040 12r00r00         [24]  401 	lcall	__gptrget
      000043 09               [12]  402 	inc	r1
      000044 F7               [12]  403 	mov	@r1,a
      000045 A8*00            [24]  404 	mov	r0,_bp
      000047 08               [12]  405 	inc	r0
      000048 E5*00            [12]  406 	mov	a,_bp
      00004A 24 07            [12]  407 	add	a,#0x07
      00004C F9               [12]  408 	mov	r1,a
      00004D 74 25            [12]  409 	mov	a,#0x25
      00004F 26               [12]  410 	add	a,@r0
      000050 F7               [12]  411 	mov	@r1,a
      000051 E4               [12]  412 	clr	a
      000052 08               [12]  413 	inc	r0
      000053 36               [12]  414 	addc	a,@r0
      000054 09               [12]  415 	inc	r1
      000055 F7               [12]  416 	mov	@r1,a
      000056 08               [12]  417 	inc	r0
      000057 09               [12]  418 	inc	r1
      000058 E6               [12]  419 	mov	a,@r0
      000059 F7               [12]  420 	mov	@r1,a
      00005A E5*00            [12]  421 	mov	a,_bp
      00005C 24 07            [12]  422 	add	a,#0x07
      00005E F8               [12]  423 	mov	r0,a
      00005F 86 82            [24]  424 	mov	dpl,@r0
      000061 08               [12]  425 	inc	r0
      000062 86 83            [24]  426 	mov	dph,@r0
      000064 08               [12]  427 	inc	r0
      000065 86 F0            [24]  428 	mov	b,@r0
      000067 12r00r00         [24]  429 	lcall	__gptrget
      00006A FE               [12]  430 	mov	r6,a
      00006B A8*00            [24]  431 	mov	r0,_bp
      00006D 08               [12]  432 	inc	r0
      00006E E5*00            [12]  433 	mov	a,_bp
      000070 24 0A            [12]  434 	add	a,#0x0a
      000072 F9               [12]  435 	mov	r1,a
      000073 74 26            [12]  436 	mov	a,#0x26
      000075 26               [12]  437 	add	a,@r0
      000076 F7               [12]  438 	mov	@r1,a
      000077 E4               [12]  439 	clr	a
      000078 08               [12]  440 	inc	r0
      000079 36               [12]  441 	addc	a,@r0
      00007A 09               [12]  442 	inc	r1
      00007B F7               [12]  443 	mov	@r1,a
      00007C 08               [12]  444 	inc	r0
      00007D 09               [12]  445 	inc	r1
      00007E E6               [12]  446 	mov	a,@r0
      00007F F7               [12]  447 	mov	@r1,a
      000080 E5*00            [12]  448 	mov	a,_bp
      000082 24 0A            [12]  449 	add	a,#0x0a
      000084 F8               [12]  450 	mov	r0,a
      000085 86 82            [24]  451 	mov	dpl,@r0
      000087 08               [12]  452 	inc	r0
      000088 86 83            [24]  453 	mov	dph,@r0
      00008A 08               [12]  454 	inc	r0
      00008B 86 F0            [24]  455 	mov	b,@r0
      00008D 12r00r00         [24]  456 	lcall	__gptrget
      000090 8E F0            [24]  457 	mov	b,r6
      000092 A4               [48]  458 	mul	ab
      000093 C8               [12]  459 	xch	a,r0
      000094 E5*00            [12]  460 	mov	a,_bp
      000096 24 04            [12]  461 	add	a,#0x04
      000098 C8               [12]  462 	xch	a,r0
      000099 26               [12]  463 	add	a,@r0
      00009A FD               [12]  464 	mov	r5,a
      00009B 08               [12]  465 	inc	r0
      00009C E6               [12]  466 	mov	a,@r0
      00009D 35 F0            [12]  467 	addc	a,b
      00009F FE               [12]  468 	mov	r6,a
      0000A0 08               [12]  469 	inc	r0
      0000A1 86 07            [24]  470 	mov	ar7,@r0
      0000A3 8A 82            [24]  471 	mov	dpl,r2
      0000A5 8B 83            [24]  472 	mov	dph,r3
      0000A7 8C F0            [24]  473 	mov	b,r4
      0000A9 ED               [12]  474 	mov	a,r5
      0000AA 12r00r00         [24]  475 	lcall	__gptrput
      0000AD A3               [24]  476 	inc	dptr
      0000AE EE               [12]  477 	mov	a,r6
      0000AF 12r00r00         [24]  478 	lcall	__gptrput
      0000B2 A3               [24]  479 	inc	dptr
      0000B3 EF               [12]  480 	mov	a,r7
      0000B4 12r00r00         [24]  481 	lcall	__gptrput
                           0000B7   482 	C$queue.c$264$2_0$169 ==.
                                    483 ;	src/FreeRTOS/queue.c:264: pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
      0000B7 A8*00            [24]  484 	mov	r0,_bp
      0000B9 08               [12]  485 	inc	r0
      0000BA 74 24            [12]  486 	mov	a,#0x24
      0000BC 26               [12]  487 	add	a,@r0
      0000BD FD               [12]  488 	mov	r5,a
      0000BE E4               [12]  489 	clr	a
      0000BF 08               [12]  490 	inc	r0
      0000C0 36               [12]  491 	addc	a,@r0
      0000C1 FE               [12]  492 	mov	r6,a
      0000C2 08               [12]  493 	inc	r0
      0000C3 86 07            [24]  494 	mov	ar7,@r0
      0000C5 8D 82            [24]  495 	mov	dpl,r5
      0000C7 8E 83            [24]  496 	mov	dph,r6
      0000C9 8F F0            [24]  497 	mov	b,r7
      0000CB E4               [12]  498 	clr	a
      0000CC 12r00r00         [24]  499 	lcall	__gptrput
                           0000CF   500 	C$queue.c$265$2_0$169 ==.
                                    501 ;	src/FreeRTOS/queue.c:265: pxQueue->pcWriteTo = pxQueue->pcHead;
      0000CF A8*00            [24]  502 	mov	r0,_bp
      0000D1 08               [12]  503 	inc	r0
      0000D2 E5*00            [12]  504 	mov	a,_bp
      0000D4 24 04            [12]  505 	add	a,#0x04
      0000D6 F9               [12]  506 	mov	r1,a
      0000D7 74 03            [12]  507 	mov	a,#0x03
      0000D9 26               [12]  508 	add	a,@r0
      0000DA F7               [12]  509 	mov	@r1,a
      0000DB E4               [12]  510 	clr	a
      0000DC 08               [12]  511 	inc	r0
      0000DD 36               [12]  512 	addc	a,@r0
      0000DE 09               [12]  513 	inc	r1
      0000DF F7               [12]  514 	mov	@r1,a
      0000E0 08               [12]  515 	inc	r0
      0000E1 09               [12]  516 	inc	r1
      0000E2 E6               [12]  517 	mov	a,@r0
      0000E3 F7               [12]  518 	mov	@r1,a
      0000E4 A8*00            [24]  519 	mov	r0,_bp
      0000E6 08               [12]  520 	inc	r0
      0000E7 86 82            [24]  521 	mov	dpl,@r0
      0000E9 08               [12]  522 	inc	r0
      0000EA 86 83            [24]  523 	mov	dph,@r0
      0000EC 08               [12]  524 	inc	r0
      0000ED 86 F0            [24]  525 	mov	b,@r0
      0000EF 12r00r00         [24]  526 	lcall	__gptrget
      0000F2 FD               [12]  527 	mov	r5,a
      0000F3 A3               [24]  528 	inc	dptr
      0000F4 12r00r00         [24]  529 	lcall	__gptrget
      0000F7 FE               [12]  530 	mov	r6,a
      0000F8 A3               [24]  531 	inc	dptr
      0000F9 12r00r00         [24]  532 	lcall	__gptrget
      0000FC FF               [12]  533 	mov	r7,a
      0000FD E5*00            [12]  534 	mov	a,_bp
      0000FF 24 04            [12]  535 	add	a,#0x04
      000101 F8               [12]  536 	mov	r0,a
      000102 86 82            [24]  537 	mov	dpl,@r0
      000104 08               [12]  538 	inc	r0
      000105 86 83            [24]  539 	mov	dph,@r0
      000107 08               [12]  540 	inc	r0
      000108 86 F0            [24]  541 	mov	b,@r0
      00010A ED               [12]  542 	mov	a,r5
      00010B 12r00r00         [24]  543 	lcall	__gptrput
      00010E A3               [24]  544 	inc	dptr
      00010F EE               [12]  545 	mov	a,r6
      000110 12r00r00         [24]  546 	lcall	__gptrput
      000113 A3               [24]  547 	inc	dptr
      000114 EF               [12]  548 	mov	a,r7
      000115 12r00r00         [24]  549 	lcall	__gptrput
                           000118   550 	C$queue.c$266$2_0$169 ==.
                                    551 ;	src/FreeRTOS/queue.c:266: pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
      000118 74 03            [12]  552 	mov	a,#0x03
      00011A 2A               [12]  553 	add	a,r2
      00011B FA               [12]  554 	mov	r2,a
      00011C E4               [12]  555 	clr	a
      00011D 3B               [12]  556 	addc	a,r3
      00011E FB               [12]  557 	mov	r3,a
      00011F A8*00            [24]  558 	mov	r0,_bp
      000121 08               [12]  559 	inc	r0
      000122 86 82            [24]  560 	mov	dpl,@r0
      000124 08               [12]  561 	inc	r0
      000125 86 83            [24]  562 	mov	dph,@r0
      000127 08               [12]  563 	inc	r0
      000128 86 F0            [24]  564 	mov	b,@r0
      00012A E5*00            [12]  565 	mov	a,_bp
      00012C 24 04            [12]  566 	add	a,#0x04
      00012E F9               [12]  567 	mov	r1,a
      00012F 12r00r00         [24]  568 	lcall	__gptrget
      000132 F7               [12]  569 	mov	@r1,a
      000133 A3               [24]  570 	inc	dptr
      000134 12r00r00         [24]  571 	lcall	__gptrget
      000137 09               [12]  572 	inc	r1
      000138 F7               [12]  573 	mov	@r1,a
      000139 A3               [24]  574 	inc	dptr
      00013A 12r00r00         [24]  575 	lcall	__gptrget
      00013D 09               [12]  576 	inc	r1
      00013E F7               [12]  577 	mov	@r1,a
      00013F E5*00            [12]  578 	mov	a,_bp
      000141 24 07            [12]  579 	add	a,#0x07
      000143 F8               [12]  580 	mov	r0,a
      000144 86 82            [24]  581 	mov	dpl,@r0
      000146 08               [12]  582 	inc	r0
      000147 86 83            [24]  583 	mov	dph,@r0
      000149 08               [12]  584 	inc	r0
      00014A 86 F0            [24]  585 	mov	b,@r0
      00014C 12r00r00         [24]  586 	lcall	__gptrget
      00014F FF               [12]  587 	mov	r7,a
      000150 7E 00            [12]  588 	mov	r6,#0x00
      000152 E5*00            [12]  589 	mov	a,_bp
      000154 24 07            [12]  590 	add	a,#0x07
      000156 F8               [12]  591 	mov	r0,a
      000157 EF               [12]  592 	mov	a,r7
      000158 24 FF            [12]  593 	add	a,#0xff
      00015A F6               [12]  594 	mov	@r0,a
      00015B EE               [12]  595 	mov	a,r6
      00015C 34 FF            [12]  596 	addc	a,#0xff
      00015E 08               [12]  597 	inc	r0
      00015F F6               [12]  598 	mov	@r0,a
      000160 E5*00            [12]  599 	mov	a,_bp
      000162 24 0A            [12]  600 	add	a,#0x0a
      000164 F8               [12]  601 	mov	r0,a
      000165 86 82            [24]  602 	mov	dpl,@r0
      000167 08               [12]  603 	inc	r0
      000168 86 83            [24]  604 	mov	dph,@r0
      00016A 08               [12]  605 	inc	r0
      00016B 86 F0            [24]  606 	mov	b,@r0
      00016D 12r00r00         [24]  607 	lcall	__gptrget
      000170 FD               [12]  608 	mov	r5,a
      000171 7F 00            [12]  609 	mov	r7,#0x00
      000173 C0 04            [24]  610 	push	ar4
      000175 C0 03            [24]  611 	push	ar3
      000177 C0 02            [24]  612 	push	ar2
      000179 C0 05            [24]  613 	push	ar5
      00017B C0 07            [24]  614 	push	ar7
      00017D E5*00            [12]  615 	mov	a,_bp
      00017F 24 07            [12]  616 	add	a,#0x07
      000181 F8               [12]  617 	mov	r0,a
      000182 86 82            [24]  618 	mov	dpl,@r0
      000184 08               [12]  619 	inc	r0
      000185 86 83            [24]  620 	mov	dph,@r0
      000187 12r00r00         [24]  621 	lcall	__mulint
      00018A AE 82            [24]  622 	mov	r6,dpl
      00018C AF 83            [24]  623 	mov	r7,dph
      00018E 15 81            [12]  624 	dec	sp
      000190 15 81            [12]  625 	dec	sp
      000192 D0 02            [24]  626 	pop	ar2
      000194 D0 03            [24]  627 	pop	ar3
      000196 D0 04            [24]  628 	pop	ar4
      000198 E5*00            [12]  629 	mov	a,_bp
      00019A 24 04            [12]  630 	add	a,#0x04
      00019C F8               [12]  631 	mov	r0,a
      00019D EE               [12]  632 	mov	a,r6
      00019E 26               [12]  633 	add	a,@r0
      00019F FE               [12]  634 	mov	r6,a
      0001A0 EF               [12]  635 	mov	a,r7
      0001A1 08               [12]  636 	inc	r0
      0001A2 36               [12]  637 	addc	a,@r0
      0001A3 FF               [12]  638 	mov	r7,a
      0001A4 08               [12]  639 	inc	r0
      0001A5 86 05            [24]  640 	mov	ar5,@r0
      0001A7 8A 82            [24]  641 	mov	dpl,r2
      0001A9 8B 83            [24]  642 	mov	dph,r3
      0001AB 8C F0            [24]  643 	mov	b,r4
      0001AD EE               [12]  644 	mov	a,r6
      0001AE 12r00r00         [24]  645 	lcall	__gptrput
      0001B1 A3               [24]  646 	inc	dptr
      0001B2 EF               [12]  647 	mov	a,r7
      0001B3 12r00r00         [24]  648 	lcall	__gptrput
      0001B6 A3               [24]  649 	inc	dptr
      0001B7 ED               [12]  650 	mov	a,r5
      0001B8 12r00r00         [24]  651 	lcall	__gptrput
                           0001BB   652 	C$queue.c$267$2_0$169 ==.
                                    653 ;	src/FreeRTOS/queue.c:267: pxQueue->cRxLock = queueUNLOCKED;
      0001BB A8*00            [24]  654 	mov	r0,_bp
      0001BD 08               [12]  655 	inc	r0
      0001BE 74 27            [12]  656 	mov	a,#0x27
      0001C0 26               [12]  657 	add	a,@r0
      0001C1 FD               [12]  658 	mov	r5,a
      0001C2 E4               [12]  659 	clr	a
      0001C3 08               [12]  660 	inc	r0
      0001C4 36               [12]  661 	addc	a,@r0
      0001C5 FE               [12]  662 	mov	r6,a
      0001C6 08               [12]  663 	inc	r0
      0001C7 86 07            [24]  664 	mov	ar7,@r0
      0001C9 8D 82            [24]  665 	mov	dpl,r5
      0001CB 8E 83            [24]  666 	mov	dph,r6
      0001CD 8F F0            [24]  667 	mov	b,r7
      0001CF 74 FF            [12]  668 	mov	a,#0xff
      0001D1 12r00r00         [24]  669 	lcall	__gptrput
                           0001D4   670 	C$queue.c$268$2_0$169 ==.
                                    671 ;	src/FreeRTOS/queue.c:268: pxQueue->cTxLock = queueUNLOCKED;
      0001D4 A8*00            [24]  672 	mov	r0,_bp
      0001D6 08               [12]  673 	inc	r0
      0001D7 74 28            [12]  674 	mov	a,#0x28
      0001D9 26               [12]  675 	add	a,@r0
      0001DA FD               [12]  676 	mov	r5,a
      0001DB E4               [12]  677 	clr	a
      0001DC 08               [12]  678 	inc	r0
      0001DD 36               [12]  679 	addc	a,@r0
      0001DE FE               [12]  680 	mov	r6,a
      0001DF 08               [12]  681 	inc	r0
      0001E0 86 07            [24]  682 	mov	ar7,@r0
      0001E2 8D 82            [24]  683 	mov	dpl,r5
      0001E4 8E 83            [24]  684 	mov	dph,r6
      0001E6 8F F0            [24]  685 	mov	b,r7
      0001E8 74 FF            [12]  686 	mov	a,#0xff
      0001EA 12r00r00         [24]  687 	lcall	__gptrput
                           0001ED   688 	C$queue.c$270$2_0$169 ==.
                                    689 ;	src/FreeRTOS/queue.c:270: if( xNewQueue == pdFALSE )
      0001ED E5*00            [12]  690 	mov	a,_bp
      0001EF 24 FD            [12]  691 	add	a,#0xfd
      0001F1 F8               [12]  692 	mov	r0,a
      0001F2 E6               [12]  693 	mov	a,@r0
      0001F3 70 39            [24]  694 	jnz	00106$
                           0001F5   695 	C$queue.c$277$3_0$170 ==.
                                    696 ;	src/FreeRTOS/queue.c:277: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      0001F5 A8*00            [24]  697 	mov	r0,_bp
      0001F7 08               [12]  698 	inc	r0
      0001F8 74 0C            [12]  699 	mov	a,#0x0c
      0001FA 26               [12]  700 	add	a,@r0
      0001FB FD               [12]  701 	mov	r5,a
      0001FC E4               [12]  702 	clr	a
      0001FD 08               [12]  703 	inc	r0
      0001FE 36               [12]  704 	addc	a,@r0
      0001FF FE               [12]  705 	mov	r6,a
      000200 08               [12]  706 	inc	r0
      000201 86 07            [24]  707 	mov	ar7,@r0
      000203 8D 82            [24]  708 	mov	dpl,r5
      000205 8E 83            [24]  709 	mov	dph,r6
      000207 8F F0            [24]  710 	mov	b,r7
      000209 12r00r00         [24]  711 	lcall	__gptrget
      00020C 60 4E            [24]  712 	jz	00107$
                           00020E   713 	C$queue.c$279$4_0$171 ==.
                                    714 ;	src/FreeRTOS/queue.c:279: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      00020E A8*00            [24]  715 	mov	r0,_bp
      000210 08               [12]  716 	inc	r0
      000211 74 0C            [12]  717 	mov	a,#0x0c
      000213 26               [12]  718 	add	a,@r0
      000214 FD               [12]  719 	mov	r5,a
      000215 E4               [12]  720 	clr	a
      000216 08               [12]  721 	inc	r0
      000217 36               [12]  722 	addc	a,@r0
      000218 FE               [12]  723 	mov	r6,a
      000219 08               [12]  724 	inc	r0
      00021A 86 07            [24]  725 	mov	ar7,@r0
      00021C 8D 82            [24]  726 	mov	dpl,r5
      00021E 8E 83            [24]  727 	mov	dph,r6
      000220 8F F0            [24]  728 	mov	b,r7
      000222 12r00r00         [24]  729 	lcall	_xTaskRemoveFromEventList
      000225 E5 82            [12]  730 	mov	a,dpl
      000227 60 33            [24]  731 	jz	00107$
                           000229   732 	C$queue.c$281$5_0$172 ==.
                                    733 ;	src/FreeRTOS/queue.c:281: queueYIELD_IF_USING_PREEMPTION();
      000229 12r00r00         [24]  734 	lcall	_vPortYield
      00022C 80 2E            [24]  735 	sjmp	00107$
      00022E                        736 00106$:
                           00022E   737 	C$queue.c$296$3_0$175 ==.
                                    738 ;	src/FreeRTOS/queue.c:296: vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
      00022E A8*00            [24]  739 	mov	r0,_bp
      000230 08               [12]  740 	inc	r0
      000231 74 0C            [12]  741 	mov	a,#0x0c
      000233 26               [12]  742 	add	a,@r0
      000234 FD               [12]  743 	mov	r5,a
      000235 E4               [12]  744 	clr	a
      000236 08               [12]  745 	inc	r0
      000237 36               [12]  746 	addc	a,@r0
      000238 FE               [12]  747 	mov	r6,a
      000239 08               [12]  748 	inc	r0
      00023A 86 07            [24]  749 	mov	ar7,@r0
      00023C 8D 82            [24]  750 	mov	dpl,r5
      00023E 8E 83            [24]  751 	mov	dph,r6
      000240 8F F0            [24]  752 	mov	b,r7
      000242 12r00r00         [24]  753 	lcall	_vListInitialise
                           000245   754 	C$queue.c$297$3_0$175 ==.
                                    755 ;	src/FreeRTOS/queue.c:297: vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
      000245 A8*00            [24]  756 	mov	r0,_bp
      000247 08               [12]  757 	inc	r0
      000248 74 18            [12]  758 	mov	a,#0x18
      00024A 26               [12]  759 	add	a,@r0
      00024B FD               [12]  760 	mov	r5,a
      00024C E4               [12]  761 	clr	a
      00024D 08               [12]  762 	inc	r0
      00024E 36               [12]  763 	addc	a,@r0
      00024F FE               [12]  764 	mov	r6,a
      000250 08               [12]  765 	inc	r0
      000251 86 07            [24]  766 	mov	ar7,@r0
      000253 8D 82            [24]  767 	mov	dpl,r5
      000255 8E 83            [24]  768 	mov	dph,r6
      000257 8F F0            [24]  769 	mov	b,r7
      000259 12r00r00         [24]  770 	lcall	_vListInitialise
      00025C                        771 00107$:
                           00025C   772 	C$queue.c$300$1_0$168 ==.
                                    773 ;	src/FreeRTOS/queue.c:300: taskEXIT_CRITICAL();
      00025C D0 E0            [24]  774 	pop ACC 
      00025E 53 E0 80         [24]  775 	anl	_ACC,#0x80
      000261 E5 E0            [12]  776 	mov	a,_ACC
      000263 42 A8            [12]  777 	orl	_IE,a
      000265 D0 E0            [24]  778 	pop ACC 
                           000267   779 	C$queue.c$304$1_0$168 ==.
                                    780 ;	src/FreeRTOS/queue.c:304: return pdPASS;
      000267 75 82 01         [24]  781 	mov	dpl,#0x01
                           00026A   782 	C$queue.c$305$1_0$168 ==.
                                    783 ;	src/FreeRTOS/queue.c:305: }
      00026A 85*00 81         [24]  784 	mov	sp,_bp
      00026D D0*00            [24]  785 	pop	_bp
                           00026F   786 	C$queue.c$305$1_0$168 ==.
                           00026F   787 	XG$xQueueGenericReset$0$0 ==.
      00026F 22               [24]  788 	ret
                                    789 ;------------------------------------------------------------
                                    790 ;Allocation info for local variables in function 'xQueueGenericCreate'
                                    791 ;------------------------------------------------------------
                                    792 ;uxItemSize                Allocated to stack - _bp -3
                                    793 ;ucQueueType               Allocated to stack - _bp -4
                                    794 ;uxQueueLength             Allocated to stack - _bp +1
                                    795 ;pxNewQueue                Allocated to registers r4 r5 r6 
                                    796 ;xQueueSizeInBytes         Allocated to registers r5 r6 
                                    797 ;pucQueueStorage           Allocated to registers r2 r3 r7 
                                    798 ;------------------------------------------------------------
                           000270   799 	G$xQueueGenericCreate$0$0 ==.
                           000270   800 	C$queue.c$368$1_0$177 ==.
                                    801 ;	src/FreeRTOS/queue.c:368: QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
                                    802 ;	-----------------------------------------
                                    803 ;	 function xQueueGenericCreate
                                    804 ;	-----------------------------------------
      000270                        805 _xQueueGenericCreate:
      000270 C0*00            [24]  806 	push	_bp
      000272 85 81*00         [24]  807 	mov	_bp,sp
      000275 C0 82            [24]  808 	push	dpl
                           000277   809 	C$queue.c$376$1_0$177 ==.
                                    810 ;	src/FreeRTOS/queue.c:376: if( uxItemSize == ( UBaseType_t ) 0 )
      000277 E5*00            [12]  811 	mov	a,_bp
      000279 24 FD            [12]  812 	add	a,#0xfd
      00027B F8               [12]  813 	mov	r0,a
      00027C E6               [12]  814 	mov	a,@r0
                           00027D   815 	C$queue.c$379$2_0$178 ==.
                                    816 ;	src/FreeRTOS/queue.c:379: xQueueSizeInBytes = ( size_t ) 0;
      00027D 70 04            [24]  817 	jnz	00102$
      00027F FD               [12]  818 	mov	r5,a
      000280 FE               [12]  819 	mov	r6,a
      000281 80 13            [24]  820 	sjmp	00103$
      000283                        821 00102$:
                           000283   822 	C$queue.c$385$2_0$179 ==.
                                    823 ;	src/FreeRTOS/queue.c:385: xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
      000283 A8*00            [24]  824 	mov	r0,_bp
      000285 08               [12]  825 	inc	r0
      000286 E5*00            [12]  826 	mov	a,_bp
      000288 24 FD            [12]  827 	add	a,#0xfd
      00028A F9               [12]  828 	mov	r1,a
      00028B 86 F0            [24]  829 	mov	b,@r0
      00028D E7               [12]  830 	mov	a,@r1
      00028E A4               [48]  831 	mul	ab
      00028F FB               [12]  832 	mov	r3,a
      000290 AC F0            [24]  833 	mov	r4,b
      000292 8B 05            [24]  834 	mov	ar5,r3
      000294 8C 06            [24]  835 	mov	ar6,r4
      000296                        836 00103$:
                           000296   837 	C$queue.c$397$1_0$177 ==.
                                    838 ;	src/FreeRTOS/queue.c:397: pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
      000296 74 29            [12]  839 	mov	a,#0x29
      000298 2D               [12]  840 	add	a,r5
      000299 FD               [12]  841 	mov	r5,a
      00029A E4               [12]  842 	clr	a
      00029B 3E               [12]  843 	addc	a,r6
      00029C FE               [12]  844 	mov	r6,a
      00029D 8D 82            [24]  845 	mov	dpl,r5
      00029F 8E 83            [24]  846 	mov	dph,r6
      0002A1 12r00r00         [24]  847 	lcall	_pvPortMalloc
      0002A4 AC 82            [24]  848 	mov	r4,dpl
      0002A6 AD 83            [24]  849 	mov	r5,dph
      0002A8 AE F0            [24]  850 	mov	r6,b
                           0002AA   851 	C$queue.c$399$1_0$177 ==.
                                    852 ;	src/FreeRTOS/queue.c:399: if( pxNewQueue != NULL )
      0002AA EC               [12]  853 	mov	a,r4
      0002AB 4D               [12]  854 	orl	a,r5
      0002AC 60 43            [24]  855 	jz	00106$
                           0002AE   856 	C$queue.c$403$2_0$180 ==.
                                    857 ;	src/FreeRTOS/queue.c:403: pucQueueStorage = ( uint8_t * ) pxNewQueue;
      0002AE 8C 02            [24]  858 	mov	ar2,r4
      0002B0 8D 03            [24]  859 	mov	ar3,r5
      0002B2 8E 07            [24]  860 	mov	ar7,r6
                           0002B4   861 	C$queue.c$404$2_0$180 ==.
                                    862 ;	src/FreeRTOS/queue.c:404: pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
      0002B4 74 29            [12]  863 	mov	a,#0x29
      0002B6 2A               [12]  864 	add	a,r2
      0002B7 FA               [12]  865 	mov	r2,a
      0002B8 E4               [12]  866 	clr	a
      0002B9 3B               [12]  867 	addc	a,r3
      0002BA FB               [12]  868 	mov	r3,a
                           0002BB   869 	C$queue.c$415$2_0$180 ==.
                                    870 ;	src/FreeRTOS/queue.c:415: prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
      0002BB C0 06            [24]  871 	push	ar6
      0002BD C0 05            [24]  872 	push	ar5
      0002BF C0 04            [24]  873 	push	ar4
      0002C1 C0 04            [24]  874 	push	ar4
      0002C3 C0 05            [24]  875 	push	ar5
      0002C5 C0 06            [24]  876 	push	ar6
      0002C7 E5*00            [12]  877 	mov	a,_bp
      0002C9 24 FC            [12]  878 	add	a,#0xfc
      0002CB F8               [12]  879 	mov	r0,a
      0002CC E6               [12]  880 	mov	a,@r0
      0002CD C0 E0            [24]  881 	push	acc
      0002CF C0 02            [24]  882 	push	ar2
      0002D1 C0 03            [24]  883 	push	ar3
      0002D3 C0 07            [24]  884 	push	ar7
      0002D5 E5*00            [12]  885 	mov	a,_bp
      0002D7 24 FD            [12]  886 	add	a,#0xfd
      0002D9 F8               [12]  887 	mov	r0,a
      0002DA E6               [12]  888 	mov	a,@r0
      0002DB C0 E0            [24]  889 	push	acc
      0002DD A8*00            [24]  890 	mov	r0,_bp
      0002DF 08               [12]  891 	inc	r0
      0002E0 86 82            [24]  892 	mov	dpl,@r0
      0002E2 12r02rFC         [24]  893 	lcall	_prvInitialiseNewQueue
      0002E5 E5 81            [12]  894 	mov	a,sp
      0002E7 24 F8            [12]  895 	add	a,#0xf8
      0002E9 F5 81            [12]  896 	mov	sp,a
      0002EB D0 04            [24]  897 	pop	ar4
      0002ED D0 05            [24]  898 	pop	ar5
      0002EF D0 06            [24]  899 	pop	ar6
                           0002F1   900 	C$queue.c$420$1_0$177 ==.
                                    901 ;	src/FreeRTOS/queue.c:420: mtCOVERAGE_TEST_MARKER();
      0002F1                        902 00106$:
                           0002F1   903 	C$queue.c$423$1_0$177 ==.
                                    904 ;	src/FreeRTOS/queue.c:423: return pxNewQueue;
      0002F1 8C 82            [24]  905 	mov	dpl,r4
      0002F3 8D 83            [24]  906 	mov	dph,r5
      0002F5 8E F0            [24]  907 	mov	b,r6
                           0002F7   908 	C$queue.c$424$1_0$177 ==.
                                    909 ;	src/FreeRTOS/queue.c:424: }
      0002F7 15 81            [12]  910 	dec	sp
      0002F9 D0*00            [24]  911 	pop	_bp
                           0002FB   912 	C$queue.c$424$1_0$177 ==.
                           0002FB   913 	XG$xQueueGenericCreate$0$0 ==.
      0002FB 22               [24]  914 	ret
                                    915 ;------------------------------------------------------------
                                    916 ;Allocation info for local variables in function 'prvInitialiseNewQueue'
                                    917 ;------------------------------------------------------------
                                    918 ;uxItemSize                Allocated to stack - _bp -3
                                    919 ;pucQueueStorage           Allocated to stack - _bp -6
                                    920 ;ucQueueType               Allocated to stack - _bp -7
                                    921 ;pxNewQueue                Allocated to stack - _bp -10
                                    922 ;uxQueueLength             Allocated to stack - _bp +1
                                    923 ;------------------------------------------------------------
                           0002FC   924 	Fqueue$prvInitialiseNewQueue$0$0 ==.
                           0002FC   925 	C$queue.c$429$1_0$183 ==.
                                    926 ;	src/FreeRTOS/queue.c:429: static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
                                    927 ;	-----------------------------------------
                                    928 ;	 function prvInitialiseNewQueue
                                    929 ;	-----------------------------------------
      0002FC                        930 _prvInitialiseNewQueue:
      0002FC C0*00            [24]  931 	push	_bp
      0002FE 85 81*00         [24]  932 	mov	_bp,sp
      000301 C0 82            [24]  933 	push	dpl
                           000303   934 	C$queue.c$435$1_0$183 ==.
                                    935 ;	src/FreeRTOS/queue.c:435: if( uxItemSize == ( UBaseType_t ) 0 )
      000303 E5*00            [12]  936 	mov	a,_bp
      000305 24 FD            [12]  937 	add	a,#0xfd
      000307 F8               [12]  938 	mov	r0,a
      000308 E6               [12]  939 	mov	a,@r0
      000309 70 30            [24]  940 	jnz	00102$
                           00030B   941 	C$queue.c$441$1_0$183 ==.
                                    942 ;	src/FreeRTOS/queue.c:441: pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
      00030B E5*00            [12]  943 	mov	a,_bp
      00030D 24 F6            [12]  944 	add	a,#0xf6
      00030F F8               [12]  945 	mov	r0,a
      000310 86 04            [24]  946 	mov	ar4,@r0
      000312 08               [12]  947 	inc	r0
      000313 86 05            [24]  948 	mov	ar5,@r0
      000315 08               [12]  949 	inc	r0
      000316 86 06            [24]  950 	mov	ar6,@r0
      000318 E5*00            [12]  951 	mov	a,_bp
      00031A 24 F6            [12]  952 	add	a,#0xf6
      00031C F8               [12]  953 	mov	r0,a
      00031D 86 02            [24]  954 	mov	ar2,@r0
      00031F 08               [12]  955 	inc	r0
      000320 86 03            [24]  956 	mov	ar3,@r0
      000322 08               [12]  957 	inc	r0
      000323 86 07            [24]  958 	mov	ar7,@r0
      000325 8C 82            [24]  959 	mov	dpl,r4
      000327 8D 83            [24]  960 	mov	dph,r5
      000329 8E F0            [24]  961 	mov	b,r6
      00032B EA               [12]  962 	mov	a,r2
      00032C 12r00r00         [24]  963 	lcall	__gptrput
      00032F A3               [24]  964 	inc	dptr
      000330 EB               [12]  965 	mov	a,r3
      000331 12r00r00         [24]  966 	lcall	__gptrput
      000334 A3               [24]  967 	inc	dptr
      000335 EF               [12]  968 	mov	a,r7
      000336 12r00r00         [24]  969 	lcall	__gptrput
      000339 80 2E            [24]  970 	sjmp	00103$
      00033B                        971 00102$:
                           00033B   972 	C$queue.c$446$2_0$185 ==.
                                    973 ;	src/FreeRTOS/queue.c:446: pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
      00033B E5*00            [12]  974 	mov	a,_bp
      00033D 24 F6            [12]  975 	add	a,#0xf6
      00033F F8               [12]  976 	mov	r0,a
      000340 86 04            [24]  977 	mov	ar4,@r0
      000342 08               [12]  978 	inc	r0
      000343 86 05            [24]  979 	mov	ar5,@r0
      000345 08               [12]  980 	inc	r0
      000346 86 06            [24]  981 	mov	ar6,@r0
      000348 E5*00            [12]  982 	mov	a,_bp
      00034A 24 FA            [12]  983 	add	a,#0xfa
      00034C F8               [12]  984 	mov	r0,a
      00034D 86 02            [24]  985 	mov	ar2,@r0
      00034F 08               [12]  986 	inc	r0
      000350 86 03            [24]  987 	mov	ar3,@r0
      000352 08               [12]  988 	inc	r0
      000353 86 07            [24]  989 	mov	ar7,@r0
      000355 8C 82            [24]  990 	mov	dpl,r4
      000357 8D 83            [24]  991 	mov	dph,r5
      000359 8E F0            [24]  992 	mov	b,r6
      00035B EA               [12]  993 	mov	a,r2
      00035C 12r00r00         [24]  994 	lcall	__gptrput
      00035F A3               [24]  995 	inc	dptr
      000360 EB               [12]  996 	mov	a,r3
      000361 12r00r00         [24]  997 	lcall	__gptrput
      000364 A3               [24]  998 	inc	dptr
      000365 EF               [12]  999 	mov	a,r7
      000366 12r00r00         [24] 1000 	lcall	__gptrput
      000369                       1001 00103$:
                           000369  1002 	C$queue.c$451$1_0$183 ==.
                                   1003 ;	src/FreeRTOS/queue.c:451: pxNewQueue->uxLength = uxQueueLength;
      000369 E5*00            [12] 1004 	mov	a,_bp
      00036B 24 F6            [12] 1005 	add	a,#0xf6
      00036D F8               [12] 1006 	mov	r0,a
      00036E 86 05            [24] 1007 	mov	ar5,@r0
      000370 08               [12] 1008 	inc	r0
      000371 86 06            [24] 1009 	mov	ar6,@r0
      000373 08               [12] 1010 	inc	r0
      000374 86 07            [24] 1011 	mov	ar7,@r0
      000376 74 25            [12] 1012 	mov	a,#0x25
      000378 2D               [12] 1013 	add	a,r5
      000379 FA               [12] 1014 	mov	r2,a
      00037A E4               [12] 1015 	clr	a
      00037B 3E               [12] 1016 	addc	a,r6
      00037C FB               [12] 1017 	mov	r3,a
      00037D 8F 04            [24] 1018 	mov	ar4,r7
      00037F 8A 82            [24] 1019 	mov	dpl,r2
      000381 8B 83            [24] 1020 	mov	dph,r3
      000383 8C F0            [24] 1021 	mov	b,r4
      000385 A8*00            [24] 1022 	mov	r0,_bp
      000387 08               [12] 1023 	inc	r0
      000388 E6               [12] 1024 	mov	a,@r0
      000389 12r00r00         [24] 1025 	lcall	__gptrput
                           00038C  1026 	C$queue.c$452$1_0$183 ==.
                                   1027 ;	src/FreeRTOS/queue.c:452: pxNewQueue->uxItemSize = uxItemSize;
      00038C 74 26            [12] 1028 	mov	a,#0x26
      00038E 2D               [12] 1029 	add	a,r5
      00038F FA               [12] 1030 	mov	r2,a
      000390 E4               [12] 1031 	clr	a
      000391 3E               [12] 1032 	addc	a,r6
      000392 FB               [12] 1033 	mov	r3,a
      000393 8F 04            [24] 1034 	mov	ar4,r7
      000395 8A 82            [24] 1035 	mov	dpl,r2
      000397 8B 83            [24] 1036 	mov	dph,r3
      000399 8C F0            [24] 1037 	mov	b,r4
      00039B E5*00            [12] 1038 	mov	a,_bp
      00039D 24 FD            [12] 1039 	add	a,#0xfd
      00039F F8               [12] 1040 	mov	r0,a
      0003A0 E6               [12] 1041 	mov	a,@r0
      0003A1 12r00r00         [24] 1042 	lcall	__gptrput
                           0003A4  1043 	C$queue.c$453$1_0$183 ==.
                                   1044 ;	src/FreeRTOS/queue.c:453: ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
      0003A4 74 01            [12] 1045 	mov	a,#0x01
      0003A6 C0 E0            [24] 1046 	push	acc
      0003A8 8D 82            [24] 1047 	mov	dpl,r5
      0003AA 8E 83            [24] 1048 	mov	dph,r6
      0003AC 8F F0            [24] 1049 	mov	b,r7
      0003AE 12r00r00         [24] 1050 	lcall	_xQueueGenericReset
      0003B1 15 81            [12] 1051 	dec	sp
                           0003B3  1052 	C$queue.c$468$1_0$183 ==.
                                   1053 ;	src/FreeRTOS/queue.c:468: }
      0003B3 15 81            [12] 1054 	dec	sp
      0003B5 D0*00            [24] 1055 	pop	_bp
                           0003B7  1056 	C$queue.c$468$1_0$183 ==.
                           0003B7  1057 	XFqueue$prvInitialiseNewQueue$0$0 ==.
      0003B7 22               [24] 1058 	ret
                                   1059 ;------------------------------------------------------------
                                   1060 ;Allocation info for local variables in function 'xQueueGenericSend'
                                   1061 ;------------------------------------------------------------
                                   1062 ;pvItemToQueue             Allocated to stack - _bp -5
                                   1063 ;xTicksToWait              Allocated to stack - _bp -7
                                   1064 ;xCopyPosition             Allocated to stack - _bp -8
                                   1065 ;xQueue                    Allocated to registers r5 r3 r4 
                                   1066 ;xEntryTimeSet             Allocated to stack - _bp +11
                                   1067 ;xYieldRequired            Allocated to registers r7 
                                   1068 ;xTimeOut                  Allocated to stack - _bp +12
                                   1069 ;pxQueue                   Allocated to stack - _bp +15
                                   1070 ;sloc0                     Allocated to stack - _bp +1
                                   1071 ;sloc1                     Allocated to stack - _bp +4
                                   1072 ;sloc2                     Allocated to stack - _bp +7
                                   1073 ;sloc3                     Allocated to stack - _bp +8
                                   1074 ;------------------------------------------------------------
                           0003B8  1075 	G$xQueueGenericSend$0$0 ==.
                           0003B8  1076 	C$queue.c$747$1_0$187 ==.
                                   1077 ;	src/FreeRTOS/queue.c:747: BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
                                   1078 ;	-----------------------------------------
                                   1079 ;	 function xQueueGenericSend
                                   1080 ;	-----------------------------------------
      0003B8                       1081 _xQueueGenericSend:
      0003B8 C0*00            [24] 1082 	push	_bp
      0003BA E5 81            [12] 1083 	mov	a,sp
      0003BC F5*00            [12] 1084 	mov	_bp,a
      0003BE 24 11            [12] 1085 	add	a,#0x11
      0003C0 F5 81            [12] 1086 	mov	sp,a
      0003C2 AD 82            [24] 1087 	mov	r5,dpl
      0003C4 AB 83            [24] 1088 	mov	r3,dph
      0003C6 AC F0            [24] 1089 	mov	r4,b
                           0003C8  1090 	C$queue.c$749$2_0$187 ==.
                                   1091 ;	src/FreeRTOS/queue.c:749: BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
      0003C8 E5*00            [12] 1092 	mov	a,_bp
      0003CA 24 0B            [12] 1093 	add	a,#0x0b
      0003CC F8               [12] 1094 	mov	r0,a
      0003CD 76 00            [12] 1095 	mov	@r0,#0x00
                           0003CF  1096 	C$queue.c$751$2_0$187 ==.
                                   1097 ;	src/FreeRTOS/queue.c:751: Queue_t * const pxQueue = xQueue;
      0003CF E5*00            [12] 1098 	mov	a,_bp
      0003D1 24 0F            [12] 1099 	add	a,#0x0f
      0003D3 F8               [12] 1100 	mov	r0,a
      0003D4 A6 05            [24] 1101 	mov	@r0,ar5
      0003D6 08               [12] 1102 	inc	r0
      0003D7 A6 03            [24] 1103 	mov	@r0,ar3
      0003D9 08               [12] 1104 	inc	r0
      0003DA A6 04            [24] 1105 	mov	@r0,ar4
                           0003DC  1106 	C$queue.c$754$4_0$190 ==.
                                   1107 ;	src/FreeRTOS/queue.c:754: configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
      0003DC E5*00            [12] 1108 	mov	a,_bp
      0003DE 24 F8            [12] 1109 	add	a,#0xf8
      0003E0 F8               [12] 1110 	mov	r0,a
      0003E1 E4               [12] 1111 	clr	a
      0003E2 B6 02 01         [24] 1112 	cjne	@r0,#0x02,00184$
      0003E5 04               [12] 1113 	inc	a
      0003E6                       1114 00184$:
      0003E6 FF               [12] 1115 	mov	r7,a
      0003E7 E5*00            [12] 1116 	mov	a,_bp
      0003E9 24 0C            [12] 1117 	add	a,#0x0c
      0003EB FE               [12] 1118 	mov	r6,a
      0003EC E5*00            [12] 1119 	mov	a,_bp
      0003EE 24 07            [12] 1120 	add	a,#0x07
      0003F0 F8               [12] 1121 	mov	r0,a
      0003F1 A6 06            [24] 1122 	mov	@r0,ar6
      0003F3 A8*00            [24] 1123 	mov	r0,_bp
      0003F5 08               [12] 1124 	inc	r0
      0003F6 74 24            [12] 1125 	mov	a,#0x24
      0003F8 2D               [12] 1126 	add	a,r5
      0003F9 F6               [12] 1127 	mov	@r0,a
      0003FA E4               [12] 1128 	clr	a
      0003FB 3B               [12] 1129 	addc	a,r3
      0003FC 08               [12] 1130 	inc	r0
      0003FD F6               [12] 1131 	mov	@r0,a
      0003FE 08               [12] 1132 	inc	r0
      0003FF A6 04            [24] 1133 	mov	@r0,ar4
      000401 E5*00            [12] 1134 	mov	a,_bp
      000403 24 04            [12] 1135 	add	a,#0x04
      000405 F8               [12] 1136 	mov	r0,a
      000406 74 25            [12] 1137 	mov	a,#0x25
      000408 2D               [12] 1138 	add	a,r5
      000409 F6               [12] 1139 	mov	@r0,a
      00040A E4               [12] 1140 	clr	a
      00040B 3B               [12] 1141 	addc	a,r3
      00040C 08               [12] 1142 	inc	r0
      00040D F6               [12] 1143 	mov	@r0,a
      00040E 08               [12] 1144 	inc	r0
      00040F A6 04            [24] 1145 	mov	@r0,ar4
      000411                       1146 00130$:
                           000411  1147 	C$queue.c$768$2_0$187 ==.
                                   1148 ;	src/FreeRTOS/queue.c:768: taskENTER_CRITICAL();
      000411 C0 E0            [24] 1149 	push ACC 
      000413 C0 A8            [24] 1150 	push IE 
                                   1151 ;	assignBit
      000415 C2 AF            [12] 1152 	clr	_EA
                           000417  1153 	C$queue.c$774$4_0$190 ==.
                                   1154 ;	src/FreeRTOS/queue.c:774: if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
      000417 A8*00            [24] 1155 	mov	r0,_bp
      000419 08               [12] 1156 	inc	r0
      00041A 86 82            [24] 1157 	mov	dpl,@r0
      00041C 08               [12] 1158 	inc	r0
      00041D 86 83            [24] 1159 	mov	dph,@r0
      00041F 08               [12] 1160 	inc	r0
      000420 86 F0            [24] 1161 	mov	b,@r0
      000422 12r00r00         [24] 1162 	lcall	__gptrget
      000425 FD               [12] 1163 	mov	r5,a
      000426 E5*00            [12] 1164 	mov	a,_bp
      000428 24 04            [12] 1165 	add	a,#0x04
      00042A F8               [12] 1166 	mov	r0,a
      00042B 86 82            [24] 1167 	mov	dpl,@r0
      00042D 08               [12] 1168 	inc	r0
      00042E 86 83            [24] 1169 	mov	dph,@r0
      000430 08               [12] 1170 	inc	r0
      000431 86 F0            [24] 1171 	mov	b,@r0
      000433 12r00r00         [24] 1172 	lcall	__gptrget
      000436 FC               [12] 1173 	mov	r4,a
      000437 C3               [12] 1174 	clr	c
      000438 ED               [12] 1175 	mov	a,r5
      000439 9C               [12] 1176 	subb	a,r4
      00043A 40 06            [24] 1177 	jc	00113$
      00043C EF               [12] 1178 	mov	a,r7
      00043D 70 03            [24] 1179 	jnz	00187$
      00043F 02r04rC8         [24] 1180 	ljmp	00114$
      000442                       1181 00187$:
      000442                       1182 00113$:
                           000442  1183 	C$queue.c$840$6_0$192 ==.
                                   1184 ;	src/FreeRTOS/queue.c:840: xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
      000442 E5*00            [12] 1185 	mov	a,_bp
      000444 24 F8            [12] 1186 	add	a,#0xf8
      000446 F8               [12] 1187 	mov	r0,a
      000447 E6               [12] 1188 	mov	a,@r0
      000448 C0 E0            [24] 1189 	push	acc
      00044A E5*00            [12] 1190 	mov	a,_bp
      00044C 24 FB            [12] 1191 	add	a,#0xfb
      00044E F8               [12] 1192 	mov	r0,a
      00044F E6               [12] 1193 	mov	a,@r0
      000450 C0 E0            [24] 1194 	push	acc
      000452 08               [12] 1195 	inc	r0
      000453 E6               [12] 1196 	mov	a,@r0
      000454 C0 E0            [24] 1197 	push	acc
      000456 08               [12] 1198 	inc	r0
      000457 E6               [12] 1199 	mov	a,@r0
      000458 C0 E0            [24] 1200 	push	acc
      00045A E5*00            [12] 1201 	mov	a,_bp
      00045C 24 0F            [12] 1202 	add	a,#0x0f
      00045E F8               [12] 1203 	mov	r0,a
      00045F 86 82            [24] 1204 	mov	dpl,@r0
      000461 08               [12] 1205 	inc	r0
      000462 86 83            [24] 1206 	mov	dph,@r0
      000464 08               [12] 1207 	inc	r0
      000465 86 F0            [24] 1208 	mov	b,@r0
      000467 12r12r89         [24] 1209 	lcall	_prvCopyDataToQueue
      00046A AC 82            [24] 1210 	mov	r4,dpl
      00046C E5 81            [12] 1211 	mov	a,sp
      00046E 24 FC            [12] 1212 	add	a,#0xfc
      000470 F5 81            [12] 1213 	mov	sp,a
      000472 8C 07            [24] 1214 	mov	ar7,r4
                           000474  1215 	C$queue.c$844$6_0$192 ==.
                                   1216 ;	src/FreeRTOS/queue.c:844: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      000474 E5*00            [12] 1217 	mov	a,_bp
      000476 24 0F            [12] 1218 	add	a,#0x0f
      000478 F8               [12] 1219 	mov	r0,a
      000479 74 18            [12] 1220 	mov	a,#0x18
      00047B 26               [12] 1221 	add	a,@r0
      00047C FA               [12] 1222 	mov	r2,a
      00047D E4               [12] 1223 	clr	a
      00047E 08               [12] 1224 	inc	r0
      00047F 36               [12] 1225 	addc	a,@r0
      000480 FB               [12] 1226 	mov	r3,a
      000481 08               [12] 1227 	inc	r0
      000482 86 04            [24] 1228 	mov	ar4,@r0
      000484 8A 82            [24] 1229 	mov	dpl,r2
      000486 8B 83            [24] 1230 	mov	dph,r3
      000488 8C F0            [24] 1231 	mov	b,r4
      00048A 12r00r00         [24] 1232 	lcall	__gptrget
      00048D 60 22            [24] 1233 	jz	00106$
                           00048F  1234 	C$queue.c$846$7_0$193 ==.
                                   1235 ;	src/FreeRTOS/queue.c:846: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      00048F E5*00            [12] 1236 	mov	a,_bp
      000491 24 0F            [12] 1237 	add	a,#0x0f
      000493 F8               [12] 1238 	mov	r0,a
      000494 74 18            [12] 1239 	mov	a,#0x18
      000496 26               [12] 1240 	add	a,@r0
      000497 FA               [12] 1241 	mov	r2,a
      000498 E4               [12] 1242 	clr	a
      000499 08               [12] 1243 	inc	r0
      00049A 36               [12] 1244 	addc	a,@r0
      00049B FB               [12] 1245 	mov	r3,a
      00049C 08               [12] 1246 	inc	r0
      00049D 86 04            [24] 1247 	mov	ar4,@r0
      00049F 8A 82            [24] 1248 	mov	dpl,r2
      0004A1 8B 83            [24] 1249 	mov	dph,r3
      0004A3 8C F0            [24] 1250 	mov	b,r4
      0004A5 12r00r00         [24] 1251 	lcall	_xTaskRemoveFromEventList
      0004A8 E5 82            [12] 1252 	mov	a,dpl
      0004AA 60 0B            [24] 1253 	jz	00107$
                           0004AC  1254 	C$queue.c$852$8_0$194 ==.
                                   1255 ;	src/FreeRTOS/queue.c:852: queueYIELD_IF_USING_PREEMPTION();
      0004AC 12r00r00         [24] 1256 	lcall	_vPortYield
      0004AF 80 06            [24] 1257 	sjmp	00107$
      0004B1                       1258 00106$:
                           0004B1  1259 	C$queue.c$859$6_0$192 ==.
                                   1260 ;	src/FreeRTOS/queue.c:859: else if( xYieldRequired != pdFALSE )
      0004B1 EF               [12] 1261 	mov	a,r7
      0004B2 60 03            [24] 1262 	jz	00107$
                           0004B4  1263 	C$queue.c$865$7_0$196 ==.
                                   1264 ;	src/FreeRTOS/queue.c:865: queueYIELD_IF_USING_PREEMPTION();
      0004B4 12r00r00         [24] 1265 	lcall	_vPortYield
      0004B7                       1266 00107$:
                           0004B7  1267 	C$queue.c$874$5_0$191 ==.
                                   1268 ;	src/FreeRTOS/queue.c:874: taskEXIT_CRITICAL();
      0004B7 D0 E0            [24] 1269 	pop ACC 
      0004B9 53 E0 80         [24] 1270 	anl	_ACC,#0x80
      0004BC E5 E0            [12] 1271 	mov	a,_ACC
      0004BE 42 A8            [12] 1272 	orl	_IE,a
      0004C0 D0 E0            [24] 1273 	pop ACC 
                           0004C2  1274 	C$queue.c$875$5_0$191 ==.
                                   1275 ;	src/FreeRTOS/queue.c:875: return pdPASS;
      0004C2 75 82 01         [24] 1276 	mov	dpl,#0x01
      0004C5 02r06r6A         [24] 1277 	ljmp	00132$
      0004C8                       1278 00114$:
                           0004C8  1279 	C$queue.c$879$5_0$198 ==.
                                   1280 ;	src/FreeRTOS/queue.c:879: if( xTicksToWait == ( TickType_t ) 0 )
      0004C8 E5*00            [12] 1281 	mov	a,_bp
      0004CA 24 F9            [12] 1282 	add	a,#0xf9
      0004CC F8               [12] 1283 	mov	r0,a
      0004CD E6               [12] 1284 	mov	a,@r0
      0004CE 08               [12] 1285 	inc	r0
      0004CF 46               [12] 1286 	orl	a,@r0
      0004D0 70 11            [24] 1287 	jnz	00111$
                           0004D2  1288 	C$queue.c$883$6_0$199 ==.
                                   1289 ;	src/FreeRTOS/queue.c:883: taskEXIT_CRITICAL();
      0004D2 D0 E0            [24] 1290 	pop ACC 
      0004D4 53 E0 80         [24] 1291 	anl	_ACC,#0x80
      0004D7 E5 E0            [12] 1292 	mov	a,_ACC
      0004D9 42 A8            [12] 1293 	orl	_IE,a
      0004DB D0 E0            [24] 1294 	pop ACC 
                           0004DD  1295 	C$queue.c$888$6_0$199 ==.
                                   1296 ;	src/FreeRTOS/queue.c:888: return errQUEUE_FULL;
      0004DD 75 82 00         [24] 1297 	mov	dpl,#0x00
      0004E0 02r06r6A         [24] 1298 	ljmp	00132$
      0004E3                       1299 00111$:
                           0004E3  1300 	C$queue.c$890$5_0$198 ==.
                                   1301 ;	src/FreeRTOS/queue.c:890: else if( xEntryTimeSet == pdFALSE )
      0004E3 E5*00            [12] 1302 	mov	a,_bp
      0004E5 24 0B            [12] 1303 	add	a,#0x0b
      0004E7 F8               [12] 1304 	mov	r0,a
      0004E8 E6               [12] 1305 	mov	a,@r0
                           0004E9  1306 	C$queue.c$894$6_0$200 ==.
                                   1307 ;	src/FreeRTOS/queue.c:894: vTaskInternalSetTimeOutState( &xTimeOut );
      0004E9 70 1D            [24] 1308 	jnz	00115$
      0004EB 8E 02            [24] 1309 	mov	ar2,r6
      0004ED FB               [12] 1310 	mov	r3,a
      0004EE 7C 40            [12] 1311 	mov	r4,#0x40
      0004F0 8A 82            [24] 1312 	mov	dpl,r2
      0004F2 8B 83            [24] 1313 	mov	dph,r3
      0004F4 8C F0            [24] 1314 	mov	b,r4
      0004F6 C0 07            [24] 1315 	push	ar7
      0004F8 C0 06            [24] 1316 	push	ar6
      0004FA 12r00r00         [24] 1317 	lcall	_vTaskInternalSetTimeOutState
      0004FD D0 06            [24] 1318 	pop	ar6
      0004FF D0 07            [24] 1319 	pop	ar7
                           000501  1320 	C$queue.c$895$6_0$200 ==.
                                   1321 ;	src/FreeRTOS/queue.c:895: xEntryTimeSet = pdTRUE;
      000501 E5*00            [12] 1322 	mov	a,_bp
      000503 24 0B            [12] 1323 	add	a,#0x0b
      000505 F8               [12] 1324 	mov	r0,a
      000506 76 01            [12] 1325 	mov	@r0,#0x01
      000508                       1326 00115$:
                           000508  1327 	C$queue.c$904$2_0$187 ==.
                                   1328 ;	src/FreeRTOS/queue.c:904: taskEXIT_CRITICAL();
      000508 D0 E0            [24] 1329 	pop ACC 
      00050A 53 E0 80         [24] 1330 	anl	_ACC,#0x80
      00050D E5 E0            [12] 1331 	mov	a,_ACC
      00050F 42 A8            [12] 1332 	orl	_IE,a
      000511 D0 E0            [24] 1333 	pop ACC 
                           000513  1334 	C$queue.c$909$3_0$189 ==.
                                   1335 ;	src/FreeRTOS/queue.c:909: vTaskSuspendAll();
      000513 C0 07            [24] 1336 	push	ar7
      000515 C0 06            [24] 1337 	push	ar6
      000517 12r00r00         [24] 1338 	lcall	_vTaskSuspendAll
      00051A D0 06            [24] 1339 	pop	ar6
      00051C D0 07            [24] 1340 	pop	ar7
                           00051E  1341 	C$queue.c$910$3_0$189 ==.
                                   1342 ;	src/FreeRTOS/queue.c:910: prvLockQueue( pxQueue );
      00051E C0 E0            [24] 1343 	push ACC 
      000520 C0 A8            [24] 1344 	push IE 
                                   1345 ;	assignBit
      000522 C2 AF            [12] 1346 	clr	_EA
      000524 E5*00            [12] 1347 	mov	a,_bp
      000526 24 0F            [12] 1348 	add	a,#0x0f
      000528 F8               [12] 1349 	mov	r0,a
      000529 74 27            [12] 1350 	mov	a,#0x27
      00052B 26               [12] 1351 	add	a,@r0
      00052C FA               [12] 1352 	mov	r2,a
      00052D E4               [12] 1353 	clr	a
      00052E 08               [12] 1354 	inc	r0
      00052F 36               [12] 1355 	addc	a,@r0
      000530 FB               [12] 1356 	mov	r3,a
      000531 08               [12] 1357 	inc	r0
      000532 86 04            [24] 1358 	mov	ar4,@r0
      000534 8A 82            [24] 1359 	mov	dpl,r2
      000536 8B 83            [24] 1360 	mov	dph,r3
      000538 8C F0            [24] 1361 	mov	b,r4
      00053A 12r00r00         [24] 1362 	lcall	__gptrget
      00053D FD               [12] 1363 	mov	r5,a
      00053E BD FF 0A         [24] 1364 	cjne	r5,#0xff,00118$
      000541 8A 82            [24] 1365 	mov	dpl,r2
      000543 8B 83            [24] 1366 	mov	dph,r3
      000545 8C F0            [24] 1367 	mov	b,r4
      000547 E4               [12] 1368 	clr	a
      000548 12r00r00         [24] 1369 	lcall	__gptrput
      00054B                       1370 00118$:
      00054B E5*00            [12] 1371 	mov	a,_bp
      00054D 24 0F            [12] 1372 	add	a,#0x0f
      00054F F8               [12] 1373 	mov	r0,a
      000550 74 28            [12] 1374 	mov	a,#0x28
      000552 26               [12] 1375 	add	a,@r0
      000553 FA               [12] 1376 	mov	r2,a
      000554 E4               [12] 1377 	clr	a
      000555 08               [12] 1378 	inc	r0
      000556 36               [12] 1379 	addc	a,@r0
      000557 FB               [12] 1380 	mov	r3,a
      000558 08               [12] 1381 	inc	r0
      000559 86 04            [24] 1382 	mov	ar4,@r0
      00055B 8A 82            [24] 1383 	mov	dpl,r2
      00055D 8B 83            [24] 1384 	mov	dph,r3
      00055F 8C F0            [24] 1385 	mov	b,r4
      000561 12r00r00         [24] 1386 	lcall	__gptrget
      000564 FD               [12] 1387 	mov	r5,a
      000565 BD FF 0A         [24] 1388 	cjne	r5,#0xff,00120$
      000568 8A 82            [24] 1389 	mov	dpl,r2
      00056A 8B 83            [24] 1390 	mov	dph,r3
      00056C 8C F0            [24] 1391 	mov	b,r4
      00056E E4               [12] 1392 	clr	a
      00056F 12r00r00         [24] 1393 	lcall	__gptrput
      000572                       1394 00120$:
      000572 C0 07            [24] 1395 	push	ar7
      000574 D0 E0            [24] 1396 	pop ACC 
      000576 53 E0 80         [24] 1397 	anl	_ACC,#0x80
      000579 E5 E0            [12] 1398 	mov	a,_ACC
      00057B 42 A8            [12] 1399 	orl	_IE,a
      00057D D0 E0            [24] 1400 	pop ACC 
                           00057F  1401 	C$queue.c$913$3_0$189 ==.
                                   1402 ;	src/FreeRTOS/queue.c:913: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      00057F E5*00            [12] 1403 	mov	a,_bp
      000581 24 F9            [12] 1404 	add	a,#0xf9
      000583 FC               [12] 1405 	mov	r4,a
      000584 E5*00            [12] 1406 	mov	a,_bp
      000586 24 08            [12] 1407 	add	a,#0x08
      000588 F8               [12] 1408 	mov	r0,a
      000589 A6 04            [24] 1409 	mov	@r0,ar4
      00058B 08               [12] 1410 	inc	r0
      00058C 76 00            [12] 1411 	mov	@r0,#0x00
      00058E 08               [12] 1412 	inc	r0
      00058F 76 40            [12] 1413 	mov	@r0,#0x40
      000591 E5*00            [12] 1414 	mov	a,_bp
      000593 24 07            [12] 1415 	add	a,#0x07
      000595 F8               [12] 1416 	mov	r0,a
      000596 86 04            [24] 1417 	mov	ar4,@r0
      000598 7D 00            [12] 1418 	mov	r5,#0x00
      00059A 7F 40            [12] 1419 	mov	r7,#0x40
      00059C C0 06            [24] 1420 	push	ar6
      00059E E5*00            [12] 1421 	mov	a,_bp
      0005A0 24 08            [12] 1422 	add	a,#0x08
      0005A2 F8               [12] 1423 	mov	r0,a
      0005A3 E6               [12] 1424 	mov	a,@r0
      0005A4 C0 E0            [24] 1425 	push	acc
      0005A6 08               [12] 1426 	inc	r0
      0005A7 E6               [12] 1427 	mov	a,@r0
      0005A8 C0 E0            [24] 1428 	push	acc
      0005AA 08               [12] 1429 	inc	r0
      0005AB E6               [12] 1430 	mov	a,@r0
      0005AC C0 E0            [24] 1431 	push	acc
      0005AE 8C 82            [24] 1432 	mov	dpl,r4
      0005B0 8D 83            [24] 1433 	mov	dph,r5
      0005B2 8F F0            [24] 1434 	mov	b,r7
      0005B4 12r00r00         [24] 1435 	lcall	_xTaskCheckForTimeOut
      0005B7 AF 82            [24] 1436 	mov	r7,dpl
      0005B9 15 81            [12] 1437 	dec	sp
      0005BB 15 81            [12] 1438 	dec	sp
      0005BD 15 81            [12] 1439 	dec	sp
      0005BF D0 06            [24] 1440 	pop	ar6
      0005C1 EF               [12] 1441 	mov	a,r7
      0005C2 D0 07            [24] 1442 	pop	ar7
      0005C4 60 03            [24] 1443 	jz	00197$
      0005C6 02r06r54         [24] 1444 	ljmp	00127$
      0005C9                       1445 00197$:
                           0005C9  1446 	C$queue.c$915$4_0$205 ==.
                                   1447 ;	src/FreeRTOS/queue.c:915: if( prvIsQueueFull( pxQueue ) != pdFALSE )
      0005C9 E5*00            [12] 1448 	mov	a,_bp
      0005CB 24 0F            [12] 1449 	add	a,#0x0f
      0005CD F8               [12] 1450 	mov	r0,a
      0005CE 86 82            [24] 1451 	mov	dpl,@r0
      0005D0 08               [12] 1452 	inc	r0
      0005D1 86 83            [24] 1453 	mov	dph,@r0
      0005D3 08               [12] 1454 	inc	r0
      0005D4 86 F0            [24] 1455 	mov	b,@r0
      0005D6 C0 07            [24] 1456 	push	ar7
      0005D8 C0 06            [24] 1457 	push	ar6
      0005DA 12r18rEB         [24] 1458 	lcall	_prvIsQueueFull
      0005DD E5 82            [12] 1459 	mov	a,dpl
      0005DF D0 06            [24] 1460 	pop	ar6
      0005E1 D0 07            [24] 1461 	pop	ar7
      0005E3 60 51            [24] 1462 	jz	00124$
                           0005E5  1463 	C$queue.c$918$5_0$206 ==.
                                   1464 ;	src/FreeRTOS/queue.c:918: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
      0005E5 E5*00            [12] 1465 	mov	a,_bp
      0005E7 24 0F            [12] 1466 	add	a,#0x0f
      0005E9 F8               [12] 1467 	mov	r0,a
      0005EA 74 0C            [12] 1468 	mov	a,#0x0c
      0005EC 26               [12] 1469 	add	a,@r0
      0005ED FB               [12] 1470 	mov	r3,a
      0005EE E4               [12] 1471 	clr	a
      0005EF 08               [12] 1472 	inc	r0
      0005F0 36               [12] 1473 	addc	a,@r0
      0005F1 FC               [12] 1474 	mov	r4,a
      0005F2 08               [12] 1475 	inc	r0
      0005F3 86 05            [24] 1476 	mov	ar5,@r0
      0005F5 C0 07            [24] 1477 	push	ar7
      0005F7 C0 06            [24] 1478 	push	ar6
      0005F9 E5*00            [12] 1479 	mov	a,_bp
      0005FB 24 F9            [12] 1480 	add	a,#0xf9
      0005FD F8               [12] 1481 	mov	r0,a
      0005FE E6               [12] 1482 	mov	a,@r0
      0005FF C0 E0            [24] 1483 	push	acc
      000601 08               [12] 1484 	inc	r0
      000602 E6               [12] 1485 	mov	a,@r0
      000603 C0 E0            [24] 1486 	push	acc
      000605 8B 82            [24] 1487 	mov	dpl,r3
      000607 8C 83            [24] 1488 	mov	dph,r4
      000609 8D F0            [24] 1489 	mov	b,r5
      00060B 12r00r00         [24] 1490 	lcall	_vTaskPlaceOnEventList
      00060E 15 81            [12] 1491 	dec	sp
      000610 15 81            [12] 1492 	dec	sp
                           000612  1493 	C$queue.c$925$5_0$206 ==.
                                   1494 ;	src/FreeRTOS/queue.c:925: prvUnlockQueue( pxQueue );
      000612 E5*00            [12] 1495 	mov	a,_bp
      000614 24 0F            [12] 1496 	add	a,#0x0f
      000616 F8               [12] 1497 	mov	r0,a
      000617 86 82            [24] 1498 	mov	dpl,@r0
      000619 08               [12] 1499 	inc	r0
      00061A 86 83            [24] 1500 	mov	dph,@r0
      00061C 08               [12] 1501 	inc	r0
      00061D 86 F0            [24] 1502 	mov	b,@r0
      00061F 12r17r1E         [24] 1503 	lcall	_prvUnlockQueue
                           000622  1504 	C$queue.c$932$5_0$206 ==.
                                   1505 ;	src/FreeRTOS/queue.c:932: if( xTaskResumeAll() == pdFALSE )
      000622 12r00r00         [24] 1506 	lcall	_xTaskResumeAll
      000625 E5 82            [12] 1507 	mov	a,dpl
      000627 D0 06            [24] 1508 	pop	ar6
      000629 D0 07            [24] 1509 	pop	ar7
      00062B 60 03            [24] 1510 	jz	00199$
      00062D 02r04r11         [24] 1511 	ljmp	00130$
      000630                       1512 00199$:
                           000630  1513 	C$queue.c$934$6_0$207 ==.
                                   1514 ;	src/FreeRTOS/queue.c:934: portYIELD_WITHIN_API();
      000630 12r00r00         [24] 1515 	lcall	_vPortYield
      000633 02r04r11         [24] 1516 	ljmp	00130$
      000636                       1517 00124$:
                           000636  1518 	C$queue.c$940$5_0$208 ==.
                                   1519 ;	src/FreeRTOS/queue.c:940: prvUnlockQueue( pxQueue );
      000636 E5*00            [12] 1520 	mov	a,_bp
      000638 24 0F            [12] 1521 	add	a,#0x0f
      00063A F8               [12] 1522 	mov	r0,a
      00063B 86 82            [24] 1523 	mov	dpl,@r0
      00063D 08               [12] 1524 	inc	r0
      00063E 86 83            [24] 1525 	mov	dph,@r0
      000640 08               [12] 1526 	inc	r0
      000641 86 F0            [24] 1527 	mov	b,@r0
      000643 C0 07            [24] 1528 	push	ar7
      000645 C0 06            [24] 1529 	push	ar6
      000647 12r17r1E         [24] 1530 	lcall	_prvUnlockQueue
                           00064A  1531 	C$queue.c$941$5_0$208 ==.
                                   1532 ;	src/FreeRTOS/queue.c:941: ( void ) xTaskResumeAll();
      00064A 12r00r00         [24] 1533 	lcall	_xTaskResumeAll
      00064D D0 06            [24] 1534 	pop	ar6
      00064F D0 07            [24] 1535 	pop	ar7
      000651 02r04r11         [24] 1536 	ljmp	00130$
      000654                       1537 00127$:
                           000654  1538 	C$queue.c$947$4_0$209 ==.
                                   1539 ;	src/FreeRTOS/queue.c:947: prvUnlockQueue( pxQueue );
      000654 E5*00            [12] 1540 	mov	a,_bp
      000656 24 0F            [12] 1541 	add	a,#0x0f
      000658 F8               [12] 1542 	mov	r0,a
      000659 86 82            [24] 1543 	mov	dpl,@r0
      00065B 08               [12] 1544 	inc	r0
      00065C 86 83            [24] 1545 	mov	dph,@r0
      00065E 08               [12] 1546 	inc	r0
      00065F 86 F0            [24] 1547 	mov	b,@r0
      000661 12r17r1E         [24] 1548 	lcall	_prvUnlockQueue
                           000664  1549 	C$queue.c$948$4_0$209 ==.
                                   1550 ;	src/FreeRTOS/queue.c:948: ( void ) xTaskResumeAll();
      000664 12r00r00         [24] 1551 	lcall	_xTaskResumeAll
                           000667  1552 	C$queue.c$951$4_0$209 ==.
                                   1553 ;	src/FreeRTOS/queue.c:951: return errQUEUE_FULL;
      000667 75 82 00         [24] 1554 	mov	dpl,#0x00
      00066A                       1555 00132$:
                           00066A  1556 	C$queue.c$954$2_0$187 ==.
                                   1557 ;	src/FreeRTOS/queue.c:954: }
      00066A 85*00 81         [24] 1558 	mov	sp,_bp
      00066D D0*00            [24] 1559 	pop	_bp
                           00066F  1560 	C$queue.c$954$2_0$187 ==.
                           00066F  1561 	XG$xQueueGenericSend$0$0 ==.
      00066F 22               [24] 1562 	ret
                                   1563 ;------------------------------------------------------------
                                   1564 ;Allocation info for local variables in function 'xQueueGenericSendFromISR'
                                   1565 ;------------------------------------------------------------
                                   1566 ;pvItemToQueue             Allocated to stack - _bp -5
                                   1567 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -8
                                   1568 ;xCopyPosition             Allocated to stack - _bp -9
                                   1569 ;xQueue                    Allocated to registers r2 r3 r4 
                                   1570 ;xReturn                   Allocated to registers r7 
                                   1571 ;uxSavedInterruptStatus    Allocated to registers 
                                   1572 ;pxQueue                   Allocated to stack - _bp +1
                                   1573 ;cTxLock                   Allocated to registers r7 
                                   1574 ;------------------------------------------------------------
                           000670  1575 	G$xQueueGenericSendFromISR$0$0 ==.
                           000670  1576 	C$queue.c$957$2_0$211 ==.
                                   1577 ;	src/FreeRTOS/queue.c:957: BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
                                   1578 ;	-----------------------------------------
                                   1579 ;	 function xQueueGenericSendFromISR
                                   1580 ;	-----------------------------------------
      000670                       1581 _xQueueGenericSendFromISR:
      000670 C0*00            [24] 1582 	push	_bp
      000672 85 81*00         [24] 1583 	mov	_bp,sp
      000675 05 81            [12] 1584 	inc	sp
      000677 05 81            [12] 1585 	inc	sp
      000679 05 81            [12] 1586 	inc	sp
      00067B AA 82            [24] 1587 	mov	r2,dpl
      00067D AB 83            [24] 1588 	mov	r3,dph
      00067F AC F0            [24] 1589 	mov	r4,b
                           000681  1590 	C$queue.c$961$2_0$211 ==.
                                   1591 ;	src/FreeRTOS/queue.c:961: Queue_t * const pxQueue = xQueue;
      000681 A8*00            [24] 1592 	mov	r0,_bp
      000683 08               [12] 1593 	inc	r0
      000684 A6 02            [24] 1594 	mov	@r0,ar2
      000686 08               [12] 1595 	inc	r0
      000687 A6 03            [24] 1596 	mov	@r0,ar3
      000689 08               [12] 1597 	inc	r0
      00068A A6 04            [24] 1598 	mov	@r0,ar4
                           00068C  1599 	C$queue.c$990$2_0$212 ==.
                                   1600 ;	src/FreeRTOS/queue.c:990: if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
      00068C 74 24            [12] 1601 	mov	a,#0x24
      00068E 2A               [12] 1602 	add	a,r2
      00068F FD               [12] 1603 	mov	r5,a
      000690 E4               [12] 1604 	clr	a
      000691 3B               [12] 1605 	addc	a,r3
      000692 FE               [12] 1606 	mov	r6,a
      000693 8C 07            [24] 1607 	mov	ar7,r4
      000695 8D 82            [24] 1608 	mov	dpl,r5
      000697 8E 83            [24] 1609 	mov	dph,r6
      000699 8F F0            [24] 1610 	mov	b,r7
      00069B 12r00r00         [24] 1611 	lcall	__gptrget
      00069E FD               [12] 1612 	mov	r5,a
      00069F 74 25            [12] 1613 	mov	a,#0x25
      0006A1 2A               [12] 1614 	add	a,r2
      0006A2 FC               [12] 1615 	mov	r4,a
      0006A3 E4               [12] 1616 	clr	a
      0006A4 3B               [12] 1617 	addc	a,r3
      0006A5 FE               [12] 1618 	mov	r6,a
      0006A6 8C 07            [24] 1619 	mov	ar7,r4
      0006A8 8C 82            [24] 1620 	mov	dpl,r4
      0006AA 8E 83            [24] 1621 	mov	dph,r6
      0006AC 8F F0            [24] 1622 	mov	b,r7
      0006AE 12r00r00         [24] 1623 	lcall	__gptrget
      0006B1 FC               [12] 1624 	mov	r4,a
      0006B2 C3               [12] 1625 	clr	c
      0006B3 ED               [12] 1626 	mov	a,r5
      0006B4 9C               [12] 1627 	subb	a,r4
      0006B5 40 0D            [24] 1628 	jc	00110$
      0006B7 E5*00            [12] 1629 	mov	a,_bp
      0006B9 24 F7            [12] 1630 	add	a,#0xf7
      0006BB F8               [12] 1631 	mov	r0,a
      0006BC B6 02 02         [24] 1632 	cjne	@r0,#0x02,00139$
      0006BF 80 03            [24] 1633 	sjmp	00140$
      0006C1                       1634 00139$:
      0006C1 02r07r85         [24] 1635 	ljmp	00111$
      0006C4                       1636 00140$:
      0006C4                       1637 00110$:
                           0006C4  1638 	C$queue.c$992$3_0$213 ==.
                                   1639 ;	src/FreeRTOS/queue.c:992: const int8_t cTxLock = pxQueue->cTxLock;
      0006C4 A8*00            [24] 1640 	mov	r0,_bp
      0006C6 08               [12] 1641 	inc	r0
      0006C7 74 28            [12] 1642 	mov	a,#0x28
      0006C9 26               [12] 1643 	add	a,@r0
      0006CA FD               [12] 1644 	mov	r5,a
      0006CB E4               [12] 1645 	clr	a
      0006CC 08               [12] 1646 	inc	r0
      0006CD 36               [12] 1647 	addc	a,@r0
      0006CE FE               [12] 1648 	mov	r6,a
      0006CF 08               [12] 1649 	inc	r0
      0006D0 86 07            [24] 1650 	mov	ar7,@r0
      0006D2 8D 82            [24] 1651 	mov	dpl,r5
      0006D4 8E 83            [24] 1652 	mov	dph,r6
      0006D6 8F F0            [24] 1653 	mov	b,r7
      0006D8 12r00r00         [24] 1654 	lcall	__gptrget
      0006DB FF               [12] 1655 	mov	r7,a
                           0006DC  1656 	C$queue.c$1001$3_0$213 ==.
                                   1657 ;	src/FreeRTOS/queue.c:1001: ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
      0006DC C0 07            [24] 1658 	push	ar7
      0006DE E5*00            [12] 1659 	mov	a,_bp
      0006E0 24 F7            [12] 1660 	add	a,#0xf7
      0006E2 F8               [12] 1661 	mov	r0,a
      0006E3 E6               [12] 1662 	mov	a,@r0
      0006E4 C0 E0            [24] 1663 	push	acc
      0006E6 E5*00            [12] 1664 	mov	a,_bp
      0006E8 24 FB            [12] 1665 	add	a,#0xfb
      0006EA F8               [12] 1666 	mov	r0,a
      0006EB E6               [12] 1667 	mov	a,@r0
      0006EC C0 E0            [24] 1668 	push	acc
      0006EE 08               [12] 1669 	inc	r0
      0006EF E6               [12] 1670 	mov	a,@r0
      0006F0 C0 E0            [24] 1671 	push	acc
      0006F2 08               [12] 1672 	inc	r0
      0006F3 E6               [12] 1673 	mov	a,@r0
      0006F4 C0 E0            [24] 1674 	push	acc
      0006F6 A8*00            [24] 1675 	mov	r0,_bp
      0006F8 08               [12] 1676 	inc	r0
      0006F9 86 82            [24] 1677 	mov	dpl,@r0
      0006FB 08               [12] 1678 	inc	r0
      0006FC 86 83            [24] 1679 	mov	dph,@r0
      0006FE 08               [12] 1680 	inc	r0
      0006FF 86 F0            [24] 1681 	mov	b,@r0
      000701 12r12r89         [24] 1682 	lcall	_prvCopyDataToQueue
      000704 E5 81            [12] 1683 	mov	a,sp
      000706 24 FC            [12] 1684 	add	a,#0xfc
      000708 F5 81            [12] 1685 	mov	sp,a
      00070A D0 07            [24] 1686 	pop	ar7
                           00070C  1687 	C$queue.c$1005$3_0$213 ==.
                                   1688 ;	src/FreeRTOS/queue.c:1005: if( cTxLock == queueUNLOCKED )
      00070C BF FF 58         [24] 1689 	cjne	r7,#0xff,00108$
                           00070F  1690 	C$queue.c$1060$5_0$215 ==.
                                   1691 ;	src/FreeRTOS/queue.c:1060: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      00070F A8*00            [24] 1692 	mov	r0,_bp
      000711 08               [12] 1693 	inc	r0
      000712 74 18            [12] 1694 	mov	a,#0x18
      000714 26               [12] 1695 	add	a,@r0
      000715 FC               [12] 1696 	mov	r4,a
      000716 E4               [12] 1697 	clr	a
      000717 08               [12] 1698 	inc	r0
      000718 36               [12] 1699 	addc	a,@r0
      000719 FD               [12] 1700 	mov	r5,a
      00071A 08               [12] 1701 	inc	r0
      00071B 86 06            [24] 1702 	mov	ar6,@r0
      00071D 8C 82            [24] 1703 	mov	dpl,r4
      00071F 8D 83            [24] 1704 	mov	dph,r5
      000721 8E F0            [24] 1705 	mov	b,r6
      000723 12r00r00         [24] 1706 	lcall	__gptrget
      000726 60 58            [24] 1707 	jz	00109$
                           000728  1708 	C$queue.c$1062$6_0$216 ==.
                                   1709 ;	src/FreeRTOS/queue.c:1062: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      000728 A8*00            [24] 1710 	mov	r0,_bp
      00072A 08               [12] 1711 	inc	r0
      00072B 74 18            [12] 1712 	mov	a,#0x18
      00072D 26               [12] 1713 	add	a,@r0
      00072E FC               [12] 1714 	mov	r4,a
      00072F E4               [12] 1715 	clr	a
      000730 08               [12] 1716 	inc	r0
      000731 36               [12] 1717 	addc	a,@r0
      000732 FD               [12] 1718 	mov	r5,a
      000733 08               [12] 1719 	inc	r0
      000734 86 06            [24] 1720 	mov	ar6,@r0
      000736 8C 82            [24] 1721 	mov	dpl,r4
      000738 8D 83            [24] 1722 	mov	dph,r5
      00073A 8E F0            [24] 1723 	mov	b,r6
      00073C 12r00r00         [24] 1724 	lcall	_xTaskRemoveFromEventList
      00073F E5 82            [12] 1725 	mov	a,dpl
      000741 60 3D            [24] 1726 	jz	00109$
                           000743  1727 	C$queue.c$1066$7_0$217 ==.
                                   1728 ;	src/FreeRTOS/queue.c:1066: if( pxHigherPriorityTaskWoken != NULL )
      000743 E5*00            [12] 1729 	mov	a,_bp
      000745 24 F8            [12] 1730 	add	a,#0xf8
      000747 F8               [12] 1731 	mov	r0,a
      000748 E6               [12] 1732 	mov	a,@r0
      000749 08               [12] 1733 	inc	r0
      00074A 46               [12] 1734 	orl	a,@r0
      00074B 60 33            [24] 1735 	jz	00109$
                           00074D  1736 	C$queue.c$1068$8_0$218 ==.
                                   1737 ;	src/FreeRTOS/queue.c:1068: *pxHigherPriorityTaskWoken = pdTRUE;
      00074D E5*00            [12] 1738 	mov	a,_bp
      00074F 24 F8            [12] 1739 	add	a,#0xf8
      000751 F8               [12] 1740 	mov	r0,a
      000752 86 04            [24] 1741 	mov	ar4,@r0
      000754 08               [12] 1742 	inc	r0
      000755 86 05            [24] 1743 	mov	ar5,@r0
      000757 08               [12] 1744 	inc	r0
      000758 86 06            [24] 1745 	mov	ar6,@r0
      00075A 8C 82            [24] 1746 	mov	dpl,r4
      00075C 8D 83            [24] 1747 	mov	dph,r5
      00075E 8E F0            [24] 1748 	mov	b,r6
      000760 74 01            [12] 1749 	mov	a,#0x01
      000762 12r00r00         [24] 1750 	lcall	__gptrput
      000765 80 19            [24] 1751 	sjmp	00109$
      000767                       1752 00108$:
                           000767  1753 	C$queue.c$1091$4_0$222 ==.
                                   1754 ;	src/FreeRTOS/queue.c:1091: pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
      000767 A8*00            [24] 1755 	mov	r0,_bp
      000769 08               [12] 1756 	inc	r0
      00076A 74 28            [12] 1757 	mov	a,#0x28
      00076C 26               [12] 1758 	add	a,@r0
      00076D FC               [12] 1759 	mov	r4,a
      00076E E4               [12] 1760 	clr	a
      00076F 08               [12] 1761 	inc	r0
      000770 36               [12] 1762 	addc	a,@r0
      000771 FD               [12] 1763 	mov	r5,a
      000772 08               [12] 1764 	inc	r0
      000773 86 06            [24] 1765 	mov	ar6,@r0
      000775 0F               [12] 1766 	inc	r7
      000776 8C 82            [24] 1767 	mov	dpl,r4
      000778 8D 83            [24] 1768 	mov	dph,r5
      00077A 8E F0            [24] 1769 	mov	b,r6
      00077C EF               [12] 1770 	mov	a,r7
      00077D 12r00r00         [24] 1771 	lcall	__gptrput
      000780                       1772 00109$:
                           000780  1773 	C$queue.c$1094$3_0$213 ==.
                                   1774 ;	src/FreeRTOS/queue.c:1094: xReturn = pdPASS;
                           000780  1775 	C$queue.c$1099$3_0$223 ==.
                                   1776 ;	src/FreeRTOS/queue.c:1099: xReturn = errQUEUE_FULL;
                           000780  1777 	C$queue.c$1104$1_0$211 ==.
                                   1778 ;	src/FreeRTOS/queue.c:1104: return xReturn;
                           000780  1779 	C$queue.c$1105$1_0$211 ==.
                                   1780 ;	src/FreeRTOS/queue.c:1105: }
      000780 75 82 01         [24] 1781 	mov	dpl,#0x01
      000783 80 03            [24] 1782 	sjmp	00112$
      000785                       1783 00111$:
      000785 75 82 00         [24] 1784 	mov	dpl,#0x00
      000788                       1785 00112$:
      000788 85*00 81         [24] 1786 	mov	sp,_bp
      00078B D0*00            [24] 1787 	pop	_bp
                           00078D  1788 	C$queue.c$1105$1_0$211 ==.
                           00078D  1789 	XG$xQueueGenericSendFromISR$0$0 ==.
      00078D 22               [24] 1790 	ret
                                   1791 ;------------------------------------------------------------
                                   1792 ;Allocation info for local variables in function 'xQueueGiveFromISR'
                                   1793 ;------------------------------------------------------------
                                   1794 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -5
                                   1795 ;xQueue                    Allocated to stack - _bp +1
                                   1796 ;xReturn                   Allocated to registers r7 
                                   1797 ;uxSavedInterruptStatus    Allocated to registers 
                                   1798 ;pxQueue                   Allocated to registers 
                                   1799 ;uxMessagesWaiting         Allocated to stack - _bp +7
                                   1800 ;cTxLock                   Allocated to registers r7 
                                   1801 ;sloc0                     Allocated to stack - _bp +4
                                   1802 ;------------------------------------------------------------
                           00078E  1803 	G$xQueueGiveFromISR$0$0 ==.
                           00078E  1804 	C$queue.c$1108$1_0$225 ==.
                                   1805 ;	src/FreeRTOS/queue.c:1108: BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
                                   1806 ;	-----------------------------------------
                                   1807 ;	 function xQueueGiveFromISR
                                   1808 ;	-----------------------------------------
      00078E                       1809 _xQueueGiveFromISR:
      00078E C0*00            [24] 1810 	push	_bp
      000790 85 81*00         [24] 1811 	mov	_bp,sp
      000793 C0 82            [24] 1812 	push	dpl
      000795 C0 83            [24] 1813 	push	dph
      000797 C0 F0            [24] 1814 	push	b
      000799 E5 81            [12] 1815 	mov	a,sp
      00079B 24 04            [12] 1816 	add	a,#0x04
      00079D F5 81            [12] 1817 	mov	sp,a
                           00079F  1818 	C$queue.c$1149$2_0$226 ==.
                                   1819 ;	src/FreeRTOS/queue.c:1149: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      00079F A8*00            [24] 1820 	mov	r0,_bp
      0007A1 08               [12] 1821 	inc	r0
      0007A2 74 24            [12] 1822 	mov	a,#0x24
      0007A4 26               [12] 1823 	add	a,@r0
      0007A5 FA               [12] 1824 	mov	r2,a
      0007A6 E4               [12] 1825 	clr	a
      0007A7 08               [12] 1826 	inc	r0
      0007A8 36               [12] 1827 	addc	a,@r0
      0007A9 FB               [12] 1828 	mov	r3,a
      0007AA 08               [12] 1829 	inc	r0
      0007AB 86 04            [24] 1830 	mov	ar4,@r0
      0007AD 8A 82            [24] 1831 	mov	dpl,r2
      0007AF 8B 83            [24] 1832 	mov	dph,r3
      0007B1 8C F0            [24] 1833 	mov	b,r4
      0007B3 E5*00            [12] 1834 	mov	a,_bp
      0007B5 24 07            [12] 1835 	add	a,#0x07
      0007B7 F8               [12] 1836 	mov	r0,a
      0007B8 12r00r00         [24] 1837 	lcall	__gptrget
      0007BB F6               [12] 1838 	mov	@r0,a
                           0007BC  1839 	C$queue.c$1154$2_0$226 ==.
                                   1840 ;	src/FreeRTOS/queue.c:1154: if( uxMessagesWaiting < pxQueue->uxLength )
      0007BC A8*00            [24] 1841 	mov	r0,_bp
      0007BE 08               [12] 1842 	inc	r0
      0007BF 74 25            [12] 1843 	mov	a,#0x25
      0007C1 26               [12] 1844 	add	a,@r0
      0007C2 FD               [12] 1845 	mov	r5,a
      0007C3 E4               [12] 1846 	clr	a
      0007C4 08               [12] 1847 	inc	r0
      0007C5 36               [12] 1848 	addc	a,@r0
      0007C6 FE               [12] 1849 	mov	r6,a
      0007C7 08               [12] 1850 	inc	r0
      0007C8 86 07            [24] 1851 	mov	ar7,@r0
      0007CA 8D 82            [24] 1852 	mov	dpl,r5
      0007CC 8E 83            [24] 1853 	mov	dph,r6
      0007CE 8F F0            [24] 1854 	mov	b,r7
      0007D0 12r00r00         [24] 1855 	lcall	__gptrget
      0007D3 FD               [12] 1856 	mov	r5,a
      0007D4 E5*00            [12] 1857 	mov	a,_bp
      0007D6 24 07            [12] 1858 	add	a,#0x07
      0007D8 F8               [12] 1859 	mov	r0,a
      0007D9 C3               [12] 1860 	clr	c
      0007DA E6               [12] 1861 	mov	a,@r0
      0007DB 9D               [12] 1862 	subb	a,r5
      0007DC 40 03            [24] 1863 	jc	00137$
      0007DE 02r08r8A         [24] 1864 	ljmp	00111$
      0007E1                       1865 00137$:
                           0007E1  1866 	C$queue.c$1156$3_0$227 ==.
                                   1867 ;	src/FreeRTOS/queue.c:1156: const int8_t cTxLock = pxQueue->cTxLock;
      0007E1 A8*00            [24] 1868 	mov	r0,_bp
      0007E3 08               [12] 1869 	inc	r0
      0007E4 E5*00            [12] 1870 	mov	a,_bp
      0007E6 24 04            [12] 1871 	add	a,#0x04
      0007E8 F9               [12] 1872 	mov	r1,a
      0007E9 74 28            [12] 1873 	mov	a,#0x28
      0007EB 26               [12] 1874 	add	a,@r0
      0007EC F7               [12] 1875 	mov	@r1,a
      0007ED E4               [12] 1876 	clr	a
      0007EE 08               [12] 1877 	inc	r0
      0007EF 36               [12] 1878 	addc	a,@r0
      0007F0 09               [12] 1879 	inc	r1
      0007F1 F7               [12] 1880 	mov	@r1,a
      0007F2 08               [12] 1881 	inc	r0
      0007F3 09               [12] 1882 	inc	r1
      0007F4 E6               [12] 1883 	mov	a,@r0
      0007F5 F7               [12] 1884 	mov	@r1,a
      0007F6 E5*00            [12] 1885 	mov	a,_bp
      0007F8 24 04            [12] 1886 	add	a,#0x04
      0007FA F8               [12] 1887 	mov	r0,a
      0007FB 86 82            [24] 1888 	mov	dpl,@r0
      0007FD 08               [12] 1889 	inc	r0
      0007FE 86 83            [24] 1890 	mov	dph,@r0
      000800 08               [12] 1891 	inc	r0
      000801 86 F0            [24] 1892 	mov	b,@r0
      000803 12r00r00         [24] 1893 	lcall	__gptrget
      000806 FF               [12] 1894 	mov	r7,a
                           000807  1895 	C$queue.c$1166$3_0$227 ==.
                                   1896 ;	src/FreeRTOS/queue.c:1166: pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
      000807 E5*00            [12] 1897 	mov	a,_bp
      000809 24 07            [12] 1898 	add	a,#0x07
      00080B F8               [12] 1899 	mov	r0,a
      00080C E6               [12] 1900 	mov	a,@r0
      00080D 04               [12] 1901 	inc	a
      00080E FE               [12] 1902 	mov	r6,a
      00080F 8A 82            [24] 1903 	mov	dpl,r2
      000811 8B 83            [24] 1904 	mov	dph,r3
      000813 8C F0            [24] 1905 	mov	b,r4
      000815 12r00r00         [24] 1906 	lcall	__gptrput
                           000818  1907 	C$queue.c$1170$3_0$227 ==.
                                   1908 ;	src/FreeRTOS/queue.c:1170: if( cTxLock == queueUNLOCKED )
      000818 BF FF 58         [24] 1909 	cjne	r7,#0xff,00108$
                           00081B  1910 	C$queue.c$1225$5_0$229 ==.
                                   1911 ;	src/FreeRTOS/queue.c:1225: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      00081B A8*00            [24] 1912 	mov	r0,_bp
      00081D 08               [12] 1913 	inc	r0
      00081E 74 18            [12] 1914 	mov	a,#0x18
      000820 26               [12] 1915 	add	a,@r0
      000821 FC               [12] 1916 	mov	r4,a
      000822 E4               [12] 1917 	clr	a
      000823 08               [12] 1918 	inc	r0
      000824 36               [12] 1919 	addc	a,@r0
      000825 FD               [12] 1920 	mov	r5,a
      000826 08               [12] 1921 	inc	r0
      000827 86 06            [24] 1922 	mov	ar6,@r0
      000829 8C 82            [24] 1923 	mov	dpl,r4
      00082B 8D 83            [24] 1924 	mov	dph,r5
      00082D 8E F0            [24] 1925 	mov	b,r6
      00082F 12r00r00         [24] 1926 	lcall	__gptrget
      000832 60 51            [24] 1927 	jz	00109$
                           000834  1928 	C$queue.c$1227$6_0$230 ==.
                                   1929 ;	src/FreeRTOS/queue.c:1227: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      000834 A8*00            [24] 1930 	mov	r0,_bp
      000836 08               [12] 1931 	inc	r0
      000837 74 18            [12] 1932 	mov	a,#0x18
      000839 26               [12] 1933 	add	a,@r0
      00083A FC               [12] 1934 	mov	r4,a
      00083B E4               [12] 1935 	clr	a
      00083C 08               [12] 1936 	inc	r0
      00083D 36               [12] 1937 	addc	a,@r0
      00083E FD               [12] 1938 	mov	r5,a
      00083F 08               [12] 1939 	inc	r0
      000840 86 06            [24] 1940 	mov	ar6,@r0
      000842 8C 82            [24] 1941 	mov	dpl,r4
      000844 8D 83            [24] 1942 	mov	dph,r5
      000846 8E F0            [24] 1943 	mov	b,r6
      000848 12r00r00         [24] 1944 	lcall	_xTaskRemoveFromEventList
      00084B E5 82            [12] 1945 	mov	a,dpl
      00084D 60 36            [24] 1946 	jz	00109$
                           00084F  1947 	C$queue.c$1231$7_0$231 ==.
                                   1948 ;	src/FreeRTOS/queue.c:1231: if( pxHigherPriorityTaskWoken != NULL )
      00084F E5*00            [12] 1949 	mov	a,_bp
      000851 24 FB            [12] 1950 	add	a,#0xfb
      000853 F8               [12] 1951 	mov	r0,a
      000854 E6               [12] 1952 	mov	a,@r0
      000855 08               [12] 1953 	inc	r0
      000856 46               [12] 1954 	orl	a,@r0
      000857 60 2C            [24] 1955 	jz	00109$
                           000859  1956 	C$queue.c$1233$8_0$232 ==.
                                   1957 ;	src/FreeRTOS/queue.c:1233: *pxHigherPriorityTaskWoken = pdTRUE;
      000859 E5*00            [12] 1958 	mov	a,_bp
      00085B 24 FB            [12] 1959 	add	a,#0xfb
      00085D F8               [12] 1960 	mov	r0,a
      00085E 86 04            [24] 1961 	mov	ar4,@r0
      000860 08               [12] 1962 	inc	r0
      000861 86 05            [24] 1963 	mov	ar5,@r0
      000863 08               [12] 1964 	inc	r0
      000864 86 06            [24] 1965 	mov	ar6,@r0
      000866 8C 82            [24] 1966 	mov	dpl,r4
      000868 8D 83            [24] 1967 	mov	dph,r5
      00086A 8E F0            [24] 1968 	mov	b,r6
      00086C 74 01            [12] 1969 	mov	a,#0x01
      00086E 12r00r00         [24] 1970 	lcall	__gptrput
      000871 80 12            [24] 1971 	sjmp	00109$
      000873                       1972 00108$:
                           000873  1973 	C$queue.c$1256$4_0$236 ==.
                                   1974 ;	src/FreeRTOS/queue.c:1256: pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
      000873 0F               [12] 1975 	inc	r7
      000874 E5*00            [12] 1976 	mov	a,_bp
      000876 24 04            [12] 1977 	add	a,#0x04
      000878 F8               [12] 1978 	mov	r0,a
      000879 86 82            [24] 1979 	mov	dpl,@r0
      00087B 08               [12] 1980 	inc	r0
      00087C 86 83            [24] 1981 	mov	dph,@r0
      00087E 08               [12] 1982 	inc	r0
      00087F 86 F0            [24] 1983 	mov	b,@r0
      000881 EF               [12] 1984 	mov	a,r7
      000882 12r00r00         [24] 1985 	lcall	__gptrput
      000885                       1986 00109$:
                           000885  1987 	C$queue.c$1259$3_0$227 ==.
                                   1988 ;	src/FreeRTOS/queue.c:1259: xReturn = pdPASS;
                           000885  1989 	C$queue.c$1264$3_0$237 ==.
                                   1990 ;	src/FreeRTOS/queue.c:1264: xReturn = errQUEUE_FULL;
                           000885  1991 	C$queue.c$1269$1_0$225 ==.
                                   1992 ;	src/FreeRTOS/queue.c:1269: return xReturn;
                           000885  1993 	C$queue.c$1270$1_0$225 ==.
                                   1994 ;	src/FreeRTOS/queue.c:1270: }
      000885 75 82 01         [24] 1995 	mov	dpl,#0x01
      000888 80 03            [24] 1996 	sjmp	00112$
      00088A                       1997 00111$:
      00088A 75 82 00         [24] 1998 	mov	dpl,#0x00
      00088D                       1999 00112$:
      00088D 85*00 81         [24] 2000 	mov	sp,_bp
      000890 D0*00            [24] 2001 	pop	_bp
                           000892  2002 	C$queue.c$1270$1_0$225 ==.
                           000892  2003 	XG$xQueueGiveFromISR$0$0 ==.
      000892 22               [24] 2004 	ret
                                   2005 ;------------------------------------------------------------
                                   2006 ;Allocation info for local variables in function 'xQueueReceive'
                                   2007 ;------------------------------------------------------------
                                   2008 ;pvBuffer                  Allocated to stack - _bp -5
                                   2009 ;xTicksToWait              Allocated to stack - _bp -7
                                   2010 ;xQueue                    Allocated to registers r4 r5 r7 
                                   2011 ;xEntryTimeSet             Allocated to stack - _bp +5
                                   2012 ;xTimeOut                  Allocated to stack - _bp +6
                                   2013 ;pxQueue                   Allocated to stack - _bp +9
                                   2014 ;uxMessagesWaiting         Allocated to registers r5 
                                   2015 ;sloc0                     Allocated to stack - _bp +1
                                   2016 ;sloc1                     Allocated to stack - _bp +15
                                   2017 ;sloc2                     Allocated to stack - _bp +4
                                   2018 ;------------------------------------------------------------
                           000893  2019 	G$xQueueReceive$0$0 ==.
                           000893  2020 	C$queue.c$1273$1_0$239 ==.
                                   2021 ;	src/FreeRTOS/queue.c:1273: BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
                                   2022 ;	-----------------------------------------
                                   2023 ;	 function xQueueReceive
                                   2024 ;	-----------------------------------------
      000893                       2025 _xQueueReceive:
      000893 C0*00            [24] 2026 	push	_bp
      000895 E5 81            [12] 2027 	mov	a,sp
      000897 F5*00            [12] 2028 	mov	_bp,a
      000899 24 0B            [12] 2029 	add	a,#0x0b
      00089B F5 81            [12] 2030 	mov	sp,a
      00089D AC 82            [24] 2031 	mov	r4,dpl
      00089F AD 83            [24] 2032 	mov	r5,dph
      0008A1 AF F0            [24] 2033 	mov	r7,b
                           0008A3  2034 	C$queue.c$1275$2_0$239 ==.
                                   2035 ;	src/FreeRTOS/queue.c:1275: BaseType_t xEntryTimeSet = pdFALSE;
      0008A3 E5*00            [12] 2036 	mov	a,_bp
      0008A5 24 05            [12] 2037 	add	a,#0x05
      0008A7 F8               [12] 2038 	mov	r0,a
      0008A8 76 00            [12] 2039 	mov	@r0,#0x00
                           0008AA  2040 	C$queue.c$1277$2_0$239 ==.
                                   2041 ;	src/FreeRTOS/queue.c:1277: Queue_t * const pxQueue = xQueue;
      0008AA E5*00            [12] 2042 	mov	a,_bp
      0008AC 24 09            [12] 2043 	add	a,#0x09
      0008AE F8               [12] 2044 	mov	r0,a
      0008AF A6 04            [24] 2045 	mov	@r0,ar4
      0008B1 08               [12] 2046 	inc	r0
      0008B2 A6 05            [24] 2047 	mov	@r0,ar5
      0008B4 08               [12] 2048 	inc	r0
      0008B5 A6 07            [24] 2049 	mov	@r0,ar7
                           0008B7  2050 	C$queue.c$1284$6_0$250 ==.
                                   2051 ;	src/FreeRTOS/queue.c:1284: configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
      0008B7 E5*00            [12] 2052 	mov	a,_bp
      0008B9 24 06            [12] 2053 	add	a,#0x06
      0008BB FE               [12] 2054 	mov	r6,a
      0008BC E5*00            [12] 2055 	mov	a,_bp
      0008BE 24 04            [12] 2056 	add	a,#0x04
      0008C0 F8               [12] 2057 	mov	r0,a
      0008C1 A6 06            [24] 2058 	mov	@r0,ar6
      0008C3 A8*00            [24] 2059 	mov	r0,_bp
      0008C5 08               [12] 2060 	inc	r0
      0008C6 74 24            [12] 2061 	mov	a,#0x24
      0008C8 2C               [12] 2062 	add	a,r4
      0008C9 F6               [12] 2063 	mov	@r0,a
      0008CA E4               [12] 2064 	clr	a
      0008CB 3D               [12] 2065 	addc	a,r5
      0008CC 08               [12] 2066 	inc	r0
      0008CD F6               [12] 2067 	mov	@r0,a
      0008CE 08               [12] 2068 	inc	r0
      0008CF A6 07            [24] 2069 	mov	@r0,ar7
      0008D1                       2070 00128$:
                           0008D1  2071 	C$queue.c$1299$3_0$241 ==.
                                   2072 ;	src/FreeRTOS/queue.c:1299: taskENTER_CRITICAL();
      0008D1 C0 E0            [24] 2073 	push ACC 
      0008D3 C0 A8            [24] 2074 	push IE 
                                   2075 ;	assignBit
      0008D5 C2 AF            [12] 2076 	clr	_EA
                           0008D7  2077 	C$queue.c$1301$4_0$242 ==.
                                   2078 ;	src/FreeRTOS/queue.c:1301: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      0008D7 A8*00            [24] 2079 	mov	r0,_bp
      0008D9 08               [12] 2080 	inc	r0
      0008DA 86 82            [24] 2081 	mov	dpl,@r0
      0008DC 08               [12] 2082 	inc	r0
      0008DD 86 83            [24] 2083 	mov	dph,@r0
      0008DF 08               [12] 2084 	inc	r0
      0008E0 86 F0            [24] 2085 	mov	b,@r0
      0008E2 12r00r00         [24] 2086 	lcall	__gptrget
                           0008E5  2087 	C$queue.c$1305$4_0$242 ==.
                                   2088 ;	src/FreeRTOS/queue.c:1305: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
      0008E5 FC               [12] 2089 	mov	r4,a
      0008E6 FD               [12] 2090 	mov	r5,a
      0008E7 70 03            [24] 2091 	jnz	00182$
      0008E9 02r09r7E         [24] 2092 	ljmp	00111$
      0008EC                       2093 00182$:
                           0008EC  2094 	C$queue.c$1308$5_0$243 ==.
                                   2095 ;	src/FreeRTOS/queue.c:1308: prvCopyDataFromQueue( pxQueue, pvBuffer );
      0008EC C0 05            [24] 2096 	push	ar5
      0008EE E5*00            [12] 2097 	mov	a,_bp
      0008F0 24 FB            [12] 2098 	add	a,#0xfb
      0008F2 F8               [12] 2099 	mov	r0,a
      0008F3 E6               [12] 2100 	mov	a,@r0
      0008F4 C0 E0            [24] 2101 	push	acc
      0008F6 08               [12] 2102 	inc	r0
      0008F7 E6               [12] 2103 	mov	a,@r0
      0008F8 C0 E0            [24] 2104 	push	acc
      0008FA 08               [12] 2105 	inc	r0
      0008FB E6               [12] 2106 	mov	a,@r0
      0008FC C0 E0            [24] 2107 	push	acc
      0008FE E5*00            [12] 2108 	mov	a,_bp
      000900 24 09            [12] 2109 	add	a,#0x09
      000902 F8               [12] 2110 	mov	r0,a
      000903 86 82            [24] 2111 	mov	dpl,@r0
      000905 08               [12] 2112 	inc	r0
      000906 86 83            [24] 2113 	mov	dph,@r0
      000908 08               [12] 2114 	inc	r0
      000909 86 F0            [24] 2115 	mov	b,@r0
      00090B 12r15rCE         [24] 2116 	lcall	_prvCopyDataFromQueue
      00090E 15 81            [12] 2117 	dec	sp
      000910 15 81            [12] 2118 	dec	sp
      000912 15 81            [12] 2119 	dec	sp
      000914 D0 05            [24] 2120 	pop	ar5
                           000916  2121 	C$queue.c$1310$5_0$243 ==.
                                   2122 ;	src/FreeRTOS/queue.c:1310: pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
      000916 E5*00            [12] 2123 	mov	a,_bp
      000918 24 09            [12] 2124 	add	a,#0x09
      00091A F8               [12] 2125 	mov	r0,a
      00091B 74 24            [12] 2126 	mov	a,#0x24
      00091D 26               [12] 2127 	add	a,@r0
      00091E FB               [12] 2128 	mov	r3,a
      00091F E4               [12] 2129 	clr	a
      000920 08               [12] 2130 	inc	r0
      000921 36               [12] 2131 	addc	a,@r0
      000922 FC               [12] 2132 	mov	r4,a
      000923 08               [12] 2133 	inc	r0
      000924 86 07            [24] 2134 	mov	ar7,@r0
      000926 ED               [12] 2135 	mov	a,r5
      000927 14               [12] 2136 	dec	a
      000928 FA               [12] 2137 	mov	r2,a
      000929 8B 82            [24] 2138 	mov	dpl,r3
      00092B 8C 83            [24] 2139 	mov	dph,r4
      00092D 8F F0            [24] 2140 	mov	b,r7
      00092F 12r00r00         [24] 2141 	lcall	__gptrput
                           000932  2142 	C$queue.c$1315$5_0$243 ==.
                                   2143 ;	src/FreeRTOS/queue.c:1315: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      000932 E5*00            [12] 2144 	mov	a,_bp
      000934 24 09            [12] 2145 	add	a,#0x09
      000936 F8               [12] 2146 	mov	r0,a
      000937 74 0C            [12] 2147 	mov	a,#0x0c
      000939 26               [12] 2148 	add	a,@r0
      00093A FB               [12] 2149 	mov	r3,a
      00093B E4               [12] 2150 	clr	a
      00093C 08               [12] 2151 	inc	r0
      00093D 36               [12] 2152 	addc	a,@r0
      00093E FC               [12] 2153 	mov	r4,a
      00093F 08               [12] 2154 	inc	r0
      000940 86 07            [24] 2155 	mov	ar7,@r0
      000942 8B 82            [24] 2156 	mov	dpl,r3
      000944 8C 83            [24] 2157 	mov	dph,r4
      000946 8F F0            [24] 2158 	mov	b,r7
      000948 12r00r00         [24] 2159 	lcall	__gptrget
      00094B 60 20            [24] 2160 	jz	00104$
                           00094D  2161 	C$queue.c$1317$6_0$244 ==.
                                   2162 ;	src/FreeRTOS/queue.c:1317: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      00094D E5*00            [12] 2163 	mov	a,_bp
      00094F 24 09            [12] 2164 	add	a,#0x09
      000951 F8               [12] 2165 	mov	r0,a
      000952 74 0C            [12] 2166 	mov	a,#0x0c
      000954 26               [12] 2167 	add	a,@r0
      000955 FB               [12] 2168 	mov	r3,a
      000956 E4               [12] 2169 	clr	a
      000957 08               [12] 2170 	inc	r0
      000958 36               [12] 2171 	addc	a,@r0
      000959 FC               [12] 2172 	mov	r4,a
      00095A 08               [12] 2173 	inc	r0
      00095B 86 07            [24] 2174 	mov	ar7,@r0
      00095D 8B 82            [24] 2175 	mov	dpl,r3
      00095F 8C 83            [24] 2176 	mov	dph,r4
      000961 8F F0            [24] 2177 	mov	b,r7
      000963 12r00r00         [24] 2178 	lcall	_xTaskRemoveFromEventList
      000966 E5 82            [12] 2179 	mov	a,dpl
      000968 60 03            [24] 2180 	jz	00104$
                           00096A  2181 	C$queue.c$1319$7_0$245 ==.
                                   2182 ;	src/FreeRTOS/queue.c:1319: queueYIELD_IF_USING_PREEMPTION();
      00096A 12r00r00         [24] 2183 	lcall	_vPortYield
      00096D                       2184 00104$:
                           00096D  2185 	C$queue.c$1331$5_0$243 ==.
                                   2186 ;	src/FreeRTOS/queue.c:1331: taskEXIT_CRITICAL();
      00096D D0 E0            [24] 2187 	pop ACC 
      00096F 53 E0 80         [24] 2188 	anl	_ACC,#0x80
      000972 E5 E0            [12] 2189 	mov	a,_ACC
      000974 42 A8            [12] 2190 	orl	_IE,a
      000976 D0 E0            [24] 2191 	pop ACC 
                           000978  2192 	C$queue.c$1332$5_0$243 ==.
                                   2193 ;	src/FreeRTOS/queue.c:1332: return pdPASS;
      000978 75 82 01         [24] 2194 	mov	dpl,#0x01
      00097B 02r0Br14         [24] 2195 	ljmp	00130$
      00097E                       2196 00111$:
                           00097E  2197 	C$queue.c$1336$5_0$248 ==.
                                   2198 ;	src/FreeRTOS/queue.c:1336: if( xTicksToWait == ( TickType_t ) 0 )
      00097E E5*00            [12] 2199 	mov	a,_bp
      000980 24 F9            [12] 2200 	add	a,#0xf9
      000982 F8               [12] 2201 	mov	r0,a
      000983 E6               [12] 2202 	mov	a,@r0
      000984 08               [12] 2203 	inc	r0
      000985 46               [12] 2204 	orl	a,@r0
      000986 70 11            [24] 2205 	jnz	00108$
                           000988  2206 	C$queue.c$1340$6_0$249 ==.
                                   2207 ;	src/FreeRTOS/queue.c:1340: taskEXIT_CRITICAL();
      000988 D0 E0            [24] 2208 	pop ACC 
      00098A 53 E0 80         [24] 2209 	anl	_ACC,#0x80
      00098D E5 E0            [12] 2210 	mov	a,_ACC
      00098F 42 A8            [12] 2211 	orl	_IE,a
      000991 D0 E0            [24] 2212 	pop ACC 
                           000993  2213 	C$queue.c$1342$6_0$249 ==.
                                   2214 ;	src/FreeRTOS/queue.c:1342: return errQUEUE_EMPTY;
      000993 75 82 00         [24] 2215 	mov	dpl,#0x00
      000996 02r0Br14         [24] 2216 	ljmp	00130$
      000999                       2217 00108$:
                           000999  2218 	C$queue.c$1344$5_0$248 ==.
                                   2219 ;	src/FreeRTOS/queue.c:1344: else if( xEntryTimeSet == pdFALSE )
      000999 E5*00            [12] 2220 	mov	a,_bp
      00099B 24 05            [12] 2221 	add	a,#0x05
      00099D F8               [12] 2222 	mov	r0,a
      00099E E6               [12] 2223 	mov	a,@r0
                           00099F  2224 	C$queue.c$1348$6_0$250 ==.
                                   2225 ;	src/FreeRTOS/queue.c:1348: vTaskInternalSetTimeOutState( &xTimeOut );
      00099F 70 19            [24] 2226 	jnz	00112$
      0009A1 8E 03            [24] 2227 	mov	ar3,r6
      0009A3 FC               [12] 2228 	mov	r4,a
      0009A4 7F 40            [12] 2229 	mov	r7,#0x40
      0009A6 8B 82            [24] 2230 	mov	dpl,r3
      0009A8 8C 83            [24] 2231 	mov	dph,r4
      0009AA 8F F0            [24] 2232 	mov	b,r7
      0009AC C0 06            [24] 2233 	push	ar6
      0009AE 12r00r00         [24] 2234 	lcall	_vTaskInternalSetTimeOutState
      0009B1 D0 06            [24] 2235 	pop	ar6
                           0009B3  2236 	C$queue.c$1349$6_0$250 ==.
                                   2237 ;	src/FreeRTOS/queue.c:1349: xEntryTimeSet = pdTRUE;
      0009B3 E5*00            [12] 2238 	mov	a,_bp
      0009B5 24 05            [12] 2239 	add	a,#0x05
      0009B7 F8               [12] 2240 	mov	r0,a
      0009B8 76 01            [12] 2241 	mov	@r0,#0x01
      0009BA                       2242 00112$:
                           0009BA  2243 	C$queue.c$1358$3_0$241 ==.
                                   2244 ;	src/FreeRTOS/queue.c:1358: taskEXIT_CRITICAL();
      0009BA D0 E0            [24] 2245 	pop ACC 
      0009BC 53 E0 80         [24] 2246 	anl	_ACC,#0x80
      0009BF E5 E0            [12] 2247 	mov	a,_ACC
      0009C1 42 A8            [12] 2248 	orl	_IE,a
      0009C3 D0 E0            [24] 2249 	pop ACC 
                           0009C5  2250 	C$queue.c$1363$3_0$241 ==.
                                   2251 ;	src/FreeRTOS/queue.c:1363: vTaskSuspendAll();
      0009C5 C0 06            [24] 2252 	push	ar6
      0009C7 12r00r00         [24] 2253 	lcall	_vTaskSuspendAll
      0009CA D0 06            [24] 2254 	pop	ar6
                           0009CC  2255 	C$queue.c$1364$3_0$241 ==.
                                   2256 ;	src/FreeRTOS/queue.c:1364: prvLockQueue( pxQueue );
      0009CC C0 E0            [24] 2257 	push ACC 
      0009CE C0 A8            [24] 2258 	push IE 
                                   2259 ;	assignBit
      0009D0 C2 AF            [12] 2260 	clr	_EA
      0009D2 E5*00            [12] 2261 	mov	a,_bp
      0009D4 24 09            [12] 2262 	add	a,#0x09
      0009D6 F8               [12] 2263 	mov	r0,a
      0009D7 74 27            [12] 2264 	mov	a,#0x27
      0009D9 26               [12] 2265 	add	a,@r0
      0009DA FB               [12] 2266 	mov	r3,a
      0009DB E4               [12] 2267 	clr	a
      0009DC 08               [12] 2268 	inc	r0
      0009DD 36               [12] 2269 	addc	a,@r0
      0009DE FC               [12] 2270 	mov	r4,a
      0009DF 08               [12] 2271 	inc	r0
      0009E0 86 07            [24] 2272 	mov	ar7,@r0
      0009E2 8B 82            [24] 2273 	mov	dpl,r3
      0009E4 8C 83            [24] 2274 	mov	dph,r4
      0009E6 8F F0            [24] 2275 	mov	b,r7
      0009E8 12r00r00         [24] 2276 	lcall	__gptrget
      0009EB FA               [12] 2277 	mov	r2,a
      0009EC BA FF 0A         [24] 2278 	cjne	r2,#0xff,00114$
      0009EF 8B 82            [24] 2279 	mov	dpl,r3
      0009F1 8C 83            [24] 2280 	mov	dph,r4
      0009F3 8F F0            [24] 2281 	mov	b,r7
      0009F5 E4               [12] 2282 	clr	a
      0009F6 12r00r00         [24] 2283 	lcall	__gptrput
      0009F9                       2284 00114$:
      0009F9 E5*00            [12] 2285 	mov	a,_bp
      0009FB 24 09            [12] 2286 	add	a,#0x09
      0009FD F8               [12] 2287 	mov	r0,a
      0009FE 74 28            [12] 2288 	mov	a,#0x28
      000A00 26               [12] 2289 	add	a,@r0
      000A01 FB               [12] 2290 	mov	r3,a
      000A02 E4               [12] 2291 	clr	a
      000A03 08               [12] 2292 	inc	r0
      000A04 36               [12] 2293 	addc	a,@r0
      000A05 FC               [12] 2294 	mov	r4,a
      000A06 08               [12] 2295 	inc	r0
      000A07 86 07            [24] 2296 	mov	ar7,@r0
      000A09 8B 82            [24] 2297 	mov	dpl,r3
      000A0B 8C 83            [24] 2298 	mov	dph,r4
      000A0D 8F F0            [24] 2299 	mov	b,r7
      000A0F 12r00r00         [24] 2300 	lcall	__gptrget
      000A12 FA               [12] 2301 	mov	r2,a
      000A13 BA FF 0A         [24] 2302 	cjne	r2,#0xff,00116$
      000A16 8B 82            [24] 2303 	mov	dpl,r3
      000A18 8C 83            [24] 2304 	mov	dph,r4
      000A1A 8F F0            [24] 2305 	mov	b,r7
      000A1C E4               [12] 2306 	clr	a
      000A1D 12r00r00         [24] 2307 	lcall	__gptrput
      000A20                       2308 00116$:
      000A20 C0 06            [24] 2309 	push	ar6
      000A22 D0 E0            [24] 2310 	pop ACC 
      000A24 53 E0 80         [24] 2311 	anl	_ACC,#0x80
      000A27 E5 E0            [12] 2312 	mov	a,_ACC
      000A29 42 A8            [12] 2313 	orl	_IE,a
      000A2B D0 E0            [24] 2314 	pop ACC 
                           000A2D  2315 	C$queue.c$1367$3_0$241 ==.
                                   2316 ;	src/FreeRTOS/queue.c:1367: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      000A2D E5*00            [12] 2317 	mov	a,_bp
      000A2F 24 F9            [12] 2318 	add	a,#0xf9
      000A31 FF               [12] 2319 	mov	r7,a
      000A32 7C 00            [12] 2320 	mov	r4,#0x00
      000A34 7B 40            [12] 2321 	mov	r3,#0x40
      000A36 E5*00            [12] 2322 	mov	a,_bp
      000A38 24 04            [12] 2323 	add	a,#0x04
      000A3A F8               [12] 2324 	mov	r0,a
      000A3B 86 02            [24] 2325 	mov	ar2,@r0
      000A3D 7D 00            [12] 2326 	mov	r5,#0x00
      000A3F 7E 40            [12] 2327 	mov	r6,#0x40
      000A41 C0 06            [24] 2328 	push	ar6
      000A43 C0 07            [24] 2329 	push	ar7
      000A45 C0 04            [24] 2330 	push	ar4
      000A47 C0 03            [24] 2331 	push	ar3
      000A49 8A 82            [24] 2332 	mov	dpl,r2
      000A4B 8D 83            [24] 2333 	mov	dph,r5
      000A4D 8E F0            [24] 2334 	mov	b,r6
      000A4F 12r00r00         [24] 2335 	lcall	_xTaskCheckForTimeOut
      000A52 AF 82            [24] 2336 	mov	r7,dpl
      000A54 15 81            [12] 2337 	dec	sp
      000A56 15 81            [12] 2338 	dec	sp
      000A58 15 81            [12] 2339 	dec	sp
      000A5A D0 06            [24] 2340 	pop	ar6
      000A5C D0 06            [24] 2341 	pop	ar6
      000A5E EF               [12] 2342 	mov	a,r7
      000A5F 60 03            [24] 2343 	jz	00191$
      000A61 02r0ArE3         [24] 2344 	ljmp	00125$
      000A64                       2345 00191$:
                           000A64  2346 	C$queue.c$1371$4_0$255 ==.
                                   2347 ;	src/FreeRTOS/queue.c:1371: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000A64 E5*00            [12] 2348 	mov	a,_bp
      000A66 24 09            [12] 2349 	add	a,#0x09
      000A68 F8               [12] 2350 	mov	r0,a
      000A69 86 82            [24] 2351 	mov	dpl,@r0
      000A6B 08               [12] 2352 	inc	r0
      000A6C 86 83            [24] 2353 	mov	dph,@r0
      000A6E 08               [12] 2354 	inc	r0
      000A6F 86 F0            [24] 2355 	mov	b,@r0
      000A71 C0 06            [24] 2356 	push	ar6
      000A73 12r18r98         [24] 2357 	lcall	_prvIsQueueEmpty
      000A76 E5 82            [12] 2358 	mov	a,dpl
      000A78 D0 06            [24] 2359 	pop	ar6
      000A7A 60 4D            [24] 2360 	jz	00120$
                           000A7C  2361 	C$queue.c$1374$5_0$256 ==.
                                   2362 ;	src/FreeRTOS/queue.c:1374: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      000A7C E5*00            [12] 2363 	mov	a,_bp
      000A7E 24 09            [12] 2364 	add	a,#0x09
      000A80 F8               [12] 2365 	mov	r0,a
      000A81 74 18            [12] 2366 	mov	a,#0x18
      000A83 26               [12] 2367 	add	a,@r0
      000A84 FC               [12] 2368 	mov	r4,a
      000A85 E4               [12] 2369 	clr	a
      000A86 08               [12] 2370 	inc	r0
      000A87 36               [12] 2371 	addc	a,@r0
      000A88 FD               [12] 2372 	mov	r5,a
      000A89 08               [12] 2373 	inc	r0
      000A8A 86 07            [24] 2374 	mov	ar7,@r0
      000A8C C0 06            [24] 2375 	push	ar6
      000A8E E5*00            [12] 2376 	mov	a,_bp
      000A90 24 F9            [12] 2377 	add	a,#0xf9
      000A92 F8               [12] 2378 	mov	r0,a
      000A93 E6               [12] 2379 	mov	a,@r0
      000A94 C0 E0            [24] 2380 	push	acc
      000A96 08               [12] 2381 	inc	r0
      000A97 E6               [12] 2382 	mov	a,@r0
      000A98 C0 E0            [24] 2383 	push	acc
      000A9A 8C 82            [24] 2384 	mov	dpl,r4
      000A9C 8D 83            [24] 2385 	mov	dph,r5
      000A9E 8F F0            [24] 2386 	mov	b,r7
      000AA0 12r00r00         [24] 2387 	lcall	_vTaskPlaceOnEventList
      000AA3 15 81            [12] 2388 	dec	sp
      000AA5 15 81            [12] 2389 	dec	sp
                           000AA7  2390 	C$queue.c$1375$5_0$256 ==.
                                   2391 ;	src/FreeRTOS/queue.c:1375: prvUnlockQueue( pxQueue );
      000AA7 E5*00            [12] 2392 	mov	a,_bp
      000AA9 24 09            [12] 2393 	add	a,#0x09
      000AAB F8               [12] 2394 	mov	r0,a
      000AAC 86 82            [24] 2395 	mov	dpl,@r0
      000AAE 08               [12] 2396 	inc	r0
      000AAF 86 83            [24] 2397 	mov	dph,@r0
      000AB1 08               [12] 2398 	inc	r0
      000AB2 86 F0            [24] 2399 	mov	b,@r0
      000AB4 12r17r1E         [24] 2400 	lcall	_prvUnlockQueue
                           000AB7  2401 	C$queue.c$1376$5_0$256 ==.
                                   2402 ;	src/FreeRTOS/queue.c:1376: if( xTaskResumeAll() == pdFALSE )
      000AB7 12r00r00         [24] 2403 	lcall	_xTaskResumeAll
      000ABA E5 82            [12] 2404 	mov	a,dpl
      000ABC D0 06            [24] 2405 	pop	ar6
      000ABE 60 03            [24] 2406 	jz	00193$
      000AC0 02r08rD1         [24] 2407 	ljmp	00128$
      000AC3                       2408 00193$:
                           000AC3  2409 	C$queue.c$1378$6_0$257 ==.
                                   2410 ;	src/FreeRTOS/queue.c:1378: portYIELD_WITHIN_API();
      000AC3 12r00r00         [24] 2411 	lcall	_vPortYield
      000AC6 02r08rD1         [24] 2412 	ljmp	00128$
      000AC9                       2413 00120$:
                           000AC9  2414 	C$queue.c$1389$5_0$259 ==.
                                   2415 ;	src/FreeRTOS/queue.c:1389: prvUnlockQueue( pxQueue );
      000AC9 E5*00            [12] 2416 	mov	a,_bp
      000ACB 24 09            [12] 2417 	add	a,#0x09
      000ACD F8               [12] 2418 	mov	r0,a
      000ACE 86 82            [24] 2419 	mov	dpl,@r0
      000AD0 08               [12] 2420 	inc	r0
      000AD1 86 83            [24] 2421 	mov	dph,@r0
      000AD3 08               [12] 2422 	inc	r0
      000AD4 86 F0            [24] 2423 	mov	b,@r0
      000AD6 C0 06            [24] 2424 	push	ar6
      000AD8 12r17r1E         [24] 2425 	lcall	_prvUnlockQueue
                           000ADB  2426 	C$queue.c$1390$5_0$259 ==.
                                   2427 ;	src/FreeRTOS/queue.c:1390: ( void ) xTaskResumeAll();
      000ADB 12r00r00         [24] 2428 	lcall	_xTaskResumeAll
      000ADE D0 06            [24] 2429 	pop	ar6
      000AE0 02r08rD1         [24] 2430 	ljmp	00128$
      000AE3                       2431 00125$:
                           000AE3  2432 	C$queue.c$1397$4_0$260 ==.
                                   2433 ;	src/FreeRTOS/queue.c:1397: prvUnlockQueue( pxQueue );
      000AE3 E5*00            [12] 2434 	mov	a,_bp
      000AE5 24 09            [12] 2435 	add	a,#0x09
      000AE7 F8               [12] 2436 	mov	r0,a
      000AE8 86 82            [24] 2437 	mov	dpl,@r0
      000AEA 08               [12] 2438 	inc	r0
      000AEB 86 83            [24] 2439 	mov	dph,@r0
      000AED 08               [12] 2440 	inc	r0
      000AEE 86 F0            [24] 2441 	mov	b,@r0
      000AF0 C0 06            [24] 2442 	push	ar6
      000AF2 12r17r1E         [24] 2443 	lcall	_prvUnlockQueue
                           000AF5  2444 	C$queue.c$1398$4_0$260 ==.
                                   2445 ;	src/FreeRTOS/queue.c:1398: ( void ) xTaskResumeAll();
      000AF5 12r00r00         [24] 2446 	lcall	_xTaskResumeAll
                           000AF8  2447 	C$queue.c$1400$4_0$260 ==.
                                   2448 ;	src/FreeRTOS/queue.c:1400: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000AF8 E5*00            [12] 2449 	mov	a,_bp
      000AFA 24 09            [12] 2450 	add	a,#0x09
      000AFC F8               [12] 2451 	mov	r0,a
      000AFD 86 82            [24] 2452 	mov	dpl,@r0
      000AFF 08               [12] 2453 	inc	r0
      000B00 86 83            [24] 2454 	mov	dph,@r0
      000B02 08               [12] 2455 	inc	r0
      000B03 86 F0            [24] 2456 	mov	b,@r0
      000B05 12r18r98         [24] 2457 	lcall	_prvIsQueueEmpty
      000B08 E5 82            [12] 2458 	mov	a,dpl
      000B0A D0 06            [24] 2459 	pop	ar6
      000B0C 70 03            [24] 2460 	jnz	00194$
      000B0E 02r08rD1         [24] 2461 	ljmp	00128$
      000B11                       2462 00194$:
                           000B11  2463 	C$queue.c$1403$5_0$261 ==.
                                   2464 ;	src/FreeRTOS/queue.c:1403: return errQUEUE_EMPTY;
      000B11 75 82 00         [24] 2465 	mov	dpl,#0x00
      000B14                       2466 00130$:
                           000B14  2467 	C$queue.c$1411$2_0$239 ==.
                                   2468 ;	src/FreeRTOS/queue.c:1411: }
      000B14 85*00 81         [24] 2469 	mov	sp,_bp
      000B17 D0*00            [24] 2470 	pop	_bp
                           000B19  2471 	C$queue.c$1411$2_0$239 ==.
                           000B19  2472 	XG$xQueueReceive$0$0 ==.
      000B19 22               [24] 2473 	ret
                                   2474 ;------------------------------------------------------------
                                   2475 ;Allocation info for local variables in function 'xQueueSemaphoreTake'
                                   2476 ;------------------------------------------------------------
                                   2477 ;xTicksToWait              Allocated to stack - _bp -4
                                   2478 ;xQueue                    Allocated to registers r4 r5 r7 
                                   2479 ;xEntryTimeSet             Allocated to stack - _bp +11
                                   2480 ;xTimeOut                  Allocated to stack - _bp +5
                                   2481 ;pxQueue                   Allocated to stack - _bp +8
                                   2482 ;uxSemaphoreCount          Allocated to registers r7 
                                   2483 ;sloc0                     Allocated to stack - _bp +1
                                   2484 ;sloc1                     Allocated to stack - _bp +15
                                   2485 ;sloc2                     Allocated to stack - _bp +4
                                   2486 ;------------------------------------------------------------
                           000B1A  2487 	G$xQueueSemaphoreTake$0$0 ==.
                           000B1A  2488 	C$queue.c$1414$2_0$264 ==.
                                   2489 ;	src/FreeRTOS/queue.c:1414: BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
                                   2490 ;	-----------------------------------------
                                   2491 ;	 function xQueueSemaphoreTake
                                   2492 ;	-----------------------------------------
      000B1A                       2493 _xQueueSemaphoreTake:
      000B1A C0*00            [24] 2494 	push	_bp
      000B1C E5 81            [12] 2495 	mov	a,sp
      000B1E F5*00            [12] 2496 	mov	_bp,a
      000B20 24 0B            [12] 2497 	add	a,#0x0b
      000B22 F5 81            [12] 2498 	mov	sp,a
      000B24 AC 82            [24] 2499 	mov	r4,dpl
      000B26 AD 83            [24] 2500 	mov	r5,dph
      000B28 AF F0            [24] 2501 	mov	r7,b
                           000B2A  2502 	C$queue.c$1416$2_0$264 ==.
                                   2503 ;	src/FreeRTOS/queue.c:1416: BaseType_t xEntryTimeSet = pdFALSE;
      000B2A E5*00            [12] 2504 	mov	a,_bp
      000B2C 24 0B            [12] 2505 	add	a,#0x0b
      000B2E F8               [12] 2506 	mov	r0,a
      000B2F 76 00            [12] 2507 	mov	@r0,#0x00
                           000B31  2508 	C$queue.c$1418$2_0$264 ==.
                                   2509 ;	src/FreeRTOS/queue.c:1418: Queue_t * const pxQueue = xQueue;
      000B31 E5*00            [12] 2510 	mov	a,_bp
      000B33 24 08            [12] 2511 	add	a,#0x08
      000B35 F8               [12] 2512 	mov	r0,a
      000B36 A6 04            [24] 2513 	mov	@r0,ar4
      000B38 08               [12] 2514 	inc	r0
      000B39 A6 05            [24] 2515 	mov	@r0,ar5
      000B3B 08               [12] 2516 	inc	r0
      000B3C A6 07            [24] 2517 	mov	@r0,ar7
                           000B3E  2518 	C$queue.c$1429$6_0$275 ==.
                                   2519 ;	src/FreeRTOS/queue.c:1429: configASSERT( pxQueue->uxItemSize == 0 );
      000B3E E5*00            [12] 2520 	mov	a,_bp
      000B40 24 05            [12] 2521 	add	a,#0x05
      000B42 FE               [12] 2522 	mov	r6,a
      000B43 E5*00            [12] 2523 	mov	a,_bp
      000B45 24 04            [12] 2524 	add	a,#0x04
      000B47 F8               [12] 2525 	mov	r0,a
      000B48 A6 06            [24] 2526 	mov	@r0,ar6
      000B4A A8*00            [24] 2527 	mov	r0,_bp
      000B4C 08               [12] 2528 	inc	r0
      000B4D 74 24            [12] 2529 	mov	a,#0x24
      000B4F 2C               [12] 2530 	add	a,r4
      000B50 F6               [12] 2531 	mov	@r0,a
      000B51 E4               [12] 2532 	clr	a
      000B52 3D               [12] 2533 	addc	a,r5
      000B53 08               [12] 2534 	inc	r0
      000B54 F6               [12] 2535 	mov	@r0,a
      000B55 08               [12] 2536 	inc	r0
      000B56 A6 07            [24] 2537 	mov	@r0,ar7
      000B58                       2538 00128$:
                           000B58  2539 	C$queue.c$1444$3_0$266 ==.
                                   2540 ;	src/FreeRTOS/queue.c:1444: taskENTER_CRITICAL();
      000B58 C0 E0            [24] 2541 	push ACC 
      000B5A C0 A8            [24] 2542 	push IE 
                                   2543 ;	assignBit
      000B5C C2 AF            [12] 2544 	clr	_EA
                           000B5E  2545 	C$queue.c$1448$4_0$267 ==.
                                   2546 ;	src/FreeRTOS/queue.c:1448: const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
      000B5E A8*00            [24] 2547 	mov	r0,_bp
      000B60 08               [12] 2548 	inc	r0
      000B61 86 82            [24] 2549 	mov	dpl,@r0
      000B63 08               [12] 2550 	inc	r0
      000B64 86 83            [24] 2551 	mov	dph,@r0
      000B66 08               [12] 2552 	inc	r0
      000B67 86 F0            [24] 2553 	mov	b,@r0
      000B69 12r00r00         [24] 2554 	lcall	__gptrget
                           000B6C  2555 	C$queue.c$1452$4_0$267 ==.
                                   2556 ;	src/FreeRTOS/queue.c:1452: if( uxSemaphoreCount > ( UBaseType_t ) 0 )
      000B6C FC               [12] 2557 	mov	r4,a
      000B6D FF               [12] 2558 	mov	r7,a
      000B6E 60 5E            [24] 2559 	jz	00111$
                           000B70  2560 	C$queue.c$1458$5_0$268 ==.
                                   2561 ;	src/FreeRTOS/queue.c:1458: pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
      000B70 EF               [12] 2562 	mov	a,r7
      000B71 14               [12] 2563 	dec	a
      000B72 FC               [12] 2564 	mov	r4,a
      000B73 A8*00            [24] 2565 	mov	r0,_bp
      000B75 08               [12] 2566 	inc	r0
      000B76 86 82            [24] 2567 	mov	dpl,@r0
      000B78 08               [12] 2568 	inc	r0
      000B79 86 83            [24] 2569 	mov	dph,@r0
      000B7B 08               [12] 2570 	inc	r0
      000B7C 86 F0            [24] 2571 	mov	b,@r0
      000B7E EC               [12] 2572 	mov	a,r4
      000B7F 12r00r00         [24] 2573 	lcall	__gptrput
                           000B82  2574 	C$queue.c$1477$5_0$268 ==.
                                   2575 ;	src/FreeRTOS/queue.c:1477: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      000B82 E5*00            [12] 2576 	mov	a,_bp
      000B84 24 08            [12] 2577 	add	a,#0x08
      000B86 F8               [12] 2578 	mov	r0,a
      000B87 74 0C            [12] 2579 	mov	a,#0x0c
      000B89 26               [12] 2580 	add	a,@r0
      000B8A FB               [12] 2581 	mov	r3,a
      000B8B E4               [12] 2582 	clr	a
      000B8C 08               [12] 2583 	inc	r0
      000B8D 36               [12] 2584 	addc	a,@r0
      000B8E FC               [12] 2585 	mov	r4,a
      000B8F 08               [12] 2586 	inc	r0
      000B90 86 07            [24] 2587 	mov	ar7,@r0
      000B92 8B 82            [24] 2588 	mov	dpl,r3
      000B94 8C 83            [24] 2589 	mov	dph,r4
      000B96 8F F0            [24] 2590 	mov	b,r7
      000B98 12r00r00         [24] 2591 	lcall	__gptrget
      000B9B 60 20            [24] 2592 	jz	00104$
                           000B9D  2593 	C$queue.c$1479$6_0$269 ==.
                                   2594 ;	src/FreeRTOS/queue.c:1479: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      000B9D E5*00            [12] 2595 	mov	a,_bp
      000B9F 24 08            [12] 2596 	add	a,#0x08
      000BA1 F8               [12] 2597 	mov	r0,a
      000BA2 74 0C            [12] 2598 	mov	a,#0x0c
      000BA4 26               [12] 2599 	add	a,@r0
      000BA5 FB               [12] 2600 	mov	r3,a
      000BA6 E4               [12] 2601 	clr	a
      000BA7 08               [12] 2602 	inc	r0
      000BA8 36               [12] 2603 	addc	a,@r0
      000BA9 FC               [12] 2604 	mov	r4,a
      000BAA 08               [12] 2605 	inc	r0
      000BAB 86 07            [24] 2606 	mov	ar7,@r0
      000BAD 8B 82            [24] 2607 	mov	dpl,r3
      000BAF 8C 83            [24] 2608 	mov	dph,r4
      000BB1 8F F0            [24] 2609 	mov	b,r7
      000BB3 12r00r00         [24] 2610 	lcall	_xTaskRemoveFromEventList
      000BB6 E5 82            [12] 2611 	mov	a,dpl
      000BB8 60 03            [24] 2612 	jz	00104$
                           000BBA  2613 	C$queue.c$1481$7_0$270 ==.
                                   2614 ;	src/FreeRTOS/queue.c:1481: queueYIELD_IF_USING_PREEMPTION();
      000BBA 12r00r00         [24] 2615 	lcall	_vPortYield
      000BBD                       2616 00104$:
                           000BBD  2617 	C$queue.c$1493$5_0$268 ==.
                                   2618 ;	src/FreeRTOS/queue.c:1493: taskEXIT_CRITICAL();
      000BBD D0 E0            [24] 2619 	pop ACC 
      000BBF 53 E0 80         [24] 2620 	anl	_ACC,#0x80
      000BC2 E5 E0            [12] 2621 	mov	a,_ACC
      000BC4 42 A8            [12] 2622 	orl	_IE,a
      000BC6 D0 E0            [24] 2623 	pop ACC 
                           000BC8  2624 	C$queue.c$1494$5_0$268 ==.
                                   2625 ;	src/FreeRTOS/queue.c:1494: return pdPASS;
      000BC8 75 82 01         [24] 2626 	mov	dpl,#0x01
      000BCB 02r0Dr64         [24] 2627 	ljmp	00130$
      000BCE                       2628 00111$:
                           000BCE  2629 	C$queue.c$1498$5_0$273 ==.
                                   2630 ;	src/FreeRTOS/queue.c:1498: if( xTicksToWait == ( TickType_t ) 0 )
      000BCE E5*00            [12] 2631 	mov	a,_bp
      000BD0 24 FC            [12] 2632 	add	a,#0xfc
      000BD2 F8               [12] 2633 	mov	r0,a
      000BD3 E6               [12] 2634 	mov	a,@r0
      000BD4 08               [12] 2635 	inc	r0
      000BD5 46               [12] 2636 	orl	a,@r0
      000BD6 70 11            [24] 2637 	jnz	00108$
                           000BD8  2638 	C$queue.c$1511$6_0$274 ==.
                                   2639 ;	src/FreeRTOS/queue.c:1511: taskEXIT_CRITICAL();
      000BD8 D0 E0            [24] 2640 	pop ACC 
      000BDA 53 E0 80         [24] 2641 	anl	_ACC,#0x80
      000BDD E5 E0            [12] 2642 	mov	a,_ACC
      000BDF 42 A8            [12] 2643 	orl	_IE,a
      000BE1 D0 E0            [24] 2644 	pop ACC 
                           000BE3  2645 	C$queue.c$1513$6_0$274 ==.
                                   2646 ;	src/FreeRTOS/queue.c:1513: return errQUEUE_EMPTY;
      000BE3 75 82 00         [24] 2647 	mov	dpl,#0x00
      000BE6 02r0Dr64         [24] 2648 	ljmp	00130$
      000BE9                       2649 00108$:
                           000BE9  2650 	C$queue.c$1515$5_0$273 ==.
                                   2651 ;	src/FreeRTOS/queue.c:1515: else if( xEntryTimeSet == pdFALSE )
      000BE9 E5*00            [12] 2652 	mov	a,_bp
      000BEB 24 0B            [12] 2653 	add	a,#0x0b
      000BED F8               [12] 2654 	mov	r0,a
      000BEE E6               [12] 2655 	mov	a,@r0
                           000BEF  2656 	C$queue.c$1519$6_0$275 ==.
                                   2657 ;	src/FreeRTOS/queue.c:1519: vTaskInternalSetTimeOutState( &xTimeOut );
      000BEF 70 19            [24] 2658 	jnz	00112$
      000BF1 8E 03            [24] 2659 	mov	ar3,r6
      000BF3 FC               [12] 2660 	mov	r4,a
      000BF4 7F 40            [12] 2661 	mov	r7,#0x40
      000BF6 8B 82            [24] 2662 	mov	dpl,r3
      000BF8 8C 83            [24] 2663 	mov	dph,r4
      000BFA 8F F0            [24] 2664 	mov	b,r7
      000BFC C0 06            [24] 2665 	push	ar6
      000BFE 12r00r00         [24] 2666 	lcall	_vTaskInternalSetTimeOutState
      000C01 D0 06            [24] 2667 	pop	ar6
                           000C03  2668 	C$queue.c$1520$6_0$275 ==.
                                   2669 ;	src/FreeRTOS/queue.c:1520: xEntryTimeSet = pdTRUE;
      000C03 E5*00            [12] 2670 	mov	a,_bp
      000C05 24 0B            [12] 2671 	add	a,#0x0b
      000C07 F8               [12] 2672 	mov	r0,a
      000C08 76 01            [12] 2673 	mov	@r0,#0x01
      000C0A                       2674 00112$:
                           000C0A  2675 	C$queue.c$1529$3_0$266 ==.
                                   2676 ;	src/FreeRTOS/queue.c:1529: taskEXIT_CRITICAL();
      000C0A D0 E0            [24] 2677 	pop ACC 
      000C0C 53 E0 80         [24] 2678 	anl	_ACC,#0x80
      000C0F E5 E0            [12] 2679 	mov	a,_ACC
      000C11 42 A8            [12] 2680 	orl	_IE,a
      000C13 D0 E0            [24] 2681 	pop ACC 
                           000C15  2682 	C$queue.c$1534$3_0$266 ==.
                                   2683 ;	src/FreeRTOS/queue.c:1534: vTaskSuspendAll();
      000C15 C0 06            [24] 2684 	push	ar6
      000C17 12r00r00         [24] 2685 	lcall	_vTaskSuspendAll
      000C1A D0 06            [24] 2686 	pop	ar6
                           000C1C  2687 	C$queue.c$1535$3_0$266 ==.
                                   2688 ;	src/FreeRTOS/queue.c:1535: prvLockQueue( pxQueue );
      000C1C C0 E0            [24] 2689 	push ACC 
      000C1E C0 A8            [24] 2690 	push IE 
                                   2691 ;	assignBit
      000C20 C2 AF            [12] 2692 	clr	_EA
      000C22 E5*00            [12] 2693 	mov	a,_bp
      000C24 24 08            [12] 2694 	add	a,#0x08
      000C26 F8               [12] 2695 	mov	r0,a
      000C27 74 27            [12] 2696 	mov	a,#0x27
      000C29 26               [12] 2697 	add	a,@r0
      000C2A FB               [12] 2698 	mov	r3,a
      000C2B E4               [12] 2699 	clr	a
      000C2C 08               [12] 2700 	inc	r0
      000C2D 36               [12] 2701 	addc	a,@r0
      000C2E FC               [12] 2702 	mov	r4,a
      000C2F 08               [12] 2703 	inc	r0
      000C30 86 07            [24] 2704 	mov	ar7,@r0
      000C32 8B 82            [24] 2705 	mov	dpl,r3
      000C34 8C 83            [24] 2706 	mov	dph,r4
      000C36 8F F0            [24] 2707 	mov	b,r7
      000C38 12r00r00         [24] 2708 	lcall	__gptrget
      000C3B FA               [12] 2709 	mov	r2,a
      000C3C BA FF 0A         [24] 2710 	cjne	r2,#0xff,00114$
      000C3F 8B 82            [24] 2711 	mov	dpl,r3
      000C41 8C 83            [24] 2712 	mov	dph,r4
      000C43 8F F0            [24] 2713 	mov	b,r7
      000C45 E4               [12] 2714 	clr	a
      000C46 12r00r00         [24] 2715 	lcall	__gptrput
      000C49                       2716 00114$:
      000C49 E5*00            [12] 2717 	mov	a,_bp
      000C4B 24 08            [12] 2718 	add	a,#0x08
      000C4D F8               [12] 2719 	mov	r0,a
      000C4E 74 28            [12] 2720 	mov	a,#0x28
      000C50 26               [12] 2721 	add	a,@r0
      000C51 FB               [12] 2722 	mov	r3,a
      000C52 E4               [12] 2723 	clr	a
      000C53 08               [12] 2724 	inc	r0
      000C54 36               [12] 2725 	addc	a,@r0
      000C55 FC               [12] 2726 	mov	r4,a
      000C56 08               [12] 2727 	inc	r0
      000C57 86 07            [24] 2728 	mov	ar7,@r0
      000C59 8B 82            [24] 2729 	mov	dpl,r3
      000C5B 8C 83            [24] 2730 	mov	dph,r4
      000C5D 8F F0            [24] 2731 	mov	b,r7
      000C5F 12r00r00         [24] 2732 	lcall	__gptrget
      000C62 FA               [12] 2733 	mov	r2,a
      000C63 BA FF 0A         [24] 2734 	cjne	r2,#0xff,00116$
      000C66 8B 82            [24] 2735 	mov	dpl,r3
      000C68 8C 83            [24] 2736 	mov	dph,r4
      000C6A 8F F0            [24] 2737 	mov	b,r7
      000C6C E4               [12] 2738 	clr	a
      000C6D 12r00r00         [24] 2739 	lcall	__gptrput
      000C70                       2740 00116$:
      000C70 C0 06            [24] 2741 	push	ar6
      000C72 D0 E0            [24] 2742 	pop ACC 
      000C74 53 E0 80         [24] 2743 	anl	_ACC,#0x80
      000C77 E5 E0            [12] 2744 	mov	a,_ACC
      000C79 42 A8            [12] 2745 	orl	_IE,a
      000C7B D0 E0            [24] 2746 	pop ACC 
                           000C7D  2747 	C$queue.c$1538$3_0$266 ==.
                                   2748 ;	src/FreeRTOS/queue.c:1538: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      000C7D E5*00            [12] 2749 	mov	a,_bp
      000C7F 24 FC            [12] 2750 	add	a,#0xfc
      000C81 FF               [12] 2751 	mov	r7,a
      000C82 7C 00            [12] 2752 	mov	r4,#0x00
      000C84 7B 40            [12] 2753 	mov	r3,#0x40
      000C86 E5*00            [12] 2754 	mov	a,_bp
      000C88 24 04            [12] 2755 	add	a,#0x04
      000C8A F8               [12] 2756 	mov	r0,a
      000C8B 86 02            [24] 2757 	mov	ar2,@r0
      000C8D 7D 00            [12] 2758 	mov	r5,#0x00
      000C8F 7E 40            [12] 2759 	mov	r6,#0x40
      000C91 C0 06            [24] 2760 	push	ar6
      000C93 C0 07            [24] 2761 	push	ar7
      000C95 C0 04            [24] 2762 	push	ar4
      000C97 C0 03            [24] 2763 	push	ar3
      000C99 8A 82            [24] 2764 	mov	dpl,r2
      000C9B 8D 83            [24] 2765 	mov	dph,r5
      000C9D 8E F0            [24] 2766 	mov	b,r6
      000C9F 12r00r00         [24] 2767 	lcall	_xTaskCheckForTimeOut
      000CA2 AF 82            [24] 2768 	mov	r7,dpl
      000CA4 15 81            [12] 2769 	dec	sp
      000CA6 15 81            [12] 2770 	dec	sp
      000CA8 15 81            [12] 2771 	dec	sp
      000CAA D0 06            [24] 2772 	pop	ar6
      000CAC D0 06            [24] 2773 	pop	ar6
      000CAE EF               [12] 2774 	mov	a,r7
      000CAF 60 03            [24] 2775 	jz	00191$
      000CB1 02r0Dr33         [24] 2776 	ljmp	00125$
      000CB4                       2777 00191$:
                           000CB4  2778 	C$queue.c$1544$4_0$280 ==.
                                   2779 ;	src/FreeRTOS/queue.c:1544: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000CB4 E5*00            [12] 2780 	mov	a,_bp
      000CB6 24 08            [12] 2781 	add	a,#0x08
      000CB8 F8               [12] 2782 	mov	r0,a
      000CB9 86 82            [24] 2783 	mov	dpl,@r0
      000CBB 08               [12] 2784 	inc	r0
      000CBC 86 83            [24] 2785 	mov	dph,@r0
      000CBE 08               [12] 2786 	inc	r0
      000CBF 86 F0            [24] 2787 	mov	b,@r0
      000CC1 C0 06            [24] 2788 	push	ar6
      000CC3 12r18r98         [24] 2789 	lcall	_prvIsQueueEmpty
      000CC6 E5 82            [12] 2790 	mov	a,dpl
      000CC8 D0 06            [24] 2791 	pop	ar6
      000CCA 60 4D            [24] 2792 	jz	00120$
                           000CCC  2793 	C$queue.c$1565$5_0$281 ==.
                                   2794 ;	src/FreeRTOS/queue.c:1565: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      000CCC E5*00            [12] 2795 	mov	a,_bp
      000CCE 24 08            [12] 2796 	add	a,#0x08
      000CD0 F8               [12] 2797 	mov	r0,a
      000CD1 74 18            [12] 2798 	mov	a,#0x18
      000CD3 26               [12] 2799 	add	a,@r0
      000CD4 FC               [12] 2800 	mov	r4,a
      000CD5 E4               [12] 2801 	clr	a
      000CD6 08               [12] 2802 	inc	r0
      000CD7 36               [12] 2803 	addc	a,@r0
      000CD8 FD               [12] 2804 	mov	r5,a
      000CD9 08               [12] 2805 	inc	r0
      000CDA 86 07            [24] 2806 	mov	ar7,@r0
      000CDC C0 06            [24] 2807 	push	ar6
      000CDE E5*00            [12] 2808 	mov	a,_bp
      000CE0 24 FC            [12] 2809 	add	a,#0xfc
      000CE2 F8               [12] 2810 	mov	r0,a
      000CE3 E6               [12] 2811 	mov	a,@r0
      000CE4 C0 E0            [24] 2812 	push	acc
      000CE6 08               [12] 2813 	inc	r0
      000CE7 E6               [12] 2814 	mov	a,@r0
      000CE8 C0 E0            [24] 2815 	push	acc
      000CEA 8C 82            [24] 2816 	mov	dpl,r4
      000CEC 8D 83            [24] 2817 	mov	dph,r5
      000CEE 8F F0            [24] 2818 	mov	b,r7
      000CF0 12r00r00         [24] 2819 	lcall	_vTaskPlaceOnEventList
      000CF3 15 81            [12] 2820 	dec	sp
      000CF5 15 81            [12] 2821 	dec	sp
                           000CF7  2822 	C$queue.c$1566$5_0$281 ==.
                                   2823 ;	src/FreeRTOS/queue.c:1566: prvUnlockQueue( pxQueue );
      000CF7 E5*00            [12] 2824 	mov	a,_bp
      000CF9 24 08            [12] 2825 	add	a,#0x08
      000CFB F8               [12] 2826 	mov	r0,a
      000CFC 86 82            [24] 2827 	mov	dpl,@r0
      000CFE 08               [12] 2828 	inc	r0
      000CFF 86 83            [24] 2829 	mov	dph,@r0
      000D01 08               [12] 2830 	inc	r0
      000D02 86 F0            [24] 2831 	mov	b,@r0
      000D04 12r17r1E         [24] 2832 	lcall	_prvUnlockQueue
                           000D07  2833 	C$queue.c$1567$5_0$281 ==.
                                   2834 ;	src/FreeRTOS/queue.c:1567: if( xTaskResumeAll() == pdFALSE )
      000D07 12r00r00         [24] 2835 	lcall	_xTaskResumeAll
      000D0A E5 82            [12] 2836 	mov	a,dpl
      000D0C D0 06            [24] 2837 	pop	ar6
      000D0E 60 03            [24] 2838 	jz	00193$
      000D10 02r0Br58         [24] 2839 	ljmp	00128$
      000D13                       2840 00193$:
                           000D13  2841 	C$queue.c$1569$6_0$282 ==.
                                   2842 ;	src/FreeRTOS/queue.c:1569: portYIELD_WITHIN_API();
      000D13 12r00r00         [24] 2843 	lcall	_vPortYield
      000D16 02r0Br58         [24] 2844 	ljmp	00128$
      000D19                       2845 00120$:
                           000D19  2846 	C$queue.c$1580$5_0$284 ==.
                                   2847 ;	src/FreeRTOS/queue.c:1580: prvUnlockQueue( pxQueue );
      000D19 E5*00            [12] 2848 	mov	a,_bp
      000D1B 24 08            [12] 2849 	add	a,#0x08
      000D1D F8               [12] 2850 	mov	r0,a
      000D1E 86 82            [24] 2851 	mov	dpl,@r0
      000D20 08               [12] 2852 	inc	r0
      000D21 86 83            [24] 2853 	mov	dph,@r0
      000D23 08               [12] 2854 	inc	r0
      000D24 86 F0            [24] 2855 	mov	b,@r0
      000D26 C0 06            [24] 2856 	push	ar6
      000D28 12r17r1E         [24] 2857 	lcall	_prvUnlockQueue
                           000D2B  2858 	C$queue.c$1581$5_0$284 ==.
                                   2859 ;	src/FreeRTOS/queue.c:1581: ( void ) xTaskResumeAll();
      000D2B 12r00r00         [24] 2860 	lcall	_xTaskResumeAll
      000D2E D0 06            [24] 2861 	pop	ar6
      000D30 02r0Br58         [24] 2862 	ljmp	00128$
      000D33                       2863 00125$:
                           000D33  2864 	C$queue.c$1587$4_0$285 ==.
                                   2865 ;	src/FreeRTOS/queue.c:1587: prvUnlockQueue( pxQueue );
      000D33 E5*00            [12] 2866 	mov	a,_bp
      000D35 24 08            [12] 2867 	add	a,#0x08
      000D37 F8               [12] 2868 	mov	r0,a
      000D38 86 82            [24] 2869 	mov	dpl,@r0
      000D3A 08               [12] 2870 	inc	r0
      000D3B 86 83            [24] 2871 	mov	dph,@r0
      000D3D 08               [12] 2872 	inc	r0
      000D3E 86 F0            [24] 2873 	mov	b,@r0
      000D40 C0 06            [24] 2874 	push	ar6
      000D42 12r17r1E         [24] 2875 	lcall	_prvUnlockQueue
                           000D45  2876 	C$queue.c$1588$4_0$285 ==.
                                   2877 ;	src/FreeRTOS/queue.c:1588: ( void ) xTaskResumeAll();
      000D45 12r00r00         [24] 2878 	lcall	_xTaskResumeAll
                           000D48  2879 	C$queue.c$1594$4_0$285 ==.
                                   2880 ;	src/FreeRTOS/queue.c:1594: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000D48 E5*00            [12] 2881 	mov	a,_bp
      000D4A 24 08            [12] 2882 	add	a,#0x08
      000D4C F8               [12] 2883 	mov	r0,a
      000D4D 86 82            [24] 2884 	mov	dpl,@r0
      000D4F 08               [12] 2885 	inc	r0
      000D50 86 83            [24] 2886 	mov	dph,@r0
      000D52 08               [12] 2887 	inc	r0
      000D53 86 F0            [24] 2888 	mov	b,@r0
      000D55 12r18r98         [24] 2889 	lcall	_prvIsQueueEmpty
      000D58 E5 82            [12] 2890 	mov	a,dpl
      000D5A D0 06            [24] 2891 	pop	ar6
      000D5C 70 03            [24] 2892 	jnz	00194$
      000D5E 02r0Br58         [24] 2893 	ljmp	00128$
      000D61                       2894 00194$:
                           000D61  2895 	C$queue.c$1621$5_0$286 ==.
                                   2896 ;	src/FreeRTOS/queue.c:1621: return errQUEUE_EMPTY;
      000D61 75 82 00         [24] 2897 	mov	dpl,#0x00
      000D64                       2898 00130$:
                           000D64  2899 	C$queue.c$1629$2_0$264 ==.
                                   2900 ;	src/FreeRTOS/queue.c:1629: }
      000D64 85*00 81         [24] 2901 	mov	sp,_bp
      000D67 D0*00            [24] 2902 	pop	_bp
                           000D69  2903 	C$queue.c$1629$2_0$264 ==.
                           000D69  2904 	XG$xQueueSemaphoreTake$0$0 ==.
      000D69 22               [24] 2905 	ret
                                   2906 ;------------------------------------------------------------
                                   2907 ;Allocation info for local variables in function 'xQueuePeek'
                                   2908 ;------------------------------------------------------------
                                   2909 ;pvBuffer                  Allocated to stack - _bp -5
                                   2910 ;xTicksToWait              Allocated to stack - _bp -7
                                   2911 ;xQueue                    Allocated to registers r5 r3 r7 
                                   2912 ;xEntryTimeSet             Allocated to registers r4 
                                   2913 ;xTimeOut                  Allocated to stack - _bp +8
                                   2914 ;pcOriginalReadPosition    Allocated to registers r6 r5 r4 
                                   2915 ;pxQueue                   Allocated to stack - _bp +11
                                   2916 ;uxMessagesWaiting         Allocated to registers 
                                   2917 ;sloc0                     Allocated to stack - _bp +1
                                   2918 ;sloc1                     Allocated to stack - _bp +4
                                   2919 ;sloc2                     Allocated to stack - _bp +5
                                   2920 ;------------------------------------------------------------
                           000D6A  2921 	G$xQueuePeek$0$0 ==.
                           000D6A  2922 	C$queue.c$1632$2_0$289 ==.
                                   2923 ;	src/FreeRTOS/queue.c:1632: BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
                                   2924 ;	-----------------------------------------
                                   2925 ;	 function xQueuePeek
                                   2926 ;	-----------------------------------------
      000D6A                       2927 _xQueuePeek:
      000D6A C0*00            [24] 2928 	push	_bp
      000D6C E5 81            [12] 2929 	mov	a,sp
      000D6E F5*00            [12] 2930 	mov	_bp,a
      000D70 24 0D            [12] 2931 	add	a,#0x0d
      000D72 F5 81            [12] 2932 	mov	sp,a
      000D74 AD 82            [24] 2933 	mov	r5,dpl
      000D76 AB 83            [24] 2934 	mov	r3,dph
      000D78 AF F0            [24] 2935 	mov	r7,b
                           000D7A  2936 	C$queue.c$1634$2_0$289 ==.
                                   2937 ;	src/FreeRTOS/queue.c:1634: BaseType_t xEntryTimeSet = pdFALSE;
      000D7A 7C 00            [12] 2938 	mov	r4,#0x00
                           000D7C  2939 	C$queue.c$1637$2_0$289 ==.
                                   2940 ;	src/FreeRTOS/queue.c:1637: Queue_t * const pxQueue = xQueue;
      000D7C E5*00            [12] 2941 	mov	a,_bp
      000D7E 24 0B            [12] 2942 	add	a,#0x0b
      000D80 F8               [12] 2943 	mov	r0,a
      000D81 A6 05            [24] 2944 	mov	@r0,ar5
      000D83 08               [12] 2945 	inc	r0
      000D84 A6 03            [24] 2946 	mov	@r0,ar3
      000D86 08               [12] 2947 	inc	r0
      000D87 A6 07            [24] 2948 	mov	@r0,ar7
                           000D89  2949 	C$queue.c$1644$6_0$300 ==.
                                   2950 ;	src/FreeRTOS/queue.c:1644: configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
      000D89 E5*00            [12] 2951 	mov	a,_bp
      000D8B 24 08            [12] 2952 	add	a,#0x08
      000D8D FE               [12] 2953 	mov	r6,a
      000D8E E5*00            [12] 2954 	mov	a,_bp
      000D90 24 04            [12] 2955 	add	a,#0x04
      000D92 F8               [12] 2956 	mov	r0,a
      000D93 A6 06            [24] 2957 	mov	@r0,ar6
      000D95 A8*00            [24] 2958 	mov	r0,_bp
      000D97 08               [12] 2959 	inc	r0
      000D98 74 24            [12] 2960 	mov	a,#0x24
      000D9A 2D               [12] 2961 	add	a,r5
      000D9B F6               [12] 2962 	mov	@r0,a
      000D9C E4               [12] 2963 	clr	a
      000D9D 3B               [12] 2964 	addc	a,r3
      000D9E 08               [12] 2965 	inc	r0
      000D9F F6               [12] 2966 	mov	@r0,a
      000DA0 08               [12] 2967 	inc	r0
      000DA1 A6 07            [24] 2968 	mov	@r0,ar7
      000DA3                       2969 00128$:
                           000DA3  2970 	C$queue.c$1659$3_0$291 ==.
                                   2971 ;	src/FreeRTOS/queue.c:1659: taskENTER_CRITICAL();
      000DA3 C0 E0            [24] 2972 	push ACC 
      000DA5 C0 A8            [24] 2973 	push IE 
                                   2974 ;	assignBit
      000DA7 C2 AF            [12] 2975 	clr	_EA
                           000DA9  2976 	C$queue.c$1661$4_0$292 ==.
                                   2977 ;	src/FreeRTOS/queue.c:1661: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      000DA9 A8*00            [24] 2978 	mov	r0,_bp
      000DAB 08               [12] 2979 	inc	r0
      000DAC 86 82            [24] 2980 	mov	dpl,@r0
      000DAE 08               [12] 2981 	inc	r0
      000DAF 86 83            [24] 2982 	mov	dph,@r0
      000DB1 08               [12] 2983 	inc	r0
      000DB2 86 F0            [24] 2984 	mov	b,@r0
      000DB4 12r00r00         [24] 2985 	lcall	__gptrget
      000DB7 70 03            [24] 2986 	jnz	00182$
      000DB9 02r0Er90         [24] 2987 	ljmp	00111$
      000DBC                       2988 00182$:
                           000DBC  2989 	C$queue.c$1665$4_0$292 ==.
                                   2990 ;	src/FreeRTOS/queue.c:1665: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
                           000DBC  2991 	C$queue.c$1670$5_0$293 ==.
                                   2992 ;	src/FreeRTOS/queue.c:1670: pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
      000DBC E5*00            [12] 2993 	mov	a,_bp
      000DBE 24 0B            [12] 2994 	add	a,#0x0b
      000DC0 F8               [12] 2995 	mov	r0,a
      000DC1 74 06            [12] 2996 	mov	a,#0x06
      000DC3 26               [12] 2997 	add	a,@r0
      000DC4 FA               [12] 2998 	mov	r2,a
      000DC5 E4               [12] 2999 	clr	a
      000DC6 08               [12] 3000 	inc	r0
      000DC7 36               [12] 3001 	addc	a,@r0
      000DC8 FB               [12] 3002 	mov	r3,a
      000DC9 08               [12] 3003 	inc	r0
      000DCA 86 07            [24] 3004 	mov	ar7,@r0
      000DCC 74 03            [12] 3005 	mov	a,#0x03
      000DCE 2A               [12] 3006 	add	a,r2
      000DCF FA               [12] 3007 	mov	r2,a
      000DD0 E4               [12] 3008 	clr	a
      000DD1 3B               [12] 3009 	addc	a,r3
      000DD2 FB               [12] 3010 	mov	r3,a
      000DD3 8A 82            [24] 3011 	mov	dpl,r2
      000DD5 8B 83            [24] 3012 	mov	dph,r3
      000DD7 8F F0            [24] 3013 	mov	b,r7
      000DD9 12r00r00         [24] 3014 	lcall	__gptrget
      000DDC FE               [12] 3015 	mov	r6,a
      000DDD A3               [24] 3016 	inc	dptr
      000DDE 12r00r00         [24] 3017 	lcall	__gptrget
      000DE1 FD               [12] 3018 	mov	r5,a
      000DE2 A3               [24] 3019 	inc	dptr
      000DE3 12r00r00         [24] 3020 	lcall	__gptrget
      000DE6 FC               [12] 3021 	mov	r4,a
                           000DE7  3022 	C$queue.c$1672$5_0$293 ==.
                                   3023 ;	src/FreeRTOS/queue.c:1672: prvCopyDataFromQueue( pxQueue, pvBuffer );
      000DE7 C0 06            [24] 3024 	push	ar6
      000DE9 C0 05            [24] 3025 	push	ar5
      000DEB C0 04            [24] 3026 	push	ar4
      000DED E5*00            [12] 3027 	mov	a,_bp
      000DEF 24 FB            [12] 3028 	add	a,#0xfb
      000DF1 F8               [12] 3029 	mov	r0,a
      000DF2 E6               [12] 3030 	mov	a,@r0
      000DF3 C0 E0            [24] 3031 	push	acc
      000DF5 08               [12] 3032 	inc	r0
      000DF6 E6               [12] 3033 	mov	a,@r0
      000DF7 C0 E0            [24] 3034 	push	acc
      000DF9 08               [12] 3035 	inc	r0
      000DFA E6               [12] 3036 	mov	a,@r0
      000DFB C0 E0            [24] 3037 	push	acc
      000DFD E5*00            [12] 3038 	mov	a,_bp
      000DFF 24 0B            [12] 3039 	add	a,#0x0b
      000E01 F8               [12] 3040 	mov	r0,a
      000E02 86 82            [24] 3041 	mov	dpl,@r0
      000E04 08               [12] 3042 	inc	r0
      000E05 86 83            [24] 3043 	mov	dph,@r0
      000E07 08               [12] 3044 	inc	r0
      000E08 86 F0            [24] 3045 	mov	b,@r0
      000E0A 12r15rCE         [24] 3046 	lcall	_prvCopyDataFromQueue
      000E0D 15 81            [12] 3047 	dec	sp
      000E0F 15 81            [12] 3048 	dec	sp
      000E11 15 81            [12] 3049 	dec	sp
      000E13 D0 04            [24] 3050 	pop	ar4
      000E15 D0 05            [24] 3051 	pop	ar5
      000E17 D0 06            [24] 3052 	pop	ar6
                           000E19  3053 	C$queue.c$1676$5_0$293 ==.
                                   3054 ;	src/FreeRTOS/queue.c:1676: pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
      000E19 E5*00            [12] 3055 	mov	a,_bp
      000E1B 24 0B            [12] 3056 	add	a,#0x0b
      000E1D F8               [12] 3057 	mov	r0,a
      000E1E 74 06            [12] 3058 	mov	a,#0x06
      000E20 26               [12] 3059 	add	a,@r0
      000E21 FA               [12] 3060 	mov	r2,a
      000E22 E4               [12] 3061 	clr	a
      000E23 08               [12] 3062 	inc	r0
      000E24 36               [12] 3063 	addc	a,@r0
      000E25 FB               [12] 3064 	mov	r3,a
      000E26 08               [12] 3065 	inc	r0
      000E27 86 07            [24] 3066 	mov	ar7,@r0
      000E29 74 03            [12] 3067 	mov	a,#0x03
      000E2B 2A               [12] 3068 	add	a,r2
      000E2C FA               [12] 3069 	mov	r2,a
      000E2D E4               [12] 3070 	clr	a
      000E2E 3B               [12] 3071 	addc	a,r3
      000E2F FB               [12] 3072 	mov	r3,a
      000E30 8A 82            [24] 3073 	mov	dpl,r2
      000E32 8B 83            [24] 3074 	mov	dph,r3
      000E34 8F F0            [24] 3075 	mov	b,r7
      000E36 EE               [12] 3076 	mov	a,r6
      000E37 12r00r00         [24] 3077 	lcall	__gptrput
      000E3A A3               [24] 3078 	inc	dptr
      000E3B ED               [12] 3079 	mov	a,r5
      000E3C 12r00r00         [24] 3080 	lcall	__gptrput
      000E3F A3               [24] 3081 	inc	dptr
      000E40 EC               [12] 3082 	mov	a,r4
      000E41 12r00r00         [24] 3083 	lcall	__gptrput
                           000E44  3084 	C$queue.c$1680$5_0$293 ==.
                                   3085 ;	src/FreeRTOS/queue.c:1680: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      000E44 E5*00            [12] 3086 	mov	a,_bp
      000E46 24 0B            [12] 3087 	add	a,#0x0b
      000E48 F8               [12] 3088 	mov	r0,a
      000E49 74 18            [12] 3089 	mov	a,#0x18
      000E4B 26               [12] 3090 	add	a,@r0
      000E4C FA               [12] 3091 	mov	r2,a
      000E4D E4               [12] 3092 	clr	a
      000E4E 08               [12] 3093 	inc	r0
      000E4F 36               [12] 3094 	addc	a,@r0
      000E50 FB               [12] 3095 	mov	r3,a
      000E51 08               [12] 3096 	inc	r0
      000E52 86 07            [24] 3097 	mov	ar7,@r0
      000E54 8A 82            [24] 3098 	mov	dpl,r2
      000E56 8B 83            [24] 3099 	mov	dph,r3
      000E58 8F F0            [24] 3100 	mov	b,r7
      000E5A 12r00r00         [24] 3101 	lcall	__gptrget
      000E5D 60 20            [24] 3102 	jz	00104$
                           000E5F  3103 	C$queue.c$1682$6_0$294 ==.
                                   3104 ;	src/FreeRTOS/queue.c:1682: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      000E5F E5*00            [12] 3105 	mov	a,_bp
      000E61 24 0B            [12] 3106 	add	a,#0x0b
      000E63 F8               [12] 3107 	mov	r0,a
      000E64 74 18            [12] 3108 	mov	a,#0x18
      000E66 26               [12] 3109 	add	a,@r0
      000E67 FA               [12] 3110 	mov	r2,a
      000E68 E4               [12] 3111 	clr	a
      000E69 08               [12] 3112 	inc	r0
      000E6A 36               [12] 3113 	addc	a,@r0
      000E6B FB               [12] 3114 	mov	r3,a
      000E6C 08               [12] 3115 	inc	r0
      000E6D 86 07            [24] 3116 	mov	ar7,@r0
      000E6F 8A 82            [24] 3117 	mov	dpl,r2
      000E71 8B 83            [24] 3118 	mov	dph,r3
      000E73 8F F0            [24] 3119 	mov	b,r7
      000E75 12r00r00         [24] 3120 	lcall	_xTaskRemoveFromEventList
      000E78 E5 82            [12] 3121 	mov	a,dpl
      000E7A 60 03            [24] 3122 	jz	00104$
                           000E7C  3123 	C$queue.c$1685$7_0$295 ==.
                                   3124 ;	src/FreeRTOS/queue.c:1685: queueYIELD_IF_USING_PREEMPTION();
      000E7C 12r00r00         [24] 3125 	lcall	_vPortYield
      000E7F                       3126 00104$:
                           000E7F  3127 	C$queue.c$1697$5_0$293 ==.
                                   3128 ;	src/FreeRTOS/queue.c:1697: taskEXIT_CRITICAL();
      000E7F D0 E0            [24] 3129 	pop ACC 
      000E81 53 E0 80         [24] 3130 	anl	_ACC,#0x80
      000E84 E5 E0            [12] 3131 	mov	a,_ACC
      000E86 42 A8            [12] 3132 	orl	_IE,a
      000E88 D0 E0            [24] 3133 	pop ACC 
                           000E8A  3134 	C$queue.c$1698$5_0$293 ==.
                                   3135 ;	src/FreeRTOS/queue.c:1698: return pdPASS;
      000E8A 75 82 01         [24] 3136 	mov	dpl,#0x01
      000E8D 02r10r47         [24] 3137 	ljmp	00130$
      000E90                       3138 00111$:
                           000E90  3139 	C$queue.c$1702$5_0$298 ==.
                                   3140 ;	src/FreeRTOS/queue.c:1702: if( xTicksToWait == ( TickType_t ) 0 )
      000E90 E5*00            [12] 3141 	mov	a,_bp
      000E92 24 F9            [12] 3142 	add	a,#0xf9
      000E94 F8               [12] 3143 	mov	r0,a
      000E95 E6               [12] 3144 	mov	a,@r0
      000E96 08               [12] 3145 	inc	r0
      000E97 46               [12] 3146 	orl	a,@r0
      000E98 70 11            [24] 3147 	jnz	00108$
                           000E9A  3148 	C$queue.c$1706$6_0$299 ==.
                                   3149 ;	src/FreeRTOS/queue.c:1706: taskEXIT_CRITICAL();
      000E9A D0 E0            [24] 3150 	pop ACC 
      000E9C 53 E0 80         [24] 3151 	anl	_ACC,#0x80
      000E9F E5 E0            [12] 3152 	mov	a,_ACC
      000EA1 42 A8            [12] 3153 	orl	_IE,a
      000EA3 D0 E0            [24] 3154 	pop ACC 
                           000EA5  3155 	C$queue.c$1708$6_0$299 ==.
                                   3156 ;	src/FreeRTOS/queue.c:1708: return errQUEUE_EMPTY;
      000EA5 75 82 00         [24] 3157 	mov	dpl,#0x00
      000EA8 02r10r47         [24] 3158 	ljmp	00130$
      000EAB                       3159 00108$:
                           000EAB  3160 	C$queue.c$1710$5_0$298 ==.
                                   3161 ;	src/FreeRTOS/queue.c:1710: else if( xEntryTimeSet == pdFALSE )
      000EAB EC               [12] 3162 	mov	a,r4
                           000EAC  3163 	C$queue.c$1715$6_0$300 ==.
                                   3164 ;	src/FreeRTOS/queue.c:1715: vTaskInternalSetTimeOutState( &xTimeOut );
      000EAC 70 14            [24] 3165 	jnz	00112$
      000EAE 8E 02            [24] 3166 	mov	ar2,r6
      000EB0 FB               [12] 3167 	mov	r3,a
      000EB1 7F 40            [12] 3168 	mov	r7,#0x40
      000EB3 8A 82            [24] 3169 	mov	dpl,r2
      000EB5 8B 83            [24] 3170 	mov	dph,r3
      000EB7 8F F0            [24] 3171 	mov	b,r7
      000EB9 C0 06            [24] 3172 	push	ar6
      000EBB 12r00r00         [24] 3173 	lcall	_vTaskInternalSetTimeOutState
      000EBE D0 06            [24] 3174 	pop	ar6
                           000EC0  3175 	C$queue.c$1716$6_0$300 ==.
                                   3176 ;	src/FreeRTOS/queue.c:1716: xEntryTimeSet = pdTRUE;
      000EC0 7C 01            [12] 3177 	mov	r4,#0x01
      000EC2                       3178 00112$:
                           000EC2  3179 	C$queue.c$1725$2_0$289 ==.
                                   3180 ;	src/FreeRTOS/queue.c:1725: taskEXIT_CRITICAL();
      000EC2 D0 E0            [24] 3181 	pop ACC 
      000EC4 53 E0 80         [24] 3182 	anl	_ACC,#0x80
      000EC7 E5 E0            [12] 3183 	mov	a,_ACC
      000EC9 42 A8            [12] 3184 	orl	_IE,a
      000ECB D0 E0            [24] 3185 	pop ACC 
                           000ECD  3186 	C$queue.c$1730$3_0$291 ==.
                                   3187 ;	src/FreeRTOS/queue.c:1730: vTaskSuspendAll();
      000ECD C0 06            [24] 3188 	push	ar6
      000ECF C0 04            [24] 3189 	push	ar4
      000ED1 12r00r00         [24] 3190 	lcall	_vTaskSuspendAll
      000ED4 D0 04            [24] 3191 	pop	ar4
      000ED6 D0 06            [24] 3192 	pop	ar6
                           000ED8  3193 	C$queue.c$1731$3_0$291 ==.
                                   3194 ;	src/FreeRTOS/queue.c:1731: prvLockQueue( pxQueue );
      000ED8 C0 E0            [24] 3195 	push ACC 
      000EDA C0 A8            [24] 3196 	push IE 
                                   3197 ;	assignBit
      000EDC C2 AF            [12] 3198 	clr	_EA
      000EDE E5*00            [12] 3199 	mov	a,_bp
      000EE0 24 0B            [12] 3200 	add	a,#0x0b
      000EE2 F8               [12] 3201 	mov	r0,a
      000EE3 74 27            [12] 3202 	mov	a,#0x27
      000EE5 26               [12] 3203 	add	a,@r0
      000EE6 FA               [12] 3204 	mov	r2,a
      000EE7 E4               [12] 3205 	clr	a
      000EE8 08               [12] 3206 	inc	r0
      000EE9 36               [12] 3207 	addc	a,@r0
      000EEA FB               [12] 3208 	mov	r3,a
      000EEB 08               [12] 3209 	inc	r0
      000EEC 86 07            [24] 3210 	mov	ar7,@r0
      000EEE 8A 82            [24] 3211 	mov	dpl,r2
      000EF0 8B 83            [24] 3212 	mov	dph,r3
      000EF2 8F F0            [24] 3213 	mov	b,r7
      000EF4 12r00r00         [24] 3214 	lcall	__gptrget
      000EF7 FD               [12] 3215 	mov	r5,a
      000EF8 BD FF 0A         [24] 3216 	cjne	r5,#0xff,00114$
      000EFB 8A 82            [24] 3217 	mov	dpl,r2
      000EFD 8B 83            [24] 3218 	mov	dph,r3
      000EFF 8F F0            [24] 3219 	mov	b,r7
      000F01 E4               [12] 3220 	clr	a
      000F02 12r00r00         [24] 3221 	lcall	__gptrput
      000F05                       3222 00114$:
      000F05 E5*00            [12] 3223 	mov	a,_bp
      000F07 24 0B            [12] 3224 	add	a,#0x0b
      000F09 F8               [12] 3225 	mov	r0,a
      000F0A 74 28            [12] 3226 	mov	a,#0x28
      000F0C 26               [12] 3227 	add	a,@r0
      000F0D FA               [12] 3228 	mov	r2,a
      000F0E E4               [12] 3229 	clr	a
      000F0F 08               [12] 3230 	inc	r0
      000F10 36               [12] 3231 	addc	a,@r0
      000F11 FB               [12] 3232 	mov	r3,a
      000F12 08               [12] 3233 	inc	r0
      000F13 86 07            [24] 3234 	mov	ar7,@r0
      000F15 8A 82            [24] 3235 	mov	dpl,r2
      000F17 8B 83            [24] 3236 	mov	dph,r3
      000F19 8F F0            [24] 3237 	mov	b,r7
      000F1B 12r00r00         [24] 3238 	lcall	__gptrget
      000F1E FD               [12] 3239 	mov	r5,a
      000F1F BD FF 0A         [24] 3240 	cjne	r5,#0xff,00116$
      000F22 8A 82            [24] 3241 	mov	dpl,r2
      000F24 8B 83            [24] 3242 	mov	dph,r3
      000F26 8F F0            [24] 3243 	mov	b,r7
      000F28 E4               [12] 3244 	clr	a
      000F29 12r00r00         [24] 3245 	lcall	__gptrput
      000F2C                       3246 00116$:
      000F2C C0 04            [24] 3247 	push	ar4
      000F2E D0 E0            [24] 3248 	pop ACC 
      000F30 53 E0 80         [24] 3249 	anl	_ACC,#0x80
      000F33 E5 E0            [12] 3250 	mov	a,_ACC
      000F35 42 A8            [12] 3251 	orl	_IE,a
      000F37 D0 E0            [24] 3252 	pop ACC 
                           000F39  3253 	C$queue.c$1734$3_0$291 ==.
                                   3254 ;	src/FreeRTOS/queue.c:1734: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      000F39 E5*00            [12] 3255 	mov	a,_bp
      000F3B 24 F9            [12] 3256 	add	a,#0xf9
      000F3D FF               [12] 3257 	mov	r7,a
      000F3E E5*00            [12] 3258 	mov	a,_bp
      000F40 24 05            [12] 3259 	add	a,#0x05
      000F42 F8               [12] 3260 	mov	r0,a
      000F43 A6 07            [24] 3261 	mov	@r0,ar7
      000F45 08               [12] 3262 	inc	r0
      000F46 76 00            [12] 3263 	mov	@r0,#0x00
      000F48 08               [12] 3264 	inc	r0
      000F49 76 40            [12] 3265 	mov	@r0,#0x40
      000F4B E5*00            [12] 3266 	mov	a,_bp
      000F4D 24 04            [12] 3267 	add	a,#0x04
      000F4F F8               [12] 3268 	mov	r0,a
      000F50 86 04            [24] 3269 	mov	ar4,@r0
      000F52 7D 00            [12] 3270 	mov	r5,#0x00
      000F54 7F 40            [12] 3271 	mov	r7,#0x40
      000F56 C0 06            [24] 3272 	push	ar6
      000F58 C0 04            [24] 3273 	push	ar4
      000F5A E5*00            [12] 3274 	mov	a,_bp
      000F5C 24 05            [12] 3275 	add	a,#0x05
      000F5E F8               [12] 3276 	mov	r0,a
      000F5F E6               [12] 3277 	mov	a,@r0
      000F60 C0 E0            [24] 3278 	push	acc
      000F62 08               [12] 3279 	inc	r0
      000F63 E6               [12] 3280 	mov	a,@r0
      000F64 C0 E0            [24] 3281 	push	acc
      000F66 08               [12] 3282 	inc	r0
      000F67 E6               [12] 3283 	mov	a,@r0
      000F68 C0 E0            [24] 3284 	push	acc
      000F6A 8C 82            [24] 3285 	mov	dpl,r4
      000F6C 8D 83            [24] 3286 	mov	dph,r5
      000F6E 8F F0            [24] 3287 	mov	b,r7
      000F70 12r00r00         [24] 3288 	lcall	_xTaskCheckForTimeOut
      000F73 AF 82            [24] 3289 	mov	r7,dpl
      000F75 15 81            [12] 3290 	dec	sp
      000F77 15 81            [12] 3291 	dec	sp
      000F79 15 81            [12] 3292 	dec	sp
      000F7B D0 04            [24] 3293 	pop	ar4
      000F7D D0 06            [24] 3294 	pop	ar6
      000F7F D0 04            [24] 3295 	pop	ar4
      000F81 EF               [12] 3296 	mov	a,r7
      000F82 60 03            [24] 3297 	jz	00191$
      000F84 02r10r12         [24] 3298 	ljmp	00125$
      000F87                       3299 00191$:
                           000F87  3300 	C$queue.c$1738$4_0$305 ==.
                                   3301 ;	src/FreeRTOS/queue.c:1738: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000F87 E5*00            [12] 3302 	mov	a,_bp
      000F89 24 0B            [12] 3303 	add	a,#0x0b
      000F8B F8               [12] 3304 	mov	r0,a
      000F8C 86 82            [24] 3305 	mov	dpl,@r0
      000F8E 08               [12] 3306 	inc	r0
      000F8F 86 83            [24] 3307 	mov	dph,@r0
      000F91 08               [12] 3308 	inc	r0
      000F92 86 F0            [24] 3309 	mov	b,@r0
      000F94 C0 06            [24] 3310 	push	ar6
      000F96 C0 04            [24] 3311 	push	ar4
      000F98 12r18r98         [24] 3312 	lcall	_prvIsQueueEmpty
      000F9B E5 82            [12] 3313 	mov	a,dpl
      000F9D D0 04            [24] 3314 	pop	ar4
      000F9F D0 06            [24] 3315 	pop	ar6
      000FA1 60 51            [24] 3316 	jz	00120$
                           000FA3  3317 	C$queue.c$1741$5_0$306 ==.
                                   3318 ;	src/FreeRTOS/queue.c:1741: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      000FA3 E5*00            [12] 3319 	mov	a,_bp
      000FA5 24 0B            [12] 3320 	add	a,#0x0b
      000FA7 F8               [12] 3321 	mov	r0,a
      000FA8 74 18            [12] 3322 	mov	a,#0x18
      000FAA 26               [12] 3323 	add	a,@r0
      000FAB FB               [12] 3324 	mov	r3,a
      000FAC E4               [12] 3325 	clr	a
      000FAD 08               [12] 3326 	inc	r0
      000FAE 36               [12] 3327 	addc	a,@r0
      000FAF FD               [12] 3328 	mov	r5,a
      000FB0 08               [12] 3329 	inc	r0
      000FB1 86 07            [24] 3330 	mov	ar7,@r0
      000FB3 C0 06            [24] 3331 	push	ar6
      000FB5 C0 04            [24] 3332 	push	ar4
      000FB7 E5*00            [12] 3333 	mov	a,_bp
      000FB9 24 F9            [12] 3334 	add	a,#0xf9
      000FBB F8               [12] 3335 	mov	r0,a
      000FBC E6               [12] 3336 	mov	a,@r0
      000FBD C0 E0            [24] 3337 	push	acc
      000FBF 08               [12] 3338 	inc	r0
      000FC0 E6               [12] 3339 	mov	a,@r0
      000FC1 C0 E0            [24] 3340 	push	acc
      000FC3 8B 82            [24] 3341 	mov	dpl,r3
      000FC5 8D 83            [24] 3342 	mov	dph,r5
      000FC7 8F F0            [24] 3343 	mov	b,r7
      000FC9 12r00r00         [24] 3344 	lcall	_vTaskPlaceOnEventList
      000FCC 15 81            [12] 3345 	dec	sp
      000FCE 15 81            [12] 3346 	dec	sp
                           000FD0  3347 	C$queue.c$1742$5_0$306 ==.
                                   3348 ;	src/FreeRTOS/queue.c:1742: prvUnlockQueue( pxQueue );
      000FD0 E5*00            [12] 3349 	mov	a,_bp
      000FD2 24 0B            [12] 3350 	add	a,#0x0b
      000FD4 F8               [12] 3351 	mov	r0,a
      000FD5 86 82            [24] 3352 	mov	dpl,@r0
      000FD7 08               [12] 3353 	inc	r0
      000FD8 86 83            [24] 3354 	mov	dph,@r0
      000FDA 08               [12] 3355 	inc	r0
      000FDB 86 F0            [24] 3356 	mov	b,@r0
      000FDD 12r17r1E         [24] 3357 	lcall	_prvUnlockQueue
                           000FE0  3358 	C$queue.c$1743$5_0$306 ==.
                                   3359 ;	src/FreeRTOS/queue.c:1743: if( xTaskResumeAll() == pdFALSE )
      000FE0 12r00r00         [24] 3360 	lcall	_xTaskResumeAll
      000FE3 E5 82            [12] 3361 	mov	a,dpl
      000FE5 D0 04            [24] 3362 	pop	ar4
      000FE7 D0 06            [24] 3363 	pop	ar6
      000FE9 60 03            [24] 3364 	jz	00193$
      000FEB 02r0DrA3         [24] 3365 	ljmp	00128$
      000FEE                       3366 00193$:
                           000FEE  3367 	C$queue.c$1745$6_0$307 ==.
                                   3368 ;	src/FreeRTOS/queue.c:1745: portYIELD_WITHIN_API();
      000FEE 12r00r00         [24] 3369 	lcall	_vPortYield
      000FF1 02r0DrA3         [24] 3370 	ljmp	00128$
      000FF4                       3371 00120$:
                           000FF4  3372 	C$queue.c$1756$5_0$309 ==.
                                   3373 ;	src/FreeRTOS/queue.c:1756: prvUnlockQueue( pxQueue );
      000FF4 E5*00            [12] 3374 	mov	a,_bp
      000FF6 24 0B            [12] 3375 	add	a,#0x0b
      000FF8 F8               [12] 3376 	mov	r0,a
      000FF9 86 82            [24] 3377 	mov	dpl,@r0
      000FFB 08               [12] 3378 	inc	r0
      000FFC 86 83            [24] 3379 	mov	dph,@r0
      000FFE 08               [12] 3380 	inc	r0
      000FFF 86 F0            [24] 3381 	mov	b,@r0
      001001 C0 06            [24] 3382 	push	ar6
      001003 C0 04            [24] 3383 	push	ar4
      001005 12r17r1E         [24] 3384 	lcall	_prvUnlockQueue
                           001008  3385 	C$queue.c$1757$5_0$309 ==.
                                   3386 ;	src/FreeRTOS/queue.c:1757: ( void ) xTaskResumeAll();
      001008 12r00r00         [24] 3387 	lcall	_xTaskResumeAll
      00100B D0 04            [24] 3388 	pop	ar4
      00100D D0 06            [24] 3389 	pop	ar6
      00100F 02r0DrA3         [24] 3390 	ljmp	00128$
      001012                       3391 00125$:
                           001012  3392 	C$queue.c$1764$4_0$310 ==.
                                   3393 ;	src/FreeRTOS/queue.c:1764: prvUnlockQueue( pxQueue );
      001012 E5*00            [12] 3394 	mov	a,_bp
      001014 24 0B            [12] 3395 	add	a,#0x0b
      001016 F8               [12] 3396 	mov	r0,a
      001017 86 82            [24] 3397 	mov	dpl,@r0
      001019 08               [12] 3398 	inc	r0
      00101A 86 83            [24] 3399 	mov	dph,@r0
      00101C 08               [12] 3400 	inc	r0
      00101D 86 F0            [24] 3401 	mov	b,@r0
      00101F C0 06            [24] 3402 	push	ar6
      001021 C0 04            [24] 3403 	push	ar4
      001023 12r17r1E         [24] 3404 	lcall	_prvUnlockQueue
                           001026  3405 	C$queue.c$1765$4_0$310 ==.
                                   3406 ;	src/FreeRTOS/queue.c:1765: ( void ) xTaskResumeAll();
      001026 12r00r00         [24] 3407 	lcall	_xTaskResumeAll
                           001029  3408 	C$queue.c$1767$4_0$310 ==.
                                   3409 ;	src/FreeRTOS/queue.c:1767: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      001029 E5*00            [12] 3410 	mov	a,_bp
      00102B 24 0B            [12] 3411 	add	a,#0x0b
      00102D F8               [12] 3412 	mov	r0,a
      00102E 86 82            [24] 3413 	mov	dpl,@r0
      001030 08               [12] 3414 	inc	r0
      001031 86 83            [24] 3415 	mov	dph,@r0
      001033 08               [12] 3416 	inc	r0
      001034 86 F0            [24] 3417 	mov	b,@r0
      001036 12r18r98         [24] 3418 	lcall	_prvIsQueueEmpty
      001039 E5 82            [12] 3419 	mov	a,dpl
      00103B D0 04            [24] 3420 	pop	ar4
      00103D D0 06            [24] 3421 	pop	ar6
      00103F 70 03            [24] 3422 	jnz	00194$
      001041 02r0DrA3         [24] 3423 	ljmp	00128$
      001044                       3424 00194$:
                           001044  3425 	C$queue.c$1770$5_0$311 ==.
                                   3426 ;	src/FreeRTOS/queue.c:1770: return errQUEUE_EMPTY;
      001044 75 82 00         [24] 3427 	mov	dpl,#0x00
      001047                       3428 00130$:
                           001047  3429 	C$queue.c$1778$2_0$289 ==.
                                   3430 ;	src/FreeRTOS/queue.c:1778: }
      001047 85*00 81         [24] 3431 	mov	sp,_bp
      00104A D0*00            [24] 3432 	pop	_bp
                           00104C  3433 	C$queue.c$1778$2_0$289 ==.
                           00104C  3434 	XG$xQueuePeek$0$0 ==.
      00104C 22               [24] 3435 	ret
                                   3436 ;------------------------------------------------------------
                                   3437 ;Allocation info for local variables in function 'xQueueReceiveFromISR'
                                   3438 ;------------------------------------------------------------
                                   3439 ;pvBuffer                  Allocated to stack - _bp -5
                                   3440 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -8
                                   3441 ;xQueue                    Allocated to stack - _bp +1
                                   3442 ;xReturn                   Allocated to registers r7 
                                   3443 ;uxSavedInterruptStatus    Allocated to registers 
                                   3444 ;pxQueue                   Allocated to registers 
                                   3445 ;uxMessagesWaiting         Allocated to registers r4 
                                   3446 ;cRxLock                   Allocated to registers r7 
                                   3447 ;------------------------------------------------------------
                           00104D  3448 	G$xQueueReceiveFromISR$0$0 ==.
                           00104D  3449 	C$queue.c$1781$2_0$314 ==.
                                   3450 ;	src/FreeRTOS/queue.c:1781: BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
                                   3451 ;	-----------------------------------------
                                   3452 ;	 function xQueueReceiveFromISR
                                   3453 ;	-----------------------------------------
      00104D                       3454 _xQueueReceiveFromISR:
      00104D C0*00            [24] 3455 	push	_bp
      00104F 85 81*00         [24] 3456 	mov	_bp,sp
      001052 C0 82            [24] 3457 	push	dpl
      001054 C0 83            [24] 3458 	push	dph
      001056 C0 F0            [24] 3459 	push	b
                           001058  3460 	C$queue.c$1808$2_0$315 ==.
                                   3461 ;	src/FreeRTOS/queue.c:1808: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      001058 A8*00            [24] 3462 	mov	r0,_bp
      00105A 08               [12] 3463 	inc	r0
      00105B 74 24            [12] 3464 	mov	a,#0x24
      00105D 26               [12] 3465 	add	a,@r0
      00105E FA               [12] 3466 	mov	r2,a
      00105F E4               [12] 3467 	clr	a
      001060 08               [12] 3468 	inc	r0
      001061 36               [12] 3469 	addc	a,@r0
      001062 FB               [12] 3470 	mov	r3,a
      001063 08               [12] 3471 	inc	r0
      001064 86 04            [24] 3472 	mov	ar4,@r0
      001066 8A 82            [24] 3473 	mov	dpl,r2
      001068 8B 83            [24] 3474 	mov	dph,r3
      00106A 8C F0            [24] 3475 	mov	b,r4
      00106C 12r00r00         [24] 3476 	lcall	__gptrget
                           00106F  3477 	C$queue.c$1811$2_0$315 ==.
                                   3478 ;	src/FreeRTOS/queue.c:1811: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
      00106F FA               [12] 3479 	mov	r2,a
      001070 FC               [12] 3480 	mov	r4,a
      001071 70 03            [24] 3481 	jnz	00137$
      001073 02r11r4C         [24] 3482 	ljmp	00111$
      001076                       3483 00137$:
                           001076  3484 	C$queue.c$1813$3_0$316 ==.
                                   3485 ;	src/FreeRTOS/queue.c:1813: const int8_t cRxLock = pxQueue->cRxLock;
      001076 A8*00            [24] 3486 	mov	r0,_bp
      001078 08               [12] 3487 	inc	r0
      001079 74 27            [12] 3488 	mov	a,#0x27
      00107B 26               [12] 3489 	add	a,@r0
      00107C FA               [12] 3490 	mov	r2,a
      00107D E4               [12] 3491 	clr	a
      00107E 08               [12] 3492 	inc	r0
      00107F 36               [12] 3493 	addc	a,@r0
      001080 FB               [12] 3494 	mov	r3,a
      001081 08               [12] 3495 	inc	r0
      001082 86 07            [24] 3496 	mov	ar7,@r0
      001084 8A 82            [24] 3497 	mov	dpl,r2
      001086 8B 83            [24] 3498 	mov	dph,r3
      001088 8F F0            [24] 3499 	mov	b,r7
      00108A 12r00r00         [24] 3500 	lcall	__gptrget
      00108D FF               [12] 3501 	mov	r7,a
                           00108E  3502 	C$queue.c$1817$3_0$316 ==.
                                   3503 ;	src/FreeRTOS/queue.c:1817: prvCopyDataFromQueue( pxQueue, pvBuffer );
      00108E C0 07            [24] 3504 	push	ar7
      001090 C0 04            [24] 3505 	push	ar4
      001092 E5*00            [12] 3506 	mov	a,_bp
      001094 24 FB            [12] 3507 	add	a,#0xfb
      001096 F8               [12] 3508 	mov	r0,a
      001097 E6               [12] 3509 	mov	a,@r0
      001098 C0 E0            [24] 3510 	push	acc
      00109A 08               [12] 3511 	inc	r0
      00109B E6               [12] 3512 	mov	a,@r0
      00109C C0 E0            [24] 3513 	push	acc
      00109E 08               [12] 3514 	inc	r0
      00109F E6               [12] 3515 	mov	a,@r0
      0010A0 C0 E0            [24] 3516 	push	acc
      0010A2 A8*00            [24] 3517 	mov	r0,_bp
      0010A4 08               [12] 3518 	inc	r0
      0010A5 86 82            [24] 3519 	mov	dpl,@r0
      0010A7 08               [12] 3520 	inc	r0
      0010A8 86 83            [24] 3521 	mov	dph,@r0
      0010AA 08               [12] 3522 	inc	r0
      0010AB 86 F0            [24] 3523 	mov	b,@r0
      0010AD 12r15rCE         [24] 3524 	lcall	_prvCopyDataFromQueue
      0010B0 15 81            [12] 3525 	dec	sp
      0010B2 15 81            [12] 3526 	dec	sp
      0010B4 15 81            [12] 3527 	dec	sp
      0010B6 D0 04            [24] 3528 	pop	ar4
      0010B8 D0 07            [24] 3529 	pop	ar7
                           0010BA  3530 	C$queue.c$1818$3_0$316 ==.
                                   3531 ;	src/FreeRTOS/queue.c:1818: pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
      0010BA A8*00            [24] 3532 	mov	r0,_bp
      0010BC 08               [12] 3533 	inc	r0
      0010BD 74 24            [12] 3534 	mov	a,#0x24
      0010BF 26               [12] 3535 	add	a,@r0
      0010C0 FB               [12] 3536 	mov	r3,a
      0010C1 E4               [12] 3537 	clr	a
      0010C2 08               [12] 3538 	inc	r0
      0010C3 36               [12] 3539 	addc	a,@r0
      0010C4 FD               [12] 3540 	mov	r5,a
      0010C5 08               [12] 3541 	inc	r0
      0010C6 86 06            [24] 3542 	mov	ar6,@r0
      0010C8 1C               [12] 3543 	dec	r4
      0010C9 8B 82            [24] 3544 	mov	dpl,r3
      0010CB 8D 83            [24] 3545 	mov	dph,r5
      0010CD 8E F0            [24] 3546 	mov	b,r6
      0010CF EC               [12] 3547 	mov	a,r4
      0010D0 12r00r00         [24] 3548 	lcall	__gptrput
                           0010D3  3549 	C$queue.c$1824$3_0$316 ==.
                                   3550 ;	src/FreeRTOS/queue.c:1824: if( cRxLock == queueUNLOCKED )
      0010D3 BF FF 58         [24] 3551 	cjne	r7,#0xff,00108$
                           0010D6  3552 	C$queue.c$1826$4_0$317 ==.
                                   3553 ;	src/FreeRTOS/queue.c:1826: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      0010D6 A8*00            [24] 3554 	mov	r0,_bp
      0010D8 08               [12] 3555 	inc	r0
      0010D9 74 0C            [12] 3556 	mov	a,#0x0c
      0010DB 26               [12] 3557 	add	a,@r0
      0010DC FC               [12] 3558 	mov	r4,a
      0010DD E4               [12] 3559 	clr	a
      0010DE 08               [12] 3560 	inc	r0
      0010DF 36               [12] 3561 	addc	a,@r0
      0010E0 FD               [12] 3562 	mov	r5,a
      0010E1 08               [12] 3563 	inc	r0
      0010E2 86 06            [24] 3564 	mov	ar6,@r0
      0010E4 8C 82            [24] 3565 	mov	dpl,r4
      0010E6 8D 83            [24] 3566 	mov	dph,r5
      0010E8 8E F0            [24] 3567 	mov	b,r6
      0010EA 12r00r00         [24] 3568 	lcall	__gptrget
      0010ED 60 58            [24] 3569 	jz	00109$
                           0010EF  3570 	C$queue.c$1828$5_0$318 ==.
                                   3571 ;	src/FreeRTOS/queue.c:1828: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      0010EF A8*00            [24] 3572 	mov	r0,_bp
      0010F1 08               [12] 3573 	inc	r0
      0010F2 74 0C            [12] 3574 	mov	a,#0x0c
      0010F4 26               [12] 3575 	add	a,@r0
      0010F5 FC               [12] 3576 	mov	r4,a
      0010F6 E4               [12] 3577 	clr	a
      0010F7 08               [12] 3578 	inc	r0
      0010F8 36               [12] 3579 	addc	a,@r0
      0010F9 FD               [12] 3580 	mov	r5,a
      0010FA 08               [12] 3581 	inc	r0
      0010FB 86 06            [24] 3582 	mov	ar6,@r0
      0010FD 8C 82            [24] 3583 	mov	dpl,r4
      0010FF 8D 83            [24] 3584 	mov	dph,r5
      001101 8E F0            [24] 3585 	mov	b,r6
      001103 12r00r00         [24] 3586 	lcall	_xTaskRemoveFromEventList
      001106 E5 82            [12] 3587 	mov	a,dpl
      001108 60 3D            [24] 3588 	jz	00109$
                           00110A  3589 	C$queue.c$1832$6_0$319 ==.
                                   3590 ;	src/FreeRTOS/queue.c:1832: if( pxHigherPriorityTaskWoken != NULL )
      00110A E5*00            [12] 3591 	mov	a,_bp
      00110C 24 F8            [12] 3592 	add	a,#0xf8
      00110E F8               [12] 3593 	mov	r0,a
      00110F E6               [12] 3594 	mov	a,@r0
      001110 08               [12] 3595 	inc	r0
      001111 46               [12] 3596 	orl	a,@r0
      001112 60 33            [24] 3597 	jz	00109$
                           001114  3598 	C$queue.c$1834$7_0$320 ==.
                                   3599 ;	src/FreeRTOS/queue.c:1834: *pxHigherPriorityTaskWoken = pdTRUE;
      001114 E5*00            [12] 3600 	mov	a,_bp
      001116 24 F8            [12] 3601 	add	a,#0xf8
      001118 F8               [12] 3602 	mov	r0,a
      001119 86 04            [24] 3603 	mov	ar4,@r0
      00111B 08               [12] 3604 	inc	r0
      00111C 86 05            [24] 3605 	mov	ar5,@r0
      00111E 08               [12] 3606 	inc	r0
      00111F 86 06            [24] 3607 	mov	ar6,@r0
      001121 8C 82            [24] 3608 	mov	dpl,r4
      001123 8D 83            [24] 3609 	mov	dph,r5
      001125 8E F0            [24] 3610 	mov	b,r6
      001127 74 01            [12] 3611 	mov	a,#0x01
      001129 12r00r00         [24] 3612 	lcall	__gptrput
      00112C 80 19            [24] 3613 	sjmp	00109$
      00112E                       3614 00108$:
                           00112E  3615 	C$queue.c$1855$4_0$324 ==.
                                   3616 ;	src/FreeRTOS/queue.c:1855: pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
      00112E A8*00            [24] 3617 	mov	r0,_bp
      001130 08               [12] 3618 	inc	r0
      001131 74 27            [12] 3619 	mov	a,#0x27
      001133 26               [12] 3620 	add	a,@r0
      001134 FC               [12] 3621 	mov	r4,a
      001135 E4               [12] 3622 	clr	a
      001136 08               [12] 3623 	inc	r0
      001137 36               [12] 3624 	addc	a,@r0
      001138 FD               [12] 3625 	mov	r5,a
      001139 08               [12] 3626 	inc	r0
      00113A 86 06            [24] 3627 	mov	ar6,@r0
      00113C 0F               [12] 3628 	inc	r7
      00113D 8C 82            [24] 3629 	mov	dpl,r4
      00113F 8D 83            [24] 3630 	mov	dph,r5
      001141 8E F0            [24] 3631 	mov	b,r6
      001143 EF               [12] 3632 	mov	a,r7
      001144 12r00r00         [24] 3633 	lcall	__gptrput
      001147                       3634 00109$:
                           001147  3635 	C$queue.c$1858$3_0$316 ==.
                                   3636 ;	src/FreeRTOS/queue.c:1858: xReturn = pdPASS;
                           001147  3637 	C$queue.c$1862$3_0$325 ==.
                                   3638 ;	src/FreeRTOS/queue.c:1862: xReturn = pdFAIL;
                           001147  3639 	C$queue.c$1868$1_0$314 ==.
                                   3640 ;	src/FreeRTOS/queue.c:1868: return xReturn;
                           001147  3641 	C$queue.c$1869$1_0$314 ==.
                                   3642 ;	src/FreeRTOS/queue.c:1869: }
      001147 75 82 01         [24] 3643 	mov	dpl,#0x01
      00114A 80 03            [24] 3644 	sjmp	00112$
      00114C                       3645 00111$:
      00114C 75 82 00         [24] 3646 	mov	dpl,#0x00
      00114F                       3647 00112$:
      00114F 85*00 81         [24] 3648 	mov	sp,_bp
      001152 D0*00            [24] 3649 	pop	_bp
                           001154  3650 	C$queue.c$1869$1_0$314 ==.
                           001154  3651 	XG$xQueueReceiveFromISR$0$0 ==.
      001154 22               [24] 3652 	ret
                                   3653 ;------------------------------------------------------------
                                   3654 ;Allocation info for local variables in function 'xQueuePeekFromISR'
                                   3655 ;------------------------------------------------------------
                                   3656 ;pvBuffer                  Allocated to stack - _bp -5
                                   3657 ;xQueue                    Allocated to registers r5 r6 r7 
                                   3658 ;xReturn                   Allocated to registers r7 
                                   3659 ;uxSavedInterruptStatus    Allocated to registers 
                                   3660 ;pcOriginalReadPosition    Allocated to registers r2 r3 r4 
                                   3661 ;pxQueue                   Allocated to registers 
                                   3662 ;------------------------------------------------------------
                           001155  3663 	G$xQueuePeekFromISR$0$0 ==.
                           001155  3664 	C$queue.c$1872$1_0$327 ==.
                                   3665 ;	src/FreeRTOS/queue.c:1872: BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
                                   3666 ;	-----------------------------------------
                                   3667 ;	 function xQueuePeekFromISR
                                   3668 ;	-----------------------------------------
      001155                       3669 _xQueuePeekFromISR:
      001155 C0*00            [24] 3670 	push	_bp
      001157 85 81*00         [24] 3671 	mov	_bp,sp
      00115A AD 82            [24] 3672 	mov	r5,dpl
      00115C AE 83            [24] 3673 	mov	r6,dph
      00115E AF F0            [24] 3674 	mov	r7,b
                           001160  3675 	C$queue.c$1902$2_0$328 ==.
                                   3676 ;	src/FreeRTOS/queue.c:1902: if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
      001160 74 24            [12] 3677 	mov	a,#0x24
      001162 2D               [12] 3678 	add	a,r5
      001163 FA               [12] 3679 	mov	r2,a
      001164 E4               [12] 3680 	clr	a
      001165 3E               [12] 3681 	addc	a,r6
      001166 FB               [12] 3682 	mov	r3,a
      001167 8F 04            [24] 3683 	mov	ar4,r7
      001169 8A 82            [24] 3684 	mov	dpl,r2
      00116B 8B 83            [24] 3685 	mov	dph,r3
      00116D 8C F0            [24] 3686 	mov	b,r4
      00116F 12r00r00         [24] 3687 	lcall	__gptrget
      001172 70 03            [24] 3688 	jnz	00110$
      001174 02r11rF8         [24] 3689 	ljmp	00102$
      001177                       3690 00110$:
                           001177  3691 	C$queue.c$1908$3_0$329 ==.
                                   3692 ;	src/FreeRTOS/queue.c:1908: pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
      001177 74 06            [12] 3693 	mov	a,#0x06
      001179 2D               [12] 3694 	add	a,r5
      00117A FA               [12] 3695 	mov	r2,a
      00117B E4               [12] 3696 	clr	a
      00117C 3E               [12] 3697 	addc	a,r6
      00117D FB               [12] 3698 	mov	r3,a
      00117E 8F 04            [24] 3699 	mov	ar4,r7
      001180 74 03            [12] 3700 	mov	a,#0x03
      001182 2A               [12] 3701 	add	a,r2
      001183 FA               [12] 3702 	mov	r2,a
      001184 E4               [12] 3703 	clr	a
      001185 3B               [12] 3704 	addc	a,r3
      001186 FB               [12] 3705 	mov	r3,a
      001187 8A 82            [24] 3706 	mov	dpl,r2
      001189 8B 83            [24] 3707 	mov	dph,r3
      00118B 8C F0            [24] 3708 	mov	b,r4
      00118D 12r00r00         [24] 3709 	lcall	__gptrget
      001190 FA               [12] 3710 	mov	r2,a
      001191 A3               [24] 3711 	inc	dptr
      001192 12r00r00         [24] 3712 	lcall	__gptrget
      001195 FB               [12] 3713 	mov	r3,a
      001196 A3               [24] 3714 	inc	dptr
      001197 12r00r00         [24] 3715 	lcall	__gptrget
      00119A FC               [12] 3716 	mov	r4,a
                           00119B  3717 	C$queue.c$1909$3_0$329 ==.
                                   3718 ;	src/FreeRTOS/queue.c:1909: prvCopyDataFromQueue( pxQueue, pvBuffer );
      00119B C0 07            [24] 3719 	push	ar7
      00119D C0 06            [24] 3720 	push	ar6
      00119F C0 05            [24] 3721 	push	ar5
      0011A1 C0 04            [24] 3722 	push	ar4
      0011A3 C0 03            [24] 3723 	push	ar3
      0011A5 C0 02            [24] 3724 	push	ar2
      0011A7 E5*00            [12] 3725 	mov	a,_bp
      0011A9 24 FB            [12] 3726 	add	a,#0xfb
      0011AB F8               [12] 3727 	mov	r0,a
      0011AC E6               [12] 3728 	mov	a,@r0
      0011AD C0 E0            [24] 3729 	push	acc
      0011AF 08               [12] 3730 	inc	r0
      0011B0 E6               [12] 3731 	mov	a,@r0
      0011B1 C0 E0            [24] 3732 	push	acc
      0011B3 08               [12] 3733 	inc	r0
      0011B4 E6               [12] 3734 	mov	a,@r0
      0011B5 C0 E0            [24] 3735 	push	acc
      0011B7 8D 82            [24] 3736 	mov	dpl,r5
      0011B9 8E 83            [24] 3737 	mov	dph,r6
      0011BB 8F F0            [24] 3738 	mov	b,r7
      0011BD 12r15rCE         [24] 3739 	lcall	_prvCopyDataFromQueue
      0011C0 15 81            [12] 3740 	dec	sp
      0011C2 15 81            [12] 3741 	dec	sp
      0011C4 15 81            [12] 3742 	dec	sp
      0011C6 D0 02            [24] 3743 	pop	ar2
      0011C8 D0 03            [24] 3744 	pop	ar3
      0011CA D0 04            [24] 3745 	pop	ar4
      0011CC D0 05            [24] 3746 	pop	ar5
      0011CE D0 06            [24] 3747 	pop	ar6
      0011D0 D0 07            [24] 3748 	pop	ar7
                           0011D2  3749 	C$queue.c$1910$3_0$329 ==.
                                   3750 ;	src/FreeRTOS/queue.c:1910: pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
      0011D2 74 06            [12] 3751 	mov	a,#0x06
      0011D4 2D               [12] 3752 	add	a,r5
      0011D5 FD               [12] 3753 	mov	r5,a
      0011D6 E4               [12] 3754 	clr	a
      0011D7 3E               [12] 3755 	addc	a,r6
      0011D8 FE               [12] 3756 	mov	r6,a
      0011D9 74 03            [12] 3757 	mov	a,#0x03
      0011DB 2D               [12] 3758 	add	a,r5
      0011DC FD               [12] 3759 	mov	r5,a
      0011DD E4               [12] 3760 	clr	a
      0011DE 3E               [12] 3761 	addc	a,r6
      0011DF FE               [12] 3762 	mov	r6,a
      0011E0 8D 82            [24] 3763 	mov	dpl,r5
      0011E2 8E 83            [24] 3764 	mov	dph,r6
      0011E4 8F F0            [24] 3765 	mov	b,r7
      0011E6 EA               [12] 3766 	mov	a,r2
      0011E7 12r00r00         [24] 3767 	lcall	__gptrput
      0011EA A3               [24] 3768 	inc	dptr
      0011EB EB               [12] 3769 	mov	a,r3
      0011EC 12r00r00         [24] 3770 	lcall	__gptrput
      0011EF A3               [24] 3771 	inc	dptr
      0011F0 EC               [12] 3772 	mov	a,r4
      0011F1 12r00r00         [24] 3773 	lcall	__gptrput
                           0011F4  3774 	C$queue.c$1912$3_0$329 ==.
                                   3775 ;	src/FreeRTOS/queue.c:1912: xReturn = pdPASS;
      0011F4 7F 01            [12] 3776 	mov	r7,#0x01
      0011F6 80 02            [24] 3777 	sjmp	00103$
      0011F8                       3778 00102$:
                           0011F8  3779 	C$queue.c$1916$3_0$330 ==.
                                   3780 ;	src/FreeRTOS/queue.c:1916: xReturn = pdFAIL;
      0011F8 7F 00            [12] 3781 	mov	r7,#0x00
      0011FA                       3782 00103$:
                           0011FA  3783 	C$queue.c$1922$1_0$327 ==.
                                   3784 ;	src/FreeRTOS/queue.c:1922: return xReturn;
      0011FA 8F 82            [24] 3785 	mov	dpl,r7
                           0011FC  3786 	C$queue.c$1923$1_0$327 ==.
                                   3787 ;	src/FreeRTOS/queue.c:1923: }
      0011FC D0*00            [24] 3788 	pop	_bp
                           0011FE  3789 	C$queue.c$1923$1_0$327 ==.
                           0011FE  3790 	XG$xQueuePeekFromISR$0$0 ==.
      0011FE 22               [24] 3791 	ret
                                   3792 ;------------------------------------------------------------
                                   3793 ;Allocation info for local variables in function 'uxQueueMessagesWaiting'
                                   3794 ;------------------------------------------------------------
                                   3795 ;xQueue                    Allocated to registers r5 r6 r7 
                                   3796 ;uxReturn                  Allocated to registers r5 
                                   3797 ;------------------------------------------------------------
                           0011FF  3798 	G$uxQueueMessagesWaiting$0$0 ==.
                           0011FF  3799 	C$queue.c$1926$1_0$332 ==.
                                   3800 ;	src/FreeRTOS/queue.c:1926: UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
                                   3801 ;	-----------------------------------------
                                   3802 ;	 function uxQueueMessagesWaiting
                                   3803 ;	-----------------------------------------
      0011FF                       3804 _uxQueueMessagesWaiting:
      0011FF AD 82            [24] 3805 	mov	r5,dpl
      001201 AE 83            [24] 3806 	mov	r6,dph
      001203 AF F0            [24] 3807 	mov	r7,b
                           001205  3808 	C$queue.c$1932$1_0$332 ==.
                                   3809 ;	src/FreeRTOS/queue.c:1932: taskENTER_CRITICAL();
      001205 C0 E0            [24] 3810 	push ACC 
      001207 C0 A8            [24] 3811 	push IE 
                                   3812 ;	assignBit
      001209 C2 AF            [12] 3813 	clr	_EA
                           00120B  3814 	C$queue.c$1934$2_0$333 ==.
                                   3815 ;	src/FreeRTOS/queue.c:1934: uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
      00120B 74 24            [12] 3816 	mov	a,#0x24
      00120D 2D               [12] 3817 	add	a,r5
      00120E FD               [12] 3818 	mov	r5,a
      00120F E4               [12] 3819 	clr	a
      001210 3E               [12] 3820 	addc	a,r6
      001211 FE               [12] 3821 	mov	r6,a
      001212 8D 82            [24] 3822 	mov	dpl,r5
      001214 8E 83            [24] 3823 	mov	dph,r6
      001216 8F F0            [24] 3824 	mov	b,r7
      001218 12r00r00         [24] 3825 	lcall	__gptrget
      00121B FD               [12] 3826 	mov	r5,a
                           00121C  3827 	C$queue.c$1936$1_0$332 ==.
                                   3828 ;	src/FreeRTOS/queue.c:1936: taskEXIT_CRITICAL();
      00121C D0 E0            [24] 3829 	pop ACC 
      00121E 53 E0 80         [24] 3830 	anl	_ACC,#0x80
      001221 E5 E0            [12] 3831 	mov	a,_ACC
      001223 42 A8            [12] 3832 	orl	_IE,a
      001225 D0 E0            [24] 3833 	pop ACC 
                           001227  3834 	C$queue.c$1938$1_0$332 ==.
                                   3835 ;	src/FreeRTOS/queue.c:1938: return uxReturn;
      001227 8D 82            [24] 3836 	mov	dpl,r5
                           001229  3837 	C$queue.c$1939$1_0$332 ==.
                                   3838 ;	src/FreeRTOS/queue.c:1939: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
                           001229  3839 	C$queue.c$1939$1_0$332 ==.
                           001229  3840 	XG$uxQueueMessagesWaiting$0$0 ==.
      001229 22               [24] 3841 	ret
                                   3842 ;------------------------------------------------------------
                                   3843 ;Allocation info for local variables in function 'uxQueueSpacesAvailable'
                                   3844 ;------------------------------------------------------------
                                   3845 ;xQueue                    Allocated to registers r5 r6 r7 
                                   3846 ;uxReturn                  Allocated to registers r2 
                                   3847 ;pxQueue                   Allocated to registers 
                                   3848 ;------------------------------------------------------------
                           00122A  3849 	G$uxQueueSpacesAvailable$0$0 ==.
                           00122A  3850 	C$queue.c$1942$1_0$335 ==.
                                   3851 ;	src/FreeRTOS/queue.c:1942: UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
                                   3852 ;	-----------------------------------------
                                   3853 ;	 function uxQueueSpacesAvailable
                                   3854 ;	-----------------------------------------
      00122A                       3855 _uxQueueSpacesAvailable:
      00122A AD 82            [24] 3856 	mov	r5,dpl
      00122C AE 83            [24] 3857 	mov	r6,dph
      00122E AF F0            [24] 3858 	mov	r7,b
                           001230  3859 	C$queue.c$1949$1_0$335 ==.
                                   3860 ;	src/FreeRTOS/queue.c:1949: taskENTER_CRITICAL();
      001230 C0 E0            [24] 3861 	push ACC 
      001232 C0 A8            [24] 3862 	push IE 
                                   3863 ;	assignBit
      001234 C2 AF            [12] 3864 	clr	_EA
                           001236  3865 	C$queue.c$1951$2_0$336 ==.
                                   3866 ;	src/FreeRTOS/queue.c:1951: uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
      001236 74 25            [12] 3867 	mov	a,#0x25
      001238 2D               [12] 3868 	add	a,r5
      001239 FA               [12] 3869 	mov	r2,a
      00123A E4               [12] 3870 	clr	a
      00123B 3E               [12] 3871 	addc	a,r6
      00123C FB               [12] 3872 	mov	r3,a
      00123D 8F 04            [24] 3873 	mov	ar4,r7
      00123F 8A 82            [24] 3874 	mov	dpl,r2
      001241 8B 83            [24] 3875 	mov	dph,r3
      001243 8C F0            [24] 3876 	mov	b,r4
      001245 12r00r00         [24] 3877 	lcall	__gptrget
      001248 FA               [12] 3878 	mov	r2,a
      001249 74 24            [12] 3879 	mov	a,#0x24
      00124B 2D               [12] 3880 	add	a,r5
      00124C FD               [12] 3881 	mov	r5,a
      00124D E4               [12] 3882 	clr	a
      00124E 3E               [12] 3883 	addc	a,r6
      00124F FE               [12] 3884 	mov	r6,a
      001250 8D 82            [24] 3885 	mov	dpl,r5
      001252 8E 83            [24] 3886 	mov	dph,r6
      001254 8F F0            [24] 3887 	mov	b,r7
      001256 12r00r00         [24] 3888 	lcall	__gptrget
      001259 FD               [12] 3889 	mov	r5,a
      00125A EA               [12] 3890 	mov	a,r2
      00125B C3               [12] 3891 	clr	c
      00125C 9D               [12] 3892 	subb	a,r5
      00125D FA               [12] 3893 	mov	r2,a
                           00125E  3894 	C$queue.c$1953$1_0$335 ==.
                                   3895 ;	src/FreeRTOS/queue.c:1953: taskEXIT_CRITICAL();
      00125E D0 E0            [24] 3896 	pop ACC 
      001260 53 E0 80         [24] 3897 	anl	_ACC,#0x80
      001263 E5 E0            [12] 3898 	mov	a,_ACC
      001265 42 A8            [12] 3899 	orl	_IE,a
      001267 D0 E0            [24] 3900 	pop ACC 
                           001269  3901 	C$queue.c$1955$1_0$335 ==.
                                   3902 ;	src/FreeRTOS/queue.c:1955: return uxReturn;
      001269 8A 82            [24] 3903 	mov	dpl,r2
                           00126B  3904 	C$queue.c$1956$1_0$335 ==.
                                   3905 ;	src/FreeRTOS/queue.c:1956: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
                           00126B  3906 	C$queue.c$1956$1_0$335 ==.
                           00126B  3907 	XG$uxQueueSpacesAvailable$0$0 ==.
      00126B 22               [24] 3908 	ret
                                   3909 ;------------------------------------------------------------
                                   3910 ;Allocation info for local variables in function 'uxQueueMessagesWaitingFromISR'
                                   3911 ;------------------------------------------------------------
                                   3912 ;xQueue                    Allocated to registers r5 r6 r7 
                                   3913 ;uxReturn                  Allocated to registers r5 
                                   3914 ;pxQueue                   Allocated to registers 
                                   3915 ;------------------------------------------------------------
                           00126C  3916 	G$uxQueueMessagesWaitingFromISR$0$0 ==.
                           00126C  3917 	C$queue.c$1959$1_0$338 ==.
                                   3918 ;	src/FreeRTOS/queue.c:1959: UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
                                   3919 ;	-----------------------------------------
                                   3920 ;	 function uxQueueMessagesWaitingFromISR
                                   3921 ;	-----------------------------------------
      00126C                       3922 _uxQueueMessagesWaitingFromISR:
      00126C AD 82            [24] 3923 	mov	r5,dpl
      00126E AE 83            [24] 3924 	mov	r6,dph
      001270 AF F0            [24] 3925 	mov	r7,b
                           001272  3926 	C$queue.c$1965$1_0$338 ==.
                                   3927 ;	src/FreeRTOS/queue.c:1965: uxReturn = pxQueue->uxMessagesWaiting;
      001272 74 24            [12] 3928 	mov	a,#0x24
      001274 2D               [12] 3929 	add	a,r5
      001275 FD               [12] 3930 	mov	r5,a
      001276 E4               [12] 3931 	clr	a
      001277 3E               [12] 3932 	addc	a,r6
      001278 FE               [12] 3933 	mov	r6,a
      001279 8D 82            [24] 3934 	mov	dpl,r5
      00127B 8E 83            [24] 3935 	mov	dph,r6
      00127D 8F F0            [24] 3936 	mov	b,r7
      00127F 12r00r00         [24] 3937 	lcall	__gptrget
                           001282  3938 	C$queue.c$1967$1_0$338 ==.
                                   3939 ;	src/FreeRTOS/queue.c:1967: return uxReturn;
                           001282  3940 	C$queue.c$1968$1_0$338 ==.
                                   3941 ;	src/FreeRTOS/queue.c:1968: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
                           001282  3942 	C$queue.c$1968$1_0$338 ==.
                           001282  3943 	XG$uxQueueMessagesWaitingFromISR$0$0 ==.
      001282 F5 82            [12] 3944 	mov	dpl,a
      001284 22               [24] 3945 	ret
                                   3946 ;------------------------------------------------------------
                                   3947 ;Allocation info for local variables in function 'vQueueDelete'
                                   3948 ;------------------------------------------------------------
                                   3949 ;xQueue                    Allocated to registers r5 r6 r7 
                                   3950 ;pxQueue                   Allocated to registers r5 r6 r7 
                                   3951 ;------------------------------------------------------------
                           001285  3952 	G$vQueueDelete$0$0 ==.
                           001285  3953 	C$queue.c$1971$1_0$340 ==.
                                   3954 ;	src/FreeRTOS/queue.c:1971: void vQueueDelete( QueueHandle_t xQueue )
                                   3955 ;	-----------------------------------------
                                   3956 ;	 function vQueueDelete
                                   3957 ;	-----------------------------------------
      001285                       3958 _vQueueDelete:
                           001285  3959 	C$queue.c$1973$2_0$340 ==.
                                   3960 ;	src/FreeRTOS/queue.c:1973: Queue_t * const pxQueue = xQueue;
                           001285  3961 	C$queue.c$1988$2_0$341 ==.
                                   3962 ;	src/FreeRTOS/queue.c:1988: vPortFree( pxQueue );
      001285 12r00r00         [24] 3963 	lcall	_vPortFree
                           001288  3964 	C$queue.c$2010$2_0$340 ==.
                                   3965 ;	src/FreeRTOS/queue.c:2010: }
                           001288  3966 	C$queue.c$2010$2_0$340 ==.
                           001288  3967 	XG$vQueueDelete$0$0 ==.
      001288 22               [24] 3968 	ret
                                   3969 ;------------------------------------------------------------
                                   3970 ;Allocation info for local variables in function 'prvCopyDataToQueue'
                                   3971 ;------------------------------------------------------------
                                   3972 ;pvItemToQueue             Allocated to stack - _bp -5
                                   3973 ;xPosition                 Allocated to stack - _bp -6
                                   3974 ;pxQueue                   Allocated to stack - _bp +1
                                   3975 ;xReturn                   Allocated to registers 
                                   3976 ;uxMessagesWaiting         Allocated to stack - _bp +13
                                   3977 ;sloc0                     Allocated to stack - _bp +4
                                   3978 ;sloc1                     Allocated to stack - _bp +7
                                   3979 ;sloc2                     Allocated to stack - _bp +10
                                   3980 ;------------------------------------------------------------
                           001289  3981 	Fqueue$prvCopyDataToQueue$0$0 ==.
                           001289  3982 	C$queue.c$2070$2_0$343 ==.
                                   3983 ;	src/FreeRTOS/queue.c:2070: static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
                                   3984 ;	-----------------------------------------
                                   3985 ;	 function prvCopyDataToQueue
                                   3986 ;	-----------------------------------------
      001289                       3987 _prvCopyDataToQueue:
      001289 C0*00            [24] 3988 	push	_bp
      00128B 85 81*00         [24] 3989 	mov	_bp,sp
      00128E C0 82            [24] 3990 	push	dpl
      001290 C0 83            [24] 3991 	push	dph
      001292 C0 F0            [24] 3992 	push	b
      001294 E5 81            [12] 3993 	mov	a,sp
      001296 24 0A            [12] 3994 	add	a,#0x0a
      001298 F5 81            [12] 3995 	mov	sp,a
                           00129A  3996 	C$queue.c$2077$1_0$343 ==.
                                   3997 ;	src/FreeRTOS/queue.c:2077: uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      00129A A8*00            [24] 3998 	mov	r0,_bp
      00129C 08               [12] 3999 	inc	r0
      00129D 74 24            [12] 4000 	mov	a,#0x24
      00129F 26               [12] 4001 	add	a,@r0
      0012A0 FA               [12] 4002 	mov	r2,a
      0012A1 E4               [12] 4003 	clr	a
      0012A2 08               [12] 4004 	inc	r0
      0012A3 36               [12] 4005 	addc	a,@r0
      0012A4 FB               [12] 4006 	mov	r3,a
      0012A5 08               [12] 4007 	inc	r0
      0012A6 86 04            [24] 4008 	mov	ar4,@r0
      0012A8 8A 82            [24] 4009 	mov	dpl,r2
      0012AA 8B 83            [24] 4010 	mov	dph,r3
      0012AC 8C F0            [24] 4011 	mov	b,r4
      0012AE E5*00            [12] 4012 	mov	a,_bp
      0012B0 24 0D            [12] 4013 	add	a,#0x0d
      0012B2 F8               [12] 4014 	mov	r0,a
      0012B3 12r00r00         [24] 4015 	lcall	__gptrget
      0012B6 F6               [12] 4016 	mov	@r0,a
                           0012B7  4017 	C$queue.c$2079$1_0$343 ==.
                                   4018 ;	src/FreeRTOS/queue.c:2079: if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
      0012B7 A8*00            [24] 4019 	mov	r0,_bp
      0012B9 08               [12] 4020 	inc	r0
      0012BA E5*00            [12] 4021 	mov	a,_bp
      0012BC 24 04            [12] 4022 	add	a,#0x04
      0012BE F9               [12] 4023 	mov	r1,a
      0012BF 74 26            [12] 4024 	mov	a,#0x26
      0012C1 26               [12] 4025 	add	a,@r0
      0012C2 F7               [12] 4026 	mov	@r1,a
      0012C3 E4               [12] 4027 	clr	a
      0012C4 08               [12] 4028 	inc	r0
      0012C5 36               [12] 4029 	addc	a,@r0
      0012C6 09               [12] 4030 	inc	r1
      0012C7 F7               [12] 4031 	mov	@r1,a
      0012C8 08               [12] 4032 	inc	r0
      0012C9 09               [12] 4033 	inc	r1
      0012CA E6               [12] 4034 	mov	a,@r0
      0012CB F7               [12] 4035 	mov	@r1,a
      0012CC E5*00            [12] 4036 	mov	a,_bp
      0012CE 24 04            [12] 4037 	add	a,#0x04
      0012D0 F8               [12] 4038 	mov	r0,a
      0012D1 86 82            [24] 4039 	mov	dpl,@r0
      0012D3 08               [12] 4040 	inc	r0
      0012D4 86 83            [24] 4041 	mov	dph,@r0
      0012D6 08               [12] 4042 	inc	r0
      0012D7 86 F0            [24] 4043 	mov	b,@r0
      0012D9 12r00r00         [24] 4044 	lcall	__gptrget
      0012DC FE               [12] 4045 	mov	r6,a
      0012DD 70 03            [24] 4046 	jnz	00141$
      0012DF 02r15rB5         [24] 4047 	ljmp	00114$
      0012E2                       4048 00141$:
                           0012E2  4049 	C$queue.c$2096$1_0$343 ==.
                                   4050 ;	src/FreeRTOS/queue.c:2096: else if( xPosition == queueSEND_TO_BACK )
      0012E2 E5*00            [12] 4051 	mov	a,_bp
      0012E4 24 FA            [12] 4052 	add	a,#0xfa
      0012E6 F8               [12] 4053 	mov	r0,a
      0012E7 E6               [12] 4054 	mov	a,@r0
      0012E8 60 03            [24] 4055 	jz	00142$
      0012EA 02r14r3F         [24] 4056 	ljmp	00110$
      0012ED                       4057 00142$:
                           0012ED  4058 	C$queue.c$2098$1_0$343 ==.
                                   4059 ;	src/FreeRTOS/queue.c:2098: ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
      0012ED C0 02            [24] 4060 	push	ar2
      0012EF C0 03            [24] 4061 	push	ar3
      0012F1 C0 04            [24] 4062 	push	ar4
      0012F3 8E 04            [24] 4063 	mov	ar4,r6
      0012F5 7D 00            [12] 4064 	mov	r5,#0x00
      0012F7 A8*00            [24] 4065 	mov	r0,_bp
      0012F9 08               [12] 4066 	inc	r0
      0012FA E5*00            [12] 4067 	mov	a,_bp
      0012FC 24 07            [12] 4068 	add	a,#0x07
      0012FE F9               [12] 4069 	mov	r1,a
      0012FF 74 03            [12] 4070 	mov	a,#0x03
      001301 26               [12] 4071 	add	a,@r0
      001302 F7               [12] 4072 	mov	@r1,a
      001303 E4               [12] 4073 	clr	a
      001304 08               [12] 4074 	inc	r0
      001305 36               [12] 4075 	addc	a,@r0
      001306 09               [12] 4076 	inc	r1
      001307 F7               [12] 4077 	mov	@r1,a
      001308 08               [12] 4078 	inc	r0
      001309 09               [12] 4079 	inc	r1
      00130A E6               [12] 4080 	mov	a,@r0
      00130B F7               [12] 4081 	mov	@r1,a
      00130C E5*00            [12] 4082 	mov	a,_bp
      00130E 24 07            [12] 4083 	add	a,#0x07
      001310 F8               [12] 4084 	mov	r0,a
      001311 86 82            [24] 4085 	mov	dpl,@r0
      001313 08               [12] 4086 	inc	r0
      001314 86 83            [24] 4087 	mov	dph,@r0
      001316 08               [12] 4088 	inc	r0
      001317 86 F0            [24] 4089 	mov	b,@r0
      001319 12r00r00         [24] 4090 	lcall	__gptrget
      00131C FA               [12] 4091 	mov	r2,a
      00131D A3               [24] 4092 	inc	dptr
      00131E 12r00r00         [24] 4093 	lcall	__gptrget
      001321 FB               [12] 4094 	mov	r3,a
      001322 A3               [24] 4095 	inc	dptr
      001323 12r00r00         [24] 4096 	lcall	__gptrget
      001326 FF               [12] 4097 	mov	r7,a
      001327 C0 04            [24] 4098 	push	ar4
      001329 C0 03            [24] 4099 	push	ar3
      00132B C0 02            [24] 4100 	push	ar2
      00132D C0 04            [24] 4101 	push	ar4
      00132F C0 05            [24] 4102 	push	ar5
      001331 E5*00            [12] 4103 	mov	a,_bp
      001333 24 FB            [12] 4104 	add	a,#0xfb
      001335 F8               [12] 4105 	mov	r0,a
      001336 E6               [12] 4106 	mov	a,@r0
      001337 C0 E0            [24] 4107 	push	acc
      001339 08               [12] 4108 	inc	r0
      00133A E6               [12] 4109 	mov	a,@r0
      00133B C0 E0            [24] 4110 	push	acc
      00133D 08               [12] 4111 	inc	r0
      00133E E6               [12] 4112 	mov	a,@r0
      00133F C0 E0            [24] 4113 	push	acc
      001341 8A 82            [24] 4114 	mov	dpl,r2
      001343 8B 83            [24] 4115 	mov	dph,r3
      001345 8F F0            [24] 4116 	mov	b,r7
      001347 12r00r00         [24] 4117 	lcall	_memcpy
      00134A E5 81            [12] 4118 	mov	a,sp
      00134C 24 FB            [12] 4119 	add	a,#0xfb
      00134E F5 81            [12] 4120 	mov	sp,a
      001350 D0 02            [24] 4121 	pop	ar2
      001352 D0 03            [24] 4122 	pop	ar3
      001354 D0 04            [24] 4123 	pop	ar4
                           001356  4124 	C$queue.c$2099$2_0$345 ==.
                                   4125 ;	src/FreeRTOS/queue.c:2099: pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
      001356 E5*00            [12] 4126 	mov	a,_bp
      001358 24 07            [12] 4127 	add	a,#0x07
      00135A F8               [12] 4128 	mov	r0,a
      00135B 86 82            [24] 4129 	mov	dpl,@r0
      00135D 08               [12] 4130 	inc	r0
      00135E 86 83            [24] 4131 	mov	dph,@r0
      001360 08               [12] 4132 	inc	r0
      001361 86 F0            [24] 4133 	mov	b,@r0
      001363 12r00r00         [24] 4134 	lcall	__gptrget
      001366 FC               [12] 4135 	mov	r4,a
      001367 A3               [24] 4136 	inc	dptr
      001368 12r00r00         [24] 4137 	lcall	__gptrget
      00136B FD               [12] 4138 	mov	r5,a
      00136C A3               [24] 4139 	inc	dptr
      00136D 12r00r00         [24] 4140 	lcall	__gptrget
      001370 FF               [12] 4141 	mov	r7,a
      001371 E5*00            [12] 4142 	mov	a,_bp
      001373 24 04            [12] 4143 	add	a,#0x04
      001375 F8               [12] 4144 	mov	r0,a
      001376 86 82            [24] 4145 	mov	dpl,@r0
      001378 08               [12] 4146 	inc	r0
      001379 86 83            [24] 4147 	mov	dph,@r0
      00137B 08               [12] 4148 	inc	r0
      00137C 86 F0            [24] 4149 	mov	b,@r0
      00137E 12r00r00         [24] 4150 	lcall	__gptrget
      001381 FB               [12] 4151 	mov	r3,a
      001382 E5*00            [12] 4152 	mov	a,_bp
      001384 24 0A            [12] 4153 	add	a,#0x0a
      001386 F8               [12] 4154 	mov	r0,a
      001387 EB               [12] 4155 	mov	a,r3
      001388 2C               [12] 4156 	add	a,r4
      001389 F6               [12] 4157 	mov	@r0,a
      00138A E4               [12] 4158 	clr	a
      00138B 3D               [12] 4159 	addc	a,r5
      00138C 08               [12] 4160 	inc	r0
      00138D F6               [12] 4161 	mov	@r0,a
      00138E 08               [12] 4162 	inc	r0
      00138F A6 07            [24] 4163 	mov	@r0,ar7
      001391 E5*00            [12] 4164 	mov	a,_bp
      001393 24 07            [12] 4165 	add	a,#0x07
      001395 F8               [12] 4166 	mov	r0,a
      001396 86 82            [24] 4167 	mov	dpl,@r0
      001398 08               [12] 4168 	inc	r0
      001399 86 83            [24] 4169 	mov	dph,@r0
      00139B 08               [12] 4170 	inc	r0
      00139C 86 F0            [24] 4171 	mov	b,@r0
      00139E E5*00            [12] 4172 	mov	a,_bp
      0013A0 24 0A            [12] 4173 	add	a,#0x0a
      0013A2 F9               [12] 4174 	mov	r1,a
      0013A3 E7               [12] 4175 	mov	a,@r1
      0013A4 12r00r00         [24] 4176 	lcall	__gptrput
      0013A7 A3               [24] 4177 	inc	dptr
      0013A8 09               [12] 4178 	inc	r1
      0013A9 E7               [12] 4179 	mov	a,@r1
      0013AA 12r00r00         [24] 4180 	lcall	__gptrput
      0013AD A3               [24] 4181 	inc	dptr
      0013AE 09               [12] 4182 	inc	r1
      0013AF E7               [12] 4183 	mov	a,@r1
      0013B0 12r00r00         [24] 4184 	lcall	__gptrput
                           0013B3  4185 	C$queue.c$2100$2_0$345 ==.
                                   4186 ;	src/FreeRTOS/queue.c:2100: if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
      0013B3 A8*00            [24] 4187 	mov	r0,_bp
      0013B5 08               [12] 4188 	inc	r0
      0013B6 74 06            [12] 4189 	mov	a,#0x06
      0013B8 26               [12] 4190 	add	a,@r0
      0013B9 FA               [12] 4191 	mov	r2,a
      0013BA E4               [12] 4192 	clr	a
      0013BB 08               [12] 4193 	inc	r0
      0013BC 36               [12] 4194 	addc	a,@r0
      0013BD FB               [12] 4195 	mov	r3,a
      0013BE 08               [12] 4196 	inc	r0
      0013BF 86 07            [24] 4197 	mov	ar7,@r0
      0013C1 8A 82            [24] 4198 	mov	dpl,r2
      0013C3 8B 83            [24] 4199 	mov	dph,r3
      0013C5 8F F0            [24] 4200 	mov	b,r7
      0013C7 12r00r00         [24] 4201 	lcall	__gptrget
      0013CA FA               [12] 4202 	mov	r2,a
      0013CB A3               [24] 4203 	inc	dptr
      0013CC 12r00r00         [24] 4204 	lcall	__gptrget
      0013CF FB               [12] 4205 	mov	r3,a
      0013D0 A3               [24] 4206 	inc	dptr
      0013D1 12r00r00         [24] 4207 	lcall	__gptrget
      0013D4 FF               [12] 4208 	mov	r7,a
      0013D5 E5*00            [12] 4209 	mov	a,_bp
      0013D7 24 0A            [12] 4210 	add	a,#0x0a
      0013D9 F8               [12] 4211 	mov	r0,a
      0013DA C0 02            [24] 4212 	push	ar2
      0013DC C0 03            [24] 4213 	push	ar3
      0013DE C0 07            [24] 4214 	push	ar7
      0013E0 86 82            [24] 4215 	mov	dpl,@r0
      0013E2 08               [12] 4216 	inc	r0
      0013E3 86 83            [24] 4217 	mov	dph,@r0
      0013E5 08               [12] 4218 	inc	r0
      0013E6 86 F0            [24] 4219 	mov	b,@r0
      0013E8 12r00r00         [24] 4220 	lcall	___gptr_cmp
      0013EB 15 81            [12] 4221 	dec	sp
      0013ED 15 81            [12] 4222 	dec	sp
      0013EF 15 81            [12] 4223 	dec	sp
      0013F1 D0 04            [24] 4224 	pop	ar4
      0013F3 D0 03            [24] 4225 	pop	ar3
      0013F5 D0 02            [24] 4226 	pop	ar2
      0013F7 50 03            [24] 4227 	jnc	00143$
      0013F9 02r15rB5         [24] 4228 	ljmp	00114$
      0013FC                       4229 00143$:
                           0013FC  4230 	C$queue.c$2102$1_0$343 ==.
                                   4231 ;	src/FreeRTOS/queue.c:2102: pxQueue->pcWriteTo = pxQueue->pcHead;
      0013FC C0 02            [24] 4232 	push	ar2
      0013FE C0 03            [24] 4233 	push	ar3
      001400 C0 04            [24] 4234 	push	ar4
      001402 A8*00            [24] 4235 	mov	r0,_bp
      001404 08               [12] 4236 	inc	r0
      001405 86 82            [24] 4237 	mov	dpl,@r0
      001407 08               [12] 4238 	inc	r0
      001408 86 83            [24] 4239 	mov	dph,@r0
      00140A 08               [12] 4240 	inc	r0
      00140B 86 F0            [24] 4241 	mov	b,@r0
      00140D 12r00r00         [24] 4242 	lcall	__gptrget
      001410 FC               [12] 4243 	mov	r4,a
      001411 A3               [24] 4244 	inc	dptr
      001412 12r00r00         [24] 4245 	lcall	__gptrget
      001415 FD               [12] 4246 	mov	r5,a
      001416 A3               [24] 4247 	inc	dptr
      001417 12r00r00         [24] 4248 	lcall	__gptrget
      00141A FF               [12] 4249 	mov	r7,a
      00141B E5*00            [12] 4250 	mov	a,_bp
      00141D 24 07            [12] 4251 	add	a,#0x07
      00141F F8               [12] 4252 	mov	r0,a
      001420 86 82            [24] 4253 	mov	dpl,@r0
      001422 08               [12] 4254 	inc	r0
      001423 86 83            [24] 4255 	mov	dph,@r0
      001425 08               [12] 4256 	inc	r0
      001426 86 F0            [24] 4257 	mov	b,@r0
      001428 EC               [12] 4258 	mov	a,r4
      001429 12r00r00         [24] 4259 	lcall	__gptrput
      00142C A3               [24] 4260 	inc	dptr
      00142D ED               [12] 4261 	mov	a,r5
      00142E 12r00r00         [24] 4262 	lcall	__gptrput
      001431 A3               [24] 4263 	inc	dptr
      001432 EF               [12] 4264 	mov	a,r7
      001433 12r00r00         [24] 4265 	lcall	__gptrput
      001436 D0 04            [24] 4266 	pop	ar4
      001438 D0 03            [24] 4267 	pop	ar3
      00143A D0 02            [24] 4268 	pop	ar2
      00143C 02r15rB5         [24] 4269 	ljmp	00114$
      00143F                       4270 00110$:
                           00143F  4271 	C$queue.c$2111$1_0$343 ==.
                                   4272 ;	src/FreeRTOS/queue.c:2111: ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
      00143F C0 02            [24] 4273 	push	ar2
      001441 C0 03            [24] 4274 	push	ar3
      001443 C0 04            [24] 4275 	push	ar4
      001445 7F 00            [12] 4276 	mov	r7,#0x00
      001447 A8*00            [24] 4277 	mov	r0,_bp
      001449 08               [12] 4278 	inc	r0
      00144A E5*00            [12] 4279 	mov	a,_bp
      00144C 24 0A            [12] 4280 	add	a,#0x0a
      00144E F9               [12] 4281 	mov	r1,a
      00144F 74 06            [12] 4282 	mov	a,#0x06
      001451 26               [12] 4283 	add	a,@r0
      001452 F7               [12] 4284 	mov	@r1,a
      001453 E4               [12] 4285 	clr	a
      001454 08               [12] 4286 	inc	r0
      001455 36               [12] 4287 	addc	a,@r0
      001456 09               [12] 4288 	inc	r1
      001457 F7               [12] 4289 	mov	@r1,a
      001458 08               [12] 4290 	inc	r0
      001459 09               [12] 4291 	inc	r1
      00145A E6               [12] 4292 	mov	a,@r0
      00145B F7               [12] 4293 	mov	@r1,a
      00145C E5*00            [12] 4294 	mov	a,_bp
      00145E 24 0A            [12] 4295 	add	a,#0x0a
      001460 F8               [12] 4296 	mov	r0,a
      001461 E5*00            [12] 4297 	mov	a,_bp
      001463 24 07            [12] 4298 	add	a,#0x07
      001465 F9               [12] 4299 	mov	r1,a
      001466 74 03            [12] 4300 	mov	a,#0x03
      001468 26               [12] 4301 	add	a,@r0
      001469 F7               [12] 4302 	mov	@r1,a
      00146A E4               [12] 4303 	clr	a
      00146B 08               [12] 4304 	inc	r0
      00146C 36               [12] 4305 	addc	a,@r0
      00146D 09               [12] 4306 	inc	r1
      00146E F7               [12] 4307 	mov	@r1,a
      00146F 08               [12] 4308 	inc	r0
      001470 09               [12] 4309 	inc	r1
      001471 E6               [12] 4310 	mov	a,@r0
      001472 F7               [12] 4311 	mov	@r1,a
      001473 E5*00            [12] 4312 	mov	a,_bp
      001475 24 07            [12] 4313 	add	a,#0x07
      001477 F8               [12] 4314 	mov	r0,a
      001478 86 82            [24] 4315 	mov	dpl,@r0
      00147A 08               [12] 4316 	inc	r0
      00147B 86 83            [24] 4317 	mov	dph,@r0
      00147D 08               [12] 4318 	inc	r0
      00147E 86 F0            [24] 4319 	mov	b,@r0
      001480 12r00r00         [24] 4320 	lcall	__gptrget
      001483 FB               [12] 4321 	mov	r3,a
      001484 A3               [24] 4322 	inc	dptr
      001485 12r00r00         [24] 4323 	lcall	__gptrget
      001488 FC               [12] 4324 	mov	r4,a
      001489 A3               [24] 4325 	inc	dptr
      00148A 12r00r00         [24] 4326 	lcall	__gptrget
      00148D FD               [12] 4327 	mov	r5,a
      00148E C0 04            [24] 4328 	push	ar4
      001490 C0 03            [24] 4329 	push	ar3
      001492 C0 02            [24] 4330 	push	ar2
      001494 C0 06            [24] 4331 	push	ar6
      001496 C0 07            [24] 4332 	push	ar7
      001498 E5*00            [12] 4333 	mov	a,_bp
      00149A 24 FB            [12] 4334 	add	a,#0xfb
      00149C F8               [12] 4335 	mov	r0,a
      00149D E6               [12] 4336 	mov	a,@r0
      00149E C0 E0            [24] 4337 	push	acc
      0014A0 08               [12] 4338 	inc	r0
      0014A1 E6               [12] 4339 	mov	a,@r0
      0014A2 C0 E0            [24] 4340 	push	acc
      0014A4 08               [12] 4341 	inc	r0
      0014A5 E6               [12] 4342 	mov	a,@r0
      0014A6 C0 E0            [24] 4343 	push	acc
      0014A8 8B 82            [24] 4344 	mov	dpl,r3
      0014AA 8C 83            [24] 4345 	mov	dph,r4
      0014AC 8D F0            [24] 4346 	mov	b,r5
      0014AE 12r00r00         [24] 4347 	lcall	_memcpy
      0014B1 E5 81            [12] 4348 	mov	a,sp
      0014B3 24 FB            [12] 4349 	add	a,#0xfb
      0014B5 F5 81            [12] 4350 	mov	sp,a
      0014B7 D0 02            [24] 4351 	pop	ar2
      0014B9 D0 03            [24] 4352 	pop	ar3
      0014BB D0 04            [24] 4353 	pop	ar4
                           0014BD  4354 	C$queue.c$2112$2_0$348 ==.
                                   4355 ;	src/FreeRTOS/queue.c:2112: pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
      0014BD E5*00            [12] 4356 	mov	a,_bp
      0014BF 24 07            [12] 4357 	add	a,#0x07
      0014C1 F8               [12] 4358 	mov	r0,a
      0014C2 86 82            [24] 4359 	mov	dpl,@r0
      0014C4 08               [12] 4360 	inc	r0
      0014C5 86 83            [24] 4361 	mov	dph,@r0
      0014C7 08               [12] 4362 	inc	r0
      0014C8 86 F0            [24] 4363 	mov	b,@r0
      0014CA 12r00r00         [24] 4364 	lcall	__gptrget
      0014CD FD               [12] 4365 	mov	r5,a
      0014CE A3               [24] 4366 	inc	dptr
      0014CF 12r00r00         [24] 4367 	lcall	__gptrget
      0014D2 FE               [12] 4368 	mov	r6,a
      0014D3 A3               [24] 4369 	inc	dptr
      0014D4 12r00r00         [24] 4370 	lcall	__gptrget
      0014D7 FF               [12] 4371 	mov	r7,a
      0014D8 E5*00            [12] 4372 	mov	a,_bp
      0014DA 24 04            [12] 4373 	add	a,#0x04
      0014DC F8               [12] 4374 	mov	r0,a
      0014DD 86 82            [24] 4375 	mov	dpl,@r0
      0014DF 08               [12] 4376 	inc	r0
      0014E0 86 83            [24] 4377 	mov	dph,@r0
      0014E2 08               [12] 4378 	inc	r0
      0014E3 86 F0            [24] 4379 	mov	b,@r0
      0014E5 12r00r00         [24] 4380 	lcall	__gptrget
      0014E8 FC               [12] 4381 	mov	r4,a
      0014E9 7B 00            [12] 4382 	mov	r3,#0x00
      0014EB ED               [12] 4383 	mov	a,r5
      0014EC C3               [12] 4384 	clr	c
      0014ED 9C               [12] 4385 	subb	a,r4
      0014EE FD               [12] 4386 	mov	r5,a
      0014EF EE               [12] 4387 	mov	a,r6
      0014F0 9B               [12] 4388 	subb	a,r3
      0014F1 FE               [12] 4389 	mov	r6,a
      0014F2 E5*00            [12] 4390 	mov	a,_bp
      0014F4 24 07            [12] 4391 	add	a,#0x07
      0014F6 F8               [12] 4392 	mov	r0,a
      0014F7 86 82            [24] 4393 	mov	dpl,@r0
      0014F9 08               [12] 4394 	inc	r0
      0014FA 86 83            [24] 4395 	mov	dph,@r0
      0014FC 08               [12] 4396 	inc	r0
      0014FD 86 F0            [24] 4397 	mov	b,@r0
      0014FF ED               [12] 4398 	mov	a,r5
      001500 12r00r00         [24] 4399 	lcall	__gptrput
      001503 A3               [24] 4400 	inc	dptr
      001504 EE               [12] 4401 	mov	a,r6
      001505 12r00r00         [24] 4402 	lcall	__gptrput
      001508 A3               [24] 4403 	inc	dptr
      001509 EF               [12] 4404 	mov	a,r7
      00150A 12r00r00         [24] 4405 	lcall	__gptrput
                           00150D  4406 	C$queue.c$2113$2_0$348 ==.
                                   4407 ;	src/FreeRTOS/queue.c:2113: if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
      00150D A8*00            [24] 4408 	mov	r0,_bp
      00150F 08               [12] 4409 	inc	r0
      001510 86 82            [24] 4410 	mov	dpl,@r0
      001512 08               [12] 4411 	inc	r0
      001513 86 83            [24] 4412 	mov	dph,@r0
      001515 08               [12] 4413 	inc	r0
      001516 86 F0            [24] 4414 	mov	b,@r0
      001518 12r00r00         [24] 4415 	lcall	__gptrget
      00151B FA               [12] 4416 	mov	r2,a
      00151C A3               [24] 4417 	inc	dptr
      00151D 12r00r00         [24] 4418 	lcall	__gptrget
      001520 FB               [12] 4419 	mov	r3,a
      001521 A3               [24] 4420 	inc	dptr
      001522 12r00r00         [24] 4421 	lcall	__gptrget
      001525 FC               [12] 4422 	mov	r4,a
      001526 C0 02            [24] 4423 	push	ar2
      001528 C0 03            [24] 4424 	push	ar3
      00152A C0 04            [24] 4425 	push	ar4
      00152C 8D 82            [24] 4426 	mov	dpl,r5
      00152E 8E 83            [24] 4427 	mov	dph,r6
      001530 8F F0            [24] 4428 	mov	b,r7
      001532 12r00r00         [24] 4429 	lcall	___gptr_cmp
      001535 15 81            [12] 4430 	dec	sp
      001537 15 81            [12] 4431 	dec	sp
      001539 15 81            [12] 4432 	dec	sp
      00153B D0 04            [24] 4433 	pop	ar4
      00153D D0 03            [24] 4434 	pop	ar3
      00153F D0 02            [24] 4435 	pop	ar2
      001541 50 5C            [24] 4436 	jnc	00104$
                           001543  4437 	C$queue.c$2115$1_0$343 ==.
                                   4438 ;	src/FreeRTOS/queue.c:2115: pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
      001543 C0 02            [24] 4439 	push	ar2
      001545 C0 03            [24] 4440 	push	ar3
      001547 C0 04            [24] 4441 	push	ar4
      001549 E5*00            [12] 4442 	mov	a,_bp
      00154B 24 0A            [12] 4443 	add	a,#0x0a
      00154D F8               [12] 4444 	mov	r0,a
      00154E 86 82            [24] 4445 	mov	dpl,@r0
      001550 08               [12] 4446 	inc	r0
      001551 86 83            [24] 4447 	mov	dph,@r0
      001553 08               [12] 4448 	inc	r0
      001554 86 F0            [24] 4449 	mov	b,@r0
      001556 12r00r00         [24] 4450 	lcall	__gptrget
      001559 FD               [12] 4451 	mov	r5,a
      00155A A3               [24] 4452 	inc	dptr
      00155B 12r00r00         [24] 4453 	lcall	__gptrget
      00155E FE               [12] 4454 	mov	r6,a
      00155F A3               [24] 4455 	inc	dptr
      001560 12r00r00         [24] 4456 	lcall	__gptrget
      001563 FF               [12] 4457 	mov	r7,a
      001564 E5*00            [12] 4458 	mov	a,_bp
      001566 24 04            [12] 4459 	add	a,#0x04
      001568 F8               [12] 4460 	mov	r0,a
      001569 86 82            [24] 4461 	mov	dpl,@r0
      00156B 08               [12] 4462 	inc	r0
      00156C 86 83            [24] 4463 	mov	dph,@r0
      00156E 08               [12] 4464 	inc	r0
      00156F 86 F0            [24] 4465 	mov	b,@r0
      001571 12r00r00         [24] 4466 	lcall	__gptrget
      001574 FC               [12] 4467 	mov	r4,a
      001575 7B 00            [12] 4468 	mov	r3,#0x00
      001577 ED               [12] 4469 	mov	a,r5
      001578 C3               [12] 4470 	clr	c
      001579 9C               [12] 4471 	subb	a,r4
      00157A FD               [12] 4472 	mov	r5,a
      00157B EE               [12] 4473 	mov	a,r6
      00157C 9B               [12] 4474 	subb	a,r3
      00157D FE               [12] 4475 	mov	r6,a
      00157E E5*00            [12] 4476 	mov	a,_bp
      001580 24 07            [12] 4477 	add	a,#0x07
      001582 F8               [12] 4478 	mov	r0,a
      001583 86 82            [24] 4479 	mov	dpl,@r0
      001585 08               [12] 4480 	inc	r0
      001586 86 83            [24] 4481 	mov	dph,@r0
      001588 08               [12] 4482 	inc	r0
      001589 86 F0            [24] 4483 	mov	b,@r0
      00158B ED               [12] 4484 	mov	a,r5
      00158C 12r00r00         [24] 4485 	lcall	__gptrput
      00158F A3               [24] 4486 	inc	dptr
      001590 EE               [12] 4487 	mov	a,r6
      001591 12r00r00         [24] 4488 	lcall	__gptrput
      001594 A3               [24] 4489 	inc	dptr
      001595 EF               [12] 4490 	mov	a,r7
      001596 12r00r00         [24] 4491 	lcall	__gptrput
                           001599  4492 	C$queue.c$2145$1_0$343 ==.
                                   4493 ;	src/FreeRTOS/queue.c:2145: return xReturn;
      001599 D0 04            [24] 4494 	pop	ar4
      00159B D0 03            [24] 4495 	pop	ar3
      00159D D0 02            [24] 4496 	pop	ar2
                           00159F  4497 	C$queue.c$2115$2_0$348 ==.
                                   4498 ;	src/FreeRTOS/queue.c:2115: pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
      00159F                       4499 00104$:
                           00159F  4500 	C$queue.c$2122$2_0$348 ==.
                                   4501 ;	src/FreeRTOS/queue.c:2122: if( xPosition == queueOVERWRITE )
      00159F E5*00            [12] 4502 	mov	a,_bp
      0015A1 24 FA            [12] 4503 	add	a,#0xfa
      0015A3 F8               [12] 4504 	mov	r0,a
      0015A4 B6 02 0E         [24] 4505 	cjne	@r0,#0x02,00114$
                           0015A7  4506 	C$queue.c$2124$3_0$351 ==.
                                   4507 ;	src/FreeRTOS/queue.c:2124: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
      0015A7 E5*00            [12] 4508 	mov	a,_bp
      0015A9 24 0D            [12] 4509 	add	a,#0x0d
      0015AB F8               [12] 4510 	mov	r0,a
      0015AC E6               [12] 4511 	mov	a,@r0
      0015AD 60 06            [24] 4512 	jz	00114$
                           0015AF  4513 	C$queue.c$2130$4_0$352 ==.
                                   4514 ;	src/FreeRTOS/queue.c:2130: --uxMessagesWaiting;
      0015AF E5*00            [12] 4515 	mov	a,_bp
      0015B1 24 0D            [12] 4516 	add	a,#0x0d
      0015B3 F8               [12] 4517 	mov	r0,a
      0015B4 16               [12] 4518 	dec	@r0
      0015B5                       4519 00114$:
                           0015B5  4520 	C$queue.c$2143$1_0$343 ==.
                                   4521 ;	src/FreeRTOS/queue.c:2143: pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
      0015B5 E5*00            [12] 4522 	mov	a,_bp
      0015B7 24 0D            [12] 4523 	add	a,#0x0d
      0015B9 F8               [12] 4524 	mov	r0,a
      0015BA E6               [12] 4525 	mov	a,@r0
      0015BB 04               [12] 4526 	inc	a
      0015BC 8A 82            [24] 4527 	mov	dpl,r2
      0015BE 8B 83            [24] 4528 	mov	dph,r3
      0015C0 8C F0            [24] 4529 	mov	b,r4
      0015C2 12r00r00         [24] 4530 	lcall	__gptrput
                           0015C5  4531 	C$queue.c$2145$1_0$343 ==.
                                   4532 ;	src/FreeRTOS/queue.c:2145: return xReturn;
      0015C5 75 82 00         [24] 4533 	mov	dpl,#0x00
                           0015C8  4534 	C$queue.c$2146$1_0$343 ==.
                                   4535 ;	src/FreeRTOS/queue.c:2146: }
      0015C8 85*00 81         [24] 4536 	mov	sp,_bp
      0015CB D0*00            [24] 4537 	pop	_bp
                           0015CD  4538 	C$queue.c$2146$1_0$343 ==.
                           0015CD  4539 	XFqueue$prvCopyDataToQueue$0$0 ==.
      0015CD 22               [24] 4540 	ret
                                   4541 ;------------------------------------------------------------
                                   4542 ;Allocation info for local variables in function 'prvCopyDataFromQueue'
                                   4543 ;------------------------------------------------------------
                                   4544 ;pvBuffer                  Allocated to stack - _bp -5
                                   4545 ;pxQueue                   Allocated to stack - _bp +1
                                   4546 ;sloc0                     Allocated to stack - _bp +4
                                   4547 ;sloc1                     Allocated to stack - _bp +5
                                   4548 ;------------------------------------------------------------
                           0015CE  4549 	Fqueue$prvCopyDataFromQueue$0$0 ==.
                           0015CE  4550 	C$queue.c$2149$1_0$356 ==.
                                   4551 ;	src/FreeRTOS/queue.c:2149: static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
                                   4552 ;	-----------------------------------------
                                   4553 ;	 function prvCopyDataFromQueue
                                   4554 ;	-----------------------------------------
      0015CE                       4555 _prvCopyDataFromQueue:
      0015CE C0*00            [24] 4556 	push	_bp
      0015D0 85 81*00         [24] 4557 	mov	_bp,sp
      0015D3 C0 82            [24] 4558 	push	dpl
      0015D5 C0 83            [24] 4559 	push	dph
      0015D7 C0 F0            [24] 4560 	push	b
      0015D9 E5 81            [12] 4561 	mov	a,sp
      0015DB 24 04            [12] 4562 	add	a,#0x04
      0015DD F5 81            [12] 4563 	mov	sp,a
                           0015DF  4564 	C$queue.c$2151$1_0$356 ==.
                                   4565 ;	src/FreeRTOS/queue.c:2151: if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
      0015DF A8*00            [24] 4566 	mov	r0,_bp
      0015E1 08               [12] 4567 	inc	r0
      0015E2 74 26            [12] 4568 	mov	a,#0x26
      0015E4 26               [12] 4569 	add	a,@r0
      0015E5 FA               [12] 4570 	mov	r2,a
      0015E6 E4               [12] 4571 	clr	a
      0015E7 08               [12] 4572 	inc	r0
      0015E8 36               [12] 4573 	addc	a,@r0
      0015E9 FB               [12] 4574 	mov	r3,a
      0015EA 08               [12] 4575 	inc	r0
      0015EB 86 04            [24] 4576 	mov	ar4,@r0
      0015ED 8A 82            [24] 4577 	mov	dpl,r2
      0015EF 8B 83            [24] 4578 	mov	dph,r3
      0015F1 8C F0            [24] 4579 	mov	b,r4
      0015F3 E5*00            [12] 4580 	mov	a,_bp
      0015F5 24 04            [12] 4581 	add	a,#0x04
      0015F7 F8               [12] 4582 	mov	r0,a
      0015F8 12r00r00         [24] 4583 	lcall	__gptrget
      0015FB F6               [12] 4584 	mov	@r0,a
      0015FC E5*00            [12] 4585 	mov	a,_bp
      0015FE 24 04            [12] 4586 	add	a,#0x04
      001600 F8               [12] 4587 	mov	r0,a
      001601 E6               [12] 4588 	mov	a,@r0
      001602 70 03            [24] 4589 	jnz	00115$
      001604 02r17r18         [24] 4590 	ljmp	00105$
      001607                       4591 00115$:
                           001607  4592 	C$queue.c$2153$1_0$356 ==.
                                   4593 ;	src/FreeRTOS/queue.c:2153: pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
      001607 C0 02            [24] 4594 	push	ar2
      001609 C0 03            [24] 4595 	push	ar3
      00160B C0 04            [24] 4596 	push	ar4
      00160D A8*00            [24] 4597 	mov	r0,_bp
      00160F 08               [12] 4598 	inc	r0
      001610 74 06            [12] 4599 	mov	a,#0x06
      001612 26               [12] 4600 	add	a,@r0
      001613 FA               [12] 4601 	mov	r2,a
      001614 E4               [12] 4602 	clr	a
      001615 08               [12] 4603 	inc	r0
      001616 36               [12] 4604 	addc	a,@r0
      001617 FB               [12] 4605 	mov	r3,a
      001618 08               [12] 4606 	inc	r0
      001619 86 04            [24] 4607 	mov	ar4,@r0
      00161B E5*00            [12] 4608 	mov	a,_bp
      00161D 24 05            [12] 4609 	add	a,#0x05
      00161F F8               [12] 4610 	mov	r0,a
      001620 74 03            [12] 4611 	mov	a,#0x03
      001622 2A               [12] 4612 	add	a,r2
      001623 F6               [12] 4613 	mov	@r0,a
      001624 E4               [12] 4614 	clr	a
      001625 3B               [12] 4615 	addc	a,r3
      001626 08               [12] 4616 	inc	r0
      001627 F6               [12] 4617 	mov	@r0,a
      001628 08               [12] 4618 	inc	r0
      001629 A6 04            [24] 4619 	mov	@r0,ar4
      00162B E5*00            [12] 4620 	mov	a,_bp
      00162D 24 05            [12] 4621 	add	a,#0x05
      00162F F8               [12] 4622 	mov	r0,a
      001630 86 82            [24] 4623 	mov	dpl,@r0
      001632 08               [12] 4624 	inc	r0
      001633 86 83            [24] 4625 	mov	dph,@r0
      001635 08               [12] 4626 	inc	r0
      001636 86 F0            [24] 4627 	mov	b,@r0
      001638 12r00r00         [24] 4628 	lcall	__gptrget
      00163B FD               [12] 4629 	mov	r5,a
      00163C A3               [24] 4630 	inc	dptr
      00163D 12r00r00         [24] 4631 	lcall	__gptrget
      001640 FE               [12] 4632 	mov	r6,a
      001641 A3               [24] 4633 	inc	dptr
      001642 12r00r00         [24] 4634 	lcall	__gptrget
      001645 FF               [12] 4635 	mov	r7,a
      001646 E5*00            [12] 4636 	mov	a,_bp
      001648 24 04            [12] 4637 	add	a,#0x04
      00164A F8               [12] 4638 	mov	r0,a
      00164B E6               [12] 4639 	mov	a,@r0
      00164C 2D               [12] 4640 	add	a,r5
      00164D FD               [12] 4641 	mov	r5,a
      00164E E4               [12] 4642 	clr	a
      00164F 3E               [12] 4643 	addc	a,r6
      001650 FE               [12] 4644 	mov	r6,a
      001651 E5*00            [12] 4645 	mov	a,_bp
      001653 24 05            [12] 4646 	add	a,#0x05
      001655 F8               [12] 4647 	mov	r0,a
      001656 86 82            [24] 4648 	mov	dpl,@r0
      001658 08               [12] 4649 	inc	r0
      001659 86 83            [24] 4650 	mov	dph,@r0
      00165B 08               [12] 4651 	inc	r0
      00165C 86 F0            [24] 4652 	mov	b,@r0
      00165E ED               [12] 4653 	mov	a,r5
      00165F 12r00r00         [24] 4654 	lcall	__gptrput
      001662 A3               [24] 4655 	inc	dptr
      001663 EE               [12] 4656 	mov	a,r6
      001664 12r00r00         [24] 4657 	lcall	__gptrput
      001667 A3               [24] 4658 	inc	dptr
      001668 EF               [12] 4659 	mov	a,r7
      001669 12r00r00         [24] 4660 	lcall	__gptrput
                           00166C  4661 	C$queue.c$2154$2_0$357 ==.
                                   4662 ;	src/FreeRTOS/queue.c:2154: if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
      00166C 8A 82            [24] 4663 	mov	dpl,r2
      00166E 8B 83            [24] 4664 	mov	dph,r3
      001670 8C F0            [24] 4665 	mov	b,r4
      001672 12r00r00         [24] 4666 	lcall	__gptrget
      001675 FA               [12] 4667 	mov	r2,a
      001676 A3               [24] 4668 	inc	dptr
      001677 12r00r00         [24] 4669 	lcall	__gptrget
      00167A FB               [12] 4670 	mov	r3,a
      00167B A3               [24] 4671 	inc	dptr
      00167C 12r00r00         [24] 4672 	lcall	__gptrget
      00167F FC               [12] 4673 	mov	r4,a
      001680 C0 02            [24] 4674 	push	ar2
      001682 C0 03            [24] 4675 	push	ar3
      001684 C0 04            [24] 4676 	push	ar4
      001686 8D 82            [24] 4677 	mov	dpl,r5
      001688 8E 83            [24] 4678 	mov	dph,r6
      00168A 8F F0            [24] 4679 	mov	b,r7
      00168C 12r00r00         [24] 4680 	lcall	___gptr_cmp
      00168F 15 81            [12] 4681 	dec	sp
      001691 15 81            [12] 4682 	dec	sp
      001693 15 81            [12] 4683 	dec	sp
      001695 D0 04            [24] 4684 	pop	ar4
      001697 D0 03            [24] 4685 	pop	ar3
      001699 D0 02            [24] 4686 	pop	ar2
      00169B 40 34            [24] 4687 	jc	00102$
                           00169D  4688 	C$queue.c$2156$3_0$358 ==.
                                   4689 ;	src/FreeRTOS/queue.c:2156: pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
      00169D A8*00            [24] 4690 	mov	r0,_bp
      00169F 08               [12] 4691 	inc	r0
      0016A0 86 82            [24] 4692 	mov	dpl,@r0
      0016A2 08               [12] 4693 	inc	r0
      0016A3 86 83            [24] 4694 	mov	dph,@r0
      0016A5 08               [12] 4695 	inc	r0
      0016A6 86 F0            [24] 4696 	mov	b,@r0
      0016A8 12r00r00         [24] 4697 	lcall	__gptrget
      0016AB FD               [12] 4698 	mov	r5,a
      0016AC A3               [24] 4699 	inc	dptr
      0016AD 12r00r00         [24] 4700 	lcall	__gptrget
      0016B0 FE               [12] 4701 	mov	r6,a
      0016B1 A3               [24] 4702 	inc	dptr
      0016B2 12r00r00         [24] 4703 	lcall	__gptrget
      0016B5 FF               [12] 4704 	mov	r7,a
      0016B6 E5*00            [12] 4705 	mov	a,_bp
      0016B8 24 05            [12] 4706 	add	a,#0x05
      0016BA F8               [12] 4707 	mov	r0,a
      0016BB 86 82            [24] 4708 	mov	dpl,@r0
      0016BD 08               [12] 4709 	inc	r0
      0016BE 86 83            [24] 4710 	mov	dph,@r0
      0016C0 08               [12] 4711 	inc	r0
      0016C1 86 F0            [24] 4712 	mov	b,@r0
      0016C3 ED               [12] 4713 	mov	a,r5
      0016C4 12r00r00         [24] 4714 	lcall	__gptrput
      0016C7 A3               [24] 4715 	inc	dptr
      0016C8 EE               [12] 4716 	mov	a,r6
      0016C9 12r00r00         [24] 4717 	lcall	__gptrput
      0016CC A3               [24] 4718 	inc	dptr
      0016CD EF               [12] 4719 	mov	a,r7
      0016CE 12r00r00         [24] 4720 	lcall	__gptrput
      0016D1                       4721 00102$:
                           0016D1  4722 	C$queue.c$2162$2_0$357 ==.
                                   4723 ;	src/FreeRTOS/queue.c:2162: ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
      0016D1 8A 82            [24] 4724 	mov	dpl,r2
      0016D3 8B 83            [24] 4725 	mov	dph,r3
      0016D5 8C F0            [24] 4726 	mov	b,r4
      0016D7 12r00r00         [24] 4727 	lcall	__gptrget
      0016DA FA               [12] 4728 	mov	r2,a
      0016DB 7F 00            [12] 4729 	mov	r7,#0x00
      0016DD E5*00            [12] 4730 	mov	a,_bp
      0016DF 24 05            [12] 4731 	add	a,#0x05
      0016E1 F8               [12] 4732 	mov	r0,a
      0016E2 86 82            [24] 4733 	mov	dpl,@r0
      0016E4 08               [12] 4734 	inc	r0
      0016E5 86 83            [24] 4735 	mov	dph,@r0
      0016E7 08               [12] 4736 	inc	r0
      0016E8 86 F0            [24] 4737 	mov	b,@r0
      0016EA 12r00r00         [24] 4738 	lcall	__gptrget
      0016ED FC               [12] 4739 	mov	r4,a
      0016EE A3               [24] 4740 	inc	dptr
      0016EF 12r00r00         [24] 4741 	lcall	__gptrget
      0016F2 FD               [12] 4742 	mov	r5,a
      0016F3 A3               [24] 4743 	inc	dptr
      0016F4 12r00r00         [24] 4744 	lcall	__gptrget
      0016F7 FE               [12] 4745 	mov	r6,a
      0016F8 C0 02            [24] 4746 	push	ar2
      0016FA C0 07            [24] 4747 	push	ar7
      0016FC C0 04            [24] 4748 	push	ar4
      0016FE C0 05            [24] 4749 	push	ar5
      001700 C0 06            [24] 4750 	push	ar6
      001702 E5*00            [12] 4751 	mov	a,_bp
      001704 24 FB            [12] 4752 	add	a,#0xfb
      001706 F8               [12] 4753 	mov	r0,a
      001707 86 82            [24] 4754 	mov	dpl,@r0
      001709 08               [12] 4755 	inc	r0
      00170A 86 83            [24] 4756 	mov	dph,@r0
      00170C 08               [12] 4757 	inc	r0
      00170D 86 F0            [24] 4758 	mov	b,@r0
      00170F 12r00r00         [24] 4759 	lcall	_memcpy
      001712 E5 81            [12] 4760 	mov	a,sp
      001714 24 FB            [12] 4761 	add	a,#0xfb
      001716 F5 81            [12] 4762 	mov	sp,a
      001718                       4763 00105$:
                           001718  4764 	C$queue.c$2164$1_0$356 ==.
                                   4765 ;	src/FreeRTOS/queue.c:2164: }
      001718 85*00 81         [24] 4766 	mov	sp,_bp
      00171B D0*00            [24] 4767 	pop	_bp
                           00171D  4768 	C$queue.c$2164$1_0$356 ==.
                           00171D  4769 	XFqueue$prvCopyDataFromQueue$0$0 ==.
      00171D 22               [24] 4770 	ret
                                   4771 ;------------------------------------------------------------
                                   4772 ;Allocation info for local variables in function 'prvUnlockQueue'
                                   4773 ;------------------------------------------------------------
                                   4774 ;pxQueue                   Allocated to stack - _bp +1
                                   4775 ;cTxLock                   Allocated to registers 
                                   4776 ;cRxLock                   Allocated to registers 
                                   4777 ;sloc0                     Allocated to stack - _bp +4
                                   4778 ;sloc1                     Allocated to stack - _bp +7
                                   4779 ;------------------------------------------------------------
                           00171E  4780 	Fqueue$prvUnlockQueue$0$0 ==.
                           00171E  4781 	C$queue.c$2167$1_0$361 ==.
                                   4782 ;	src/FreeRTOS/queue.c:2167: static void prvUnlockQueue( Queue_t * const pxQueue )
                                   4783 ;	-----------------------------------------
                                   4784 ;	 function prvUnlockQueue
                                   4785 ;	-----------------------------------------
      00171E                       4786 _prvUnlockQueue:
      00171E C0*00            [24] 4787 	push	_bp
      001720 85 81*00         [24] 4788 	mov	_bp,sp
      001723 C0 82            [24] 4789 	push	dpl
      001725 C0 83            [24] 4790 	push	dph
      001727 C0 F0            [24] 4791 	push	b
      001729 E5 81            [12] 4792 	mov	a,sp
      00172B 24 04            [12] 4793 	add	a,#0x04
      00172D F5 81            [12] 4794 	mov	sp,a
                           00172F  4795 	C$queue.c$2175$1_0$361 ==.
                                   4796 ;	src/FreeRTOS/queue.c:2175: taskENTER_CRITICAL();
      00172F C0 E0            [24] 4797 	push ACC 
      001731 C0 A8            [24] 4798 	push IE 
                                   4799 ;	assignBit
      001733 C2 AF            [12] 4800 	clr	_EA
                           001735  4801 	C$queue.c$2177$2_0$362 ==.
                                   4802 ;	src/FreeRTOS/queue.c:2177: int8_t cTxLock = pxQueue->cTxLock;
      001735 A8*00            [24] 4803 	mov	r0,_bp
      001737 08               [12] 4804 	inc	r0
      001738 74 28            [12] 4805 	mov	a,#0x28
      00173A 26               [12] 4806 	add	a,@r0
      00173B FA               [12] 4807 	mov	r2,a
      00173C E4               [12] 4808 	clr	a
      00173D 08               [12] 4809 	inc	r0
      00173E 36               [12] 4810 	addc	a,@r0
      00173F FB               [12] 4811 	mov	r3,a
      001740 08               [12] 4812 	inc	r0
      001741 86 04            [24] 4813 	mov	ar4,@r0
      001743 8A 82            [24] 4814 	mov	dpl,r2
      001745 8B 83            [24] 4815 	mov	dph,r3
      001747 8C F0            [24] 4816 	mov	b,r4
      001749 E5*00            [12] 4817 	mov	a,_bp
      00174B 24 07            [12] 4818 	add	a,#0x07
      00174D F8               [12] 4819 	mov	r0,a
      00174E 12r00r00         [24] 4820 	lcall	__gptrget
      001751 F6               [12] 4821 	mov	@r0,a
                           001752  4822 	C$queue.c$2180$4_0$364 ==.
                                   4823 ;	src/FreeRTOS/queue.c:2180: while( cTxLock > queueLOCKED_UNMODIFIED )
      001752 A8*00            [24] 4824 	mov	r0,_bp
      001754 08               [12] 4825 	inc	r0
      001755 E5*00            [12] 4826 	mov	a,_bp
      001757 24 04            [12] 4827 	add	a,#0x04
      001759 F9               [12] 4828 	mov	r1,a
      00175A 74 18            [12] 4829 	mov	a,#0x18
      00175C 26               [12] 4830 	add	a,@r0
      00175D F7               [12] 4831 	mov	@r1,a
      00175E E4               [12] 4832 	clr	a
      00175F 08               [12] 4833 	inc	r0
      001760 36               [12] 4834 	addc	a,@r0
      001761 09               [12] 4835 	inc	r1
      001762 F7               [12] 4836 	mov	@r1,a
      001763 08               [12] 4837 	inc	r0
      001764 09               [12] 4838 	inc	r1
      001765 E6               [12] 4839 	mov	a,@r0
      001766 F7               [12] 4840 	mov	@r1,a
      001767                       4841 00106$:
      001767 E5*00            [12] 4842 	mov	a,_bp
      001769 24 07            [12] 4843 	add	a,#0x07
      00176B F8               [12] 4844 	mov	r0,a
      00176C C3               [12] 4845 	clr	c
      00176D 74 80            [12] 4846 	mov	a,#(0x00 ^ 0x80)
      00176F 86 F0            [24] 4847 	mov	b,@r0
      001771 63 F0 80         [24] 4848 	xrl	b,#0x80
      001774 95 F0            [12] 4849 	subb	a,b
      001776 50 50            [24] 4850 	jnc	00108$
                           001778  4851 	C$queue.c$2228$4_0$364 ==.
                                   4852 ;	src/FreeRTOS/queue.c:2228: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      001778 E5*00            [12] 4853 	mov	a,_bp
      00177A 24 04            [12] 4854 	add	a,#0x04
      00177C F8               [12] 4855 	mov	r0,a
      00177D 86 82            [24] 4856 	mov	dpl,@r0
      00177F 08               [12] 4857 	inc	r0
      001780 86 83            [24] 4858 	mov	dph,@r0
      001782 08               [12] 4859 	inc	r0
      001783 86 F0            [24] 4860 	mov	b,@r0
      001785 12r00r00         [24] 4861 	lcall	__gptrget
      001788 60 3E            [24] 4862 	jz	00108$
                           00178A  4863 	C$queue.c$2230$5_0$365 ==.
                                   4864 ;	src/FreeRTOS/queue.c:2230: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      00178A A8*00            [24] 4865 	mov	r0,_bp
      00178C 08               [12] 4866 	inc	r0
      00178D 74 18            [12] 4867 	mov	a,#0x18
      00178F 26               [12] 4868 	add	a,@r0
      001790 FD               [12] 4869 	mov	r5,a
      001791 E4               [12] 4870 	clr	a
      001792 08               [12] 4871 	inc	r0
      001793 36               [12] 4872 	addc	a,@r0
      001794 FE               [12] 4873 	mov	r6,a
      001795 08               [12] 4874 	inc	r0
      001796 86 07            [24] 4875 	mov	ar7,@r0
      001798 8D 82            [24] 4876 	mov	dpl,r5
      00179A 8E 83            [24] 4877 	mov	dph,r6
      00179C 8F F0            [24] 4878 	mov	b,r7
      00179E C0 04            [24] 4879 	push	ar4
      0017A0 C0 03            [24] 4880 	push	ar3
      0017A2 C0 02            [24] 4881 	push	ar2
      0017A4 12r00r00         [24] 4882 	lcall	_xTaskRemoveFromEventList
      0017A7 E5 82            [12] 4883 	mov	a,dpl
      0017A9 D0 02            [24] 4884 	pop	ar2
      0017AB D0 03            [24] 4885 	pop	ar3
      0017AD D0 04            [24] 4886 	pop	ar4
      0017AF 60 0F            [24] 4887 	jz	00105$
                           0017B1  4888 	C$queue.c$2234$6_0$366 ==.
                                   4889 ;	src/FreeRTOS/queue.c:2234: vTaskMissedYield();
      0017B1 C0 04            [24] 4890 	push	ar4
      0017B3 C0 03            [24] 4891 	push	ar3
      0017B5 C0 02            [24] 4892 	push	ar2
      0017B7 12r00r00         [24] 4893 	lcall	_vTaskMissedYield
      0017BA D0 02            [24] 4894 	pop	ar2
      0017BC D0 03            [24] 4895 	pop	ar3
      0017BE D0 04            [24] 4896 	pop	ar4
                           0017C0  4897 	C$queue.c$2243$4_0$364 ==.
                                   4898 ;	src/FreeRTOS/queue.c:2243: break;
      0017C0                       4899 00105$:
                           0017C0  4900 	C$queue.c$2248$3_0$363 ==.
                                   4901 ;	src/FreeRTOS/queue.c:2248: --cTxLock;
      0017C0 E5*00            [12] 4902 	mov	a,_bp
      0017C2 24 07            [12] 4903 	add	a,#0x07
      0017C4 F8               [12] 4904 	mov	r0,a
      0017C5 16               [12] 4905 	dec	@r0
      0017C6 80 9F            [24] 4906 	sjmp	00106$
      0017C8                       4907 00108$:
                           0017C8  4908 	C$queue.c$2251$2_0$362 ==.
                                   4909 ;	src/FreeRTOS/queue.c:2251: pxQueue->cTxLock = queueUNLOCKED;
      0017C8 8A 82            [24] 4910 	mov	dpl,r2
      0017CA 8B 83            [24] 4911 	mov	dph,r3
      0017CC 8C F0            [24] 4912 	mov	b,r4
      0017CE 74 FF            [12] 4913 	mov	a,#0xff
      0017D0 12r00r00         [24] 4914 	lcall	__gptrput
                           0017D3  4915 	C$queue.c$2253$1_0$361 ==.
                                   4916 ;	src/FreeRTOS/queue.c:2253: taskEXIT_CRITICAL();
      0017D3 D0 E0            [24] 4917 	pop ACC 
      0017D5 53 E0 80         [24] 4918 	anl	_ACC,#0x80
      0017D8 E5 E0            [12] 4919 	mov	a,_ACC
      0017DA 42 A8            [12] 4920 	orl	_IE,a
      0017DC D0 E0            [24] 4921 	pop ACC 
                           0017DE  4922 	C$queue.c$2256$1_0$361 ==.
                                   4923 ;	src/FreeRTOS/queue.c:2256: taskENTER_CRITICAL();
      0017DE C0 E0            [24] 4924 	push ACC 
      0017E0 C0 A8            [24] 4925 	push IE 
                                   4926 ;	assignBit
      0017E2 C2 AF            [12] 4927 	clr	_EA
                           0017E4  4928 	C$queue.c$2258$2_0$369 ==.
                                   4929 ;	src/FreeRTOS/queue.c:2258: int8_t cRxLock = pxQueue->cRxLock;
      0017E4 A8*00            [24] 4930 	mov	r0,_bp
      0017E6 08               [12] 4931 	inc	r0
      0017E7 74 27            [12] 4932 	mov	a,#0x27
      0017E9 26               [12] 4933 	add	a,@r0
      0017EA FD               [12] 4934 	mov	r5,a
      0017EB E4               [12] 4935 	clr	a
      0017EC 08               [12] 4936 	inc	r0
      0017ED 36               [12] 4937 	addc	a,@r0
      0017EE FE               [12] 4938 	mov	r6,a
      0017EF 08               [12] 4939 	inc	r0
      0017F0 86 07            [24] 4940 	mov	ar7,@r0
      0017F2 8D 82            [24] 4941 	mov	dpl,r5
      0017F4 8E 83            [24] 4942 	mov	dph,r6
      0017F6 8F F0            [24] 4943 	mov	b,r7
      0017F8 12r00r00         [24] 4944 	lcall	__gptrget
      0017FB FC               [12] 4945 	mov	r4,a
                           0017FC  4946 	C$queue.c$2260$3_0$370 ==.
                                   4947 ;	src/FreeRTOS/queue.c:2260: while( cRxLock > queueLOCKED_UNMODIFIED )
      0017FC A8*00            [24] 4948 	mov	r0,_bp
      0017FE 08               [12] 4949 	inc	r0
      0017FF E5*00            [12] 4950 	mov	a,_bp
      001801 24 04            [12] 4951 	add	a,#0x04
      001803 F9               [12] 4952 	mov	r1,a
      001804 74 0C            [12] 4953 	mov	a,#0x0c
      001806 26               [12] 4954 	add	a,@r0
      001807 F7               [12] 4955 	mov	@r1,a
      001808 E4               [12] 4956 	clr	a
      001809 08               [12] 4957 	inc	r0
      00180A 36               [12] 4958 	addc	a,@r0
      00180B 09               [12] 4959 	inc	r1
      00180C F7               [12] 4960 	mov	@r1,a
      00180D 08               [12] 4961 	inc	r0
      00180E 09               [12] 4962 	inc	r1
      00180F E6               [12] 4963 	mov	a,@r0
      001810 F7               [12] 4964 	mov	@r1,a
      001811                       4965 00114$:
      001811 C3               [12] 4966 	clr	c
      001812 74 80            [12] 4967 	mov	a,#(0x00 ^ 0x80)
      001814 8C F0            [24] 4968 	mov	b,r4
      001816 63 F0 80         [24] 4969 	xrl	b,#0x80
      001819 95 F0            [12] 4970 	subb	a,b
      00181B 50 5F            [24] 4971 	jnc	00116$
                           00181D  4972 	C$queue.c$2262$3_0$370 ==.
                                   4973 ;	src/FreeRTOS/queue.c:2262: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      00181D E5*00            [12] 4974 	mov	a,_bp
      00181F 24 04            [12] 4975 	add	a,#0x04
      001821 F8               [12] 4976 	mov	r0,a
      001822 86 82            [24] 4977 	mov	dpl,@r0
      001824 08               [12] 4978 	inc	r0
      001825 86 83            [24] 4979 	mov	dph,@r0
      001827 08               [12] 4980 	inc	r0
      001828 86 F0            [24] 4981 	mov	b,@r0
      00182A 12r00r00         [24] 4982 	lcall	__gptrget
      00182D 60 4D            [24] 4983 	jz	00116$
                           00182F  4984 	C$queue.c$2264$1_0$361 ==.
                                   4985 ;	src/FreeRTOS/queue.c:2264: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      00182F C0 05            [24] 4986 	push	ar5
      001831 C0 06            [24] 4987 	push	ar6
      001833 C0 07            [24] 4988 	push	ar7
      001835 A8*00            [24] 4989 	mov	r0,_bp
      001837 08               [12] 4990 	inc	r0
      001838 74 0C            [12] 4991 	mov	a,#0x0c
      00183A 26               [12] 4992 	add	a,@r0
      00183B FA               [12] 4993 	mov	r2,a
      00183C E4               [12] 4994 	clr	a
      00183D 08               [12] 4995 	inc	r0
      00183E 36               [12] 4996 	addc	a,@r0
      00183F FB               [12] 4997 	mov	r3,a
      001840 08               [12] 4998 	inc	r0
      001841 86 07            [24] 4999 	mov	ar7,@r0
      001843 8A 82            [24] 5000 	mov	dpl,r2
      001845 8B 83            [24] 5001 	mov	dph,r3
      001847 8F F0            [24] 5002 	mov	b,r7
      001849 C0 07            [24] 5003 	push	ar7
      00184B C0 06            [24] 5004 	push	ar6
      00184D C0 05            [24] 5005 	push	ar5
      00184F C0 04            [24] 5006 	push	ar4
      001851 12r00r00         [24] 5007 	lcall	_xTaskRemoveFromEventList
      001854 E5 82            [12] 5008 	mov	a,dpl
      001856 D0 04            [24] 5009 	pop	ar4
      001858 D0 05            [24] 5010 	pop	ar5
      00185A D0 06            [24] 5011 	pop	ar6
      00185C D0 07            [24] 5012 	pop	ar7
      00185E D0 07            [24] 5013 	pop	ar7
      001860 D0 06            [24] 5014 	pop	ar6
      001862 D0 05            [24] 5015 	pop	ar5
      001864 60 13            [24] 5016 	jz	00110$
                           001866  5017 	C$queue.c$2266$5_0$372 ==.
                                   5018 ;	src/FreeRTOS/queue.c:2266: vTaskMissedYield();
      001866 C0 07            [24] 5019 	push	ar7
      001868 C0 06            [24] 5020 	push	ar6
      00186A C0 05            [24] 5021 	push	ar5
      00186C C0 04            [24] 5022 	push	ar4
      00186E 12r00r00         [24] 5023 	lcall	_vTaskMissedYield
      001871 D0 04            [24] 5024 	pop	ar4
      001873 D0 05            [24] 5025 	pop	ar5
      001875 D0 06            [24] 5026 	pop	ar6
      001877 D0 07            [24] 5027 	pop	ar7
      001879                       5028 00110$:
                           001879  5029 	C$queue.c$2273$4_0$371 ==.
                                   5030 ;	src/FreeRTOS/queue.c:2273: --cRxLock;
      001879 1C               [12] 5031 	dec	r4
                           00187A  5032 	C$queue.c$2277$2_0$369 ==.
                                   5033 ;	src/FreeRTOS/queue.c:2277: break;
      00187A 80 95            [24] 5034 	sjmp	00114$
      00187C                       5035 00116$:
                           00187C  5036 	C$queue.c$2281$2_0$369 ==.
                                   5037 ;	src/FreeRTOS/queue.c:2281: pxQueue->cRxLock = queueUNLOCKED;
      00187C 8D 82            [24] 5038 	mov	dpl,r5
      00187E 8E 83            [24] 5039 	mov	dph,r6
      001880 8F F0            [24] 5040 	mov	b,r7
      001882 74 FF            [12] 5041 	mov	a,#0xff
      001884 12r00r00         [24] 5042 	lcall	__gptrput
                           001887  5043 	C$queue.c$2283$1_0$361 ==.
                                   5044 ;	src/FreeRTOS/queue.c:2283: taskEXIT_CRITICAL();
      001887 D0 E0            [24] 5045 	pop ACC 
      001889 53 E0 80         [24] 5046 	anl	_ACC,#0x80
      00188C E5 E0            [12] 5047 	mov	a,_ACC
      00188E 42 A8            [12] 5048 	orl	_IE,a
      001890 D0 E0            [24] 5049 	pop ACC 
                           001892  5050 	C$queue.c$2284$1_0$361 ==.
                                   5051 ;	src/FreeRTOS/queue.c:2284: }
      001892 85*00 81         [24] 5052 	mov	sp,_bp
      001895 D0*00            [24] 5053 	pop	_bp
                           001897  5054 	C$queue.c$2284$1_0$361 ==.
                           001897  5055 	XFqueue$prvUnlockQueue$0$0 ==.
      001897 22               [24] 5056 	ret
                                   5057 ;------------------------------------------------------------
                                   5058 ;Allocation info for local variables in function 'prvIsQueueEmpty'
                                   5059 ;------------------------------------------------------------
                                   5060 ;pxQueue                   Allocated to registers r5 r6 r7 
                                   5061 ;xReturn                   Allocated to registers r7 
                                   5062 ;------------------------------------------------------------
                           001898  5063 	Fqueue$prvIsQueueEmpty$0$0 ==.
                           001898  5064 	C$queue.c$2287$1_0$376 ==.
                                   5065 ;	src/FreeRTOS/queue.c:2287: static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
                                   5066 ;	-----------------------------------------
                                   5067 ;	 function prvIsQueueEmpty
                                   5068 ;	-----------------------------------------
      001898                       5069 _prvIsQueueEmpty:
      001898 AD 82            [24] 5070 	mov	r5,dpl
      00189A AE 83            [24] 5071 	mov	r6,dph
      00189C AF F0            [24] 5072 	mov	r7,b
                           00189E  5073 	C$queue.c$2291$1_0$376 ==.
                                   5074 ;	src/FreeRTOS/queue.c:2291: taskENTER_CRITICAL();
      00189E C0 E0            [24] 5075 	push ACC 
      0018A0 C0 A8            [24] 5076 	push IE 
                                   5077 ;	assignBit
      0018A2 C2 AF            [12] 5078 	clr	_EA
                           0018A4  5079 	C$queue.c$2293$2_0$377 ==.
                                   5080 ;	src/FreeRTOS/queue.c:2293: if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
      0018A4 74 24            [12] 5081 	mov	a,#0x24
      0018A6 2D               [12] 5082 	add	a,r5
      0018A7 FD               [12] 5083 	mov	r5,a
      0018A8 E4               [12] 5084 	clr	a
      0018A9 3E               [12] 5085 	addc	a,r6
      0018AA FE               [12] 5086 	mov	r6,a
      0018AB 8D 82            [24] 5087 	mov	dpl,r5
      0018AD 8E 83            [24] 5088 	mov	dph,r6
      0018AF 8F F0            [24] 5089 	mov	b,r7
      0018B1 12r00r00         [24] 5090 	lcall	__gptrget
      0018B4 70 04            [24] 5091 	jnz	00102$
                           0018B6  5092 	C$queue.c$2295$3_0$378 ==.
                                   5093 ;	src/FreeRTOS/queue.c:2295: xReturn = pdTRUE;
      0018B6 7F 01            [12] 5094 	mov	r7,#0x01
      0018B8 80 02            [24] 5095 	sjmp	00103$
      0018BA                       5096 00102$:
                           0018BA  5097 	C$queue.c$2299$3_0$379 ==.
                                   5098 ;	src/FreeRTOS/queue.c:2299: xReturn = pdFALSE;
      0018BA 7F 00            [12] 5099 	mov	r7,#0x00
      0018BC                       5100 00103$:
                           0018BC  5101 	C$queue.c$2302$1_0$376 ==.
                                   5102 ;	src/FreeRTOS/queue.c:2302: taskEXIT_CRITICAL();
      0018BC D0 E0            [24] 5103 	pop ACC 
      0018BE 53 E0 80         [24] 5104 	anl	_ACC,#0x80
      0018C1 E5 E0            [12] 5105 	mov	a,_ACC
      0018C3 42 A8            [12] 5106 	orl	_IE,a
      0018C5 D0 E0            [24] 5107 	pop ACC 
                           0018C7  5108 	C$queue.c$2304$1_0$376 ==.
                                   5109 ;	src/FreeRTOS/queue.c:2304: return xReturn;
      0018C7 8F 82            [24] 5110 	mov	dpl,r7
                           0018C9  5111 	C$queue.c$2305$1_0$376 ==.
                                   5112 ;	src/FreeRTOS/queue.c:2305: }
                           0018C9  5113 	C$queue.c$2305$1_0$376 ==.
                           0018C9  5114 	XFqueue$prvIsQueueEmpty$0$0 ==.
      0018C9 22               [24] 5115 	ret
                                   5116 ;------------------------------------------------------------
                                   5117 ;Allocation info for local variables in function 'xQueueIsQueueEmptyFromISR'
                                   5118 ;------------------------------------------------------------
                                   5119 ;xQueue                    Allocated to registers r5 r6 r7 
                                   5120 ;xReturn                   Allocated to registers r7 
                                   5121 ;pxQueue                   Allocated to registers 
                                   5122 ;------------------------------------------------------------
                           0018CA  5123 	G$xQueueIsQueueEmptyFromISR$0$0 ==.
                           0018CA  5124 	C$queue.c$2308$1_0$381 ==.
                                   5125 ;	src/FreeRTOS/queue.c:2308: BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
                                   5126 ;	-----------------------------------------
                                   5127 ;	 function xQueueIsQueueEmptyFromISR
                                   5128 ;	-----------------------------------------
      0018CA                       5129 _xQueueIsQueueEmptyFromISR:
      0018CA AD 82            [24] 5130 	mov	r5,dpl
      0018CC AE 83            [24] 5131 	mov	r6,dph
      0018CE AF F0            [24] 5132 	mov	r7,b
                           0018D0  5133 	C$queue.c$2314$1_0$381 ==.
                                   5134 ;	src/FreeRTOS/queue.c:2314: if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
      0018D0 74 24            [12] 5135 	mov	a,#0x24
      0018D2 2D               [12] 5136 	add	a,r5
      0018D3 FD               [12] 5137 	mov	r5,a
      0018D4 E4               [12] 5138 	clr	a
      0018D5 3E               [12] 5139 	addc	a,r6
      0018D6 FE               [12] 5140 	mov	r6,a
      0018D7 8D 82            [24] 5141 	mov	dpl,r5
      0018D9 8E 83            [24] 5142 	mov	dph,r6
      0018DB 8F F0            [24] 5143 	mov	b,r7
      0018DD 12r00r00         [24] 5144 	lcall	__gptrget
      0018E0 70 04            [24] 5145 	jnz	00102$
                           0018E2  5146 	C$queue.c$2316$2_0$382 ==.
                                   5147 ;	src/FreeRTOS/queue.c:2316: xReturn = pdTRUE;
      0018E2 7F 01            [12] 5148 	mov	r7,#0x01
      0018E4 80 02            [24] 5149 	sjmp	00103$
      0018E6                       5150 00102$:
                           0018E6  5151 	C$queue.c$2320$2_0$383 ==.
                                   5152 ;	src/FreeRTOS/queue.c:2320: xReturn = pdFALSE;
      0018E6 7F 00            [12] 5153 	mov	r7,#0x00
      0018E8                       5154 00103$:
                           0018E8  5155 	C$queue.c$2323$1_0$381 ==.
                                   5156 ;	src/FreeRTOS/queue.c:2323: return xReturn;
      0018E8 8F 82            [24] 5157 	mov	dpl,r7
                           0018EA  5158 	C$queue.c$2324$1_0$381 ==.
                                   5159 ;	src/FreeRTOS/queue.c:2324: } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
                           0018EA  5160 	C$queue.c$2324$1_0$381 ==.
                           0018EA  5161 	XG$xQueueIsQueueEmptyFromISR$0$0 ==.
      0018EA 22               [24] 5162 	ret
                                   5163 ;------------------------------------------------------------
                                   5164 ;Allocation info for local variables in function 'prvIsQueueFull'
                                   5165 ;------------------------------------------------------------
                                   5166 ;pxQueue                   Allocated to registers r5 r6 r7 
                                   5167 ;xReturn                   Allocated to registers r7 
                                   5168 ;------------------------------------------------------------
                           0018EB  5169 	Fqueue$prvIsQueueFull$0$0 ==.
                           0018EB  5170 	C$queue.c$2327$1_0$385 ==.
                                   5171 ;	src/FreeRTOS/queue.c:2327: static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
                                   5172 ;	-----------------------------------------
                                   5173 ;	 function prvIsQueueFull
                                   5174 ;	-----------------------------------------
      0018EB                       5175 _prvIsQueueFull:
      0018EB AD 82            [24] 5176 	mov	r5,dpl
      0018ED AE 83            [24] 5177 	mov	r6,dph
      0018EF AF F0            [24] 5178 	mov	r7,b
                           0018F1  5179 	C$queue.c$2331$1_0$385 ==.
                                   5180 ;	src/FreeRTOS/queue.c:2331: taskENTER_CRITICAL();
      0018F1 C0 E0            [24] 5181 	push ACC 
      0018F3 C0 A8            [24] 5182 	push IE 
                                   5183 ;	assignBit
      0018F5 C2 AF            [12] 5184 	clr	_EA
                           0018F7  5185 	C$queue.c$2333$2_0$386 ==.
                                   5186 ;	src/FreeRTOS/queue.c:2333: if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
      0018F7 74 24            [12] 5187 	mov	a,#0x24
      0018F9 2D               [12] 5188 	add	a,r5
      0018FA FA               [12] 5189 	mov	r2,a
      0018FB E4               [12] 5190 	clr	a
      0018FC 3E               [12] 5191 	addc	a,r6
      0018FD FB               [12] 5192 	mov	r3,a
      0018FE 8F 04            [24] 5193 	mov	ar4,r7
      001900 8A 82            [24] 5194 	mov	dpl,r2
      001902 8B 83            [24] 5195 	mov	dph,r3
      001904 8C F0            [24] 5196 	mov	b,r4
      001906 12r00r00         [24] 5197 	lcall	__gptrget
      001909 FA               [12] 5198 	mov	r2,a
      00190A 74 25            [12] 5199 	mov	a,#0x25
      00190C 2D               [12] 5200 	add	a,r5
      00190D FD               [12] 5201 	mov	r5,a
      00190E E4               [12] 5202 	clr	a
      00190F 3E               [12] 5203 	addc	a,r6
      001910 FE               [12] 5204 	mov	r6,a
      001911 8D 82            [24] 5205 	mov	dpl,r5
      001913 8E 83            [24] 5206 	mov	dph,r6
      001915 8F F0            [24] 5207 	mov	b,r7
      001917 12r00r00         [24] 5208 	lcall	__gptrget
      00191A FD               [12] 5209 	mov	r5,a
      00191B EA               [12] 5210 	mov	a,r2
      00191C B5 05 04         [24] 5211 	cjne	a,ar5,00102$
                           00191F  5212 	C$queue.c$2335$3_0$387 ==.
                                   5213 ;	src/FreeRTOS/queue.c:2335: xReturn = pdTRUE;
      00191F 7F 01            [12] 5214 	mov	r7,#0x01
      001921 80 02            [24] 5215 	sjmp	00103$
      001923                       5216 00102$:
                           001923  5217 	C$queue.c$2339$3_0$388 ==.
                                   5218 ;	src/FreeRTOS/queue.c:2339: xReturn = pdFALSE;
      001923 7F 00            [12] 5219 	mov	r7,#0x00
      001925                       5220 00103$:
                           001925  5221 	C$queue.c$2342$1_0$385 ==.
                                   5222 ;	src/FreeRTOS/queue.c:2342: taskEXIT_CRITICAL();
      001925 D0 E0            [24] 5223 	pop ACC 
      001927 53 E0 80         [24] 5224 	anl	_ACC,#0x80
      00192A E5 E0            [12] 5225 	mov	a,_ACC
      00192C 42 A8            [12] 5226 	orl	_IE,a
      00192E D0 E0            [24] 5227 	pop ACC 
                           001930  5228 	C$queue.c$2344$1_0$385 ==.
                                   5229 ;	src/FreeRTOS/queue.c:2344: return xReturn;
      001930 8F 82            [24] 5230 	mov	dpl,r7
                           001932  5231 	C$queue.c$2345$1_0$385 ==.
                                   5232 ;	src/FreeRTOS/queue.c:2345: }
                           001932  5233 	C$queue.c$2345$1_0$385 ==.
                           001932  5234 	XFqueue$prvIsQueueFull$0$0 ==.
      001932 22               [24] 5235 	ret
                                   5236 ;------------------------------------------------------------
                                   5237 ;Allocation info for local variables in function 'xQueueIsQueueFullFromISR'
                                   5238 ;------------------------------------------------------------
                                   5239 ;xQueue                    Allocated to registers r5 r6 r7 
                                   5240 ;xReturn                   Allocated to registers r7 
                                   5241 ;pxQueue                   Allocated to registers 
                                   5242 ;------------------------------------------------------------
                           001933  5243 	G$xQueueIsQueueFullFromISR$0$0 ==.
                           001933  5244 	C$queue.c$2348$1_0$390 ==.
                                   5245 ;	src/FreeRTOS/queue.c:2348: BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
                                   5246 ;	-----------------------------------------
                                   5247 ;	 function xQueueIsQueueFullFromISR
                                   5248 ;	-----------------------------------------
      001933                       5249 _xQueueIsQueueFullFromISR:
      001933 AD 82            [24] 5250 	mov	r5,dpl
      001935 AE 83            [24] 5251 	mov	r6,dph
      001937 AF F0            [24] 5252 	mov	r7,b
                           001939  5253 	C$queue.c$2354$1_0$390 ==.
                                   5254 ;	src/FreeRTOS/queue.c:2354: if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
      001939 74 24            [12] 5255 	mov	a,#0x24
      00193B 2D               [12] 5256 	add	a,r5
      00193C FA               [12] 5257 	mov	r2,a
      00193D E4               [12] 5258 	clr	a
      00193E 3E               [12] 5259 	addc	a,r6
      00193F FB               [12] 5260 	mov	r3,a
      001940 8F 04            [24] 5261 	mov	ar4,r7
      001942 8A 82            [24] 5262 	mov	dpl,r2
      001944 8B 83            [24] 5263 	mov	dph,r3
      001946 8C F0            [24] 5264 	mov	b,r4
      001948 12r00r00         [24] 5265 	lcall	__gptrget
      00194B FA               [12] 5266 	mov	r2,a
      00194C 74 25            [12] 5267 	mov	a,#0x25
      00194E 2D               [12] 5268 	add	a,r5
      00194F FD               [12] 5269 	mov	r5,a
      001950 E4               [12] 5270 	clr	a
      001951 3E               [12] 5271 	addc	a,r6
      001952 FE               [12] 5272 	mov	r6,a
      001953 8D 82            [24] 5273 	mov	dpl,r5
      001955 8E 83            [24] 5274 	mov	dph,r6
      001957 8F F0            [24] 5275 	mov	b,r7
      001959 12r00r00         [24] 5276 	lcall	__gptrget
      00195C FD               [12] 5277 	mov	r5,a
      00195D EA               [12] 5278 	mov	a,r2
      00195E B5 05 04         [24] 5279 	cjne	a,ar5,00102$
                           001961  5280 	C$queue.c$2356$2_0$391 ==.
                                   5281 ;	src/FreeRTOS/queue.c:2356: xReturn = pdTRUE;
      001961 7F 01            [12] 5282 	mov	r7,#0x01
      001963 80 02            [24] 5283 	sjmp	00103$
      001965                       5284 00102$:
                           001965  5285 	C$queue.c$2360$2_0$392 ==.
                                   5286 ;	src/FreeRTOS/queue.c:2360: xReturn = pdFALSE;
      001965 7F 00            [12] 5287 	mov	r7,#0x00
      001967                       5288 00103$:
                           001967  5289 	C$queue.c$2363$1_0$390 ==.
                                   5290 ;	src/FreeRTOS/queue.c:2363: return xReturn;
      001967 8F 82            [24] 5291 	mov	dpl,r7
                           001969  5292 	C$queue.c$2364$1_0$390 ==.
                                   5293 ;	src/FreeRTOS/queue.c:2364: } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
                           001969  5294 	C$queue.c$2364$1_0$390 ==.
                           001969  5295 	XG$xQueueIsQueueFullFromISR$0$0 ==.
      001969 22               [24] 5296 	ret
                                   5297 	.area CSEG    (CODE)
                                   5298 	.area CONST   (CODE)
                                   5299 	.area CABS    (ABS,CODE)
